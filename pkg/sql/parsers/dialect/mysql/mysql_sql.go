// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const UUID = 57532
const VECF32 = 57533
const VECF64 = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const INT1 = 57543
const INT2 = 57544
const INT3 = 57545
const INT4 = 57546
const INT8 = 57547
const S3OPTION = 57548
const STAGEOPTION = 57549
const SQL_SMALL_RESULT = 57550
const SQL_BIG_RESULT = 57551
const SQL_BUFFER_RESULT = 57552
const LOW_PRIORITY = 57553
const HIGH_PRIORITY = 57554
const DELAYED = 57555
const CREATE = 57556
const ALTER = 57557
const DROP = 57558
const RENAME = 57559
const ANALYZE = 57560
const ADD = 57561
const RETURNS = 57562
const SCHEMA = 57563
const TABLE = 57564
const SEQUENCE = 57565
const INDEX = 57566
const VIEW = 57567
const TO = 57568
const IGNORE = 57569
const IF = 57570
const PRIMARY = 57571
const COLUMN = 57572
const CONSTRAINT = 57573
const SPATIAL = 57574
const FULLTEXT = 57575
const FOREIGN = 57576
const KEY_BLOCK_SIZE = 57577
const SHOW = 57578
const DESCRIBE = 57579
const EXPLAIN = 57580
const DATE = 57581
const ESCAPE = 57582
const REPAIR = 57583
const OPTIMIZE = 57584
const TRUNCATE = 57585
const MAXVALUE = 57586
const PARTITION = 57587
const REORGANIZE = 57588
const LESS = 57589
const THAN = 57590
const PROCEDURE = 57591
const TRIGGER = 57592
const STATUS = 57593
const VARIABLES = 57594
const ROLE = 57595
const PROXY = 57596
const AVG_ROW_LENGTH = 57597
const STORAGE = 57598
const DISK = 57599
const MEMORY = 57600
const CHECKSUM = 57601
const COMPRESSION = 57602
const DATA = 57603
const DIRECTORY = 57604
const DELAY_KEY_WRITE = 57605
const ENCRYPTION = 57606
const ENGINE = 57607
const MAX_ROWS = 57608
const MIN_ROWS = 57609
const PACK_KEYS = 57610
const ROW_FORMAT = 57611
const STATS_AUTO_RECALC = 57612
const STATS_PERSISTENT = 57613
const STATS_SAMPLE_PAGES = 57614
const DYNAMIC = 57615
const COMPRESSED = 57616
const REDUNDANT = 57617
const COMPACT = 57618
const FIXED = 57619
const COLUMN_FORMAT = 57620
const AUTO_RANDOM = 57621
const ENGINE_ATTRIBUTE = 57622
const SECONDARY_ENGINE_ATTRIBUTE = 57623
const INSERT_METHOD = 57624
const RESTRICT = 57625
const CASCADE = 57626
const ACTION = 57627
const PARTIAL = 57628
const SIMPLE = 57629
const CHECK = 57630
const ENFORCED = 57631
const RANGE = 57632
const LIST = 57633
const ALGORITHM = 57634
const LINEAR = 57635
const PARTITIONS = 57636
const SUBPARTITION = 57637
const SUBPARTITIONS = 57638
const CLUSTER = 57639
const TYPE = 57640
const ANY = 57641
const SOME = 57642
const EXTERNAL = 57643
const LOCALFILE = 57644
const URL = 57645
const PREPARE = 57646
const DEALLOCATE = 57647
const RESET = 57648
const EXTENSION = 57649
const INCREMENT = 57650
const CYCLE = 57651
const MINVALUE = 57652
const PUBLICATION = 57653
const SUBSCRIPTIONS = 57654
const PUBLICATIONS = 57655
const PROPERTIES = 57656
const PARSER = 57657
const VISIBLE = 57658
const INVISIBLE = 57659
const BTREE = 57660
const HASH = 57661
const RTREE = 57662
const BSI = 57663
const IVFFLAT = 57664
const MASTER = 57665
const ZONEMAP = 57666
const LEADING = 57667
const BOTH = 57668
const TRAILING = 57669
const UNKNOWN = 57670
const LISTS = 57671
const OP_TYPE = 57672
const REINDEX = 57673
const EXPIRE = 57674
const ACCOUNT = 57675
const ACCOUNTS = 57676
const UNLOCK = 57677
const DAY = 57678
const NEVER = 57679
const PUMP = 57680
const MYSQL_COMPATIBILITY_MODE = 57681
const UNIQUE_CHECK_ON_AUTOINCR = 57682
const MODIFY = 57683
const CHANGE = 57684
const SECOND = 57685
const ASCII = 57686
const COALESCE = 57687
const COLLATION = 57688
const HOUR = 57689
const MICROSECOND = 57690
const MINUTE = 57691
const MONTH = 57692
const QUARTER = 57693
const REPEAT = 57694
const REVERSE = 57695
const ROW_COUNT = 57696
const WEEK = 57697
const REVOKE = 57698
const FUNCTION = 57699
const PRIVILEGES = 57700
const TABLESPACE = 57701
const EXECUTE = 57702
const SUPER = 57703
const GRANT = 57704
const OPTION = 57705
const REFERENCES = 57706
const REPLICATION = 57707
const SLAVE = 57708
const CLIENT = 57709
const USAGE = 57710
const RELOAD = 57711
const FILE = 57712
const TEMPORARY = 57713
const ROUTINE = 57714
const EVENT = 57715
const SHUTDOWN = 57716
const NULLX = 57717
const AUTO_INCREMENT = 57718
const APPROXNUM = 57719
const SIGNED = 57720
const UNSIGNED = 57721
const ZEROFILL = 57722
const ENGINES = 57723
const LOW_CARDINALITY = 57724
const AUTOEXTEND_SIZE = 57725
const ADMIN_NAME = 57726
const RANDOM = 57727
const SUSPEND = 57728
const ATTRIBUTE = 57729
const HISTORY = 57730
const REUSE = 57731
const CURRENT = 57732
const OPTIONAL = 57733
const FAILED_LOGIN_ATTEMPTS = 57734
const PASSWORD_LOCK_TIME = 57735
const UNBOUNDED = 57736
const SECONDARY = 57737
const RESTRICTED = 57738
const USER = 57739
const IDENTIFIED = 57740
const CIPHER = 57741
const ISSUER = 57742
const X509 = 57743
const SUBJECT = 57744
const SAN = 57745
const REQUIRE = 57746
const SSL = 57747
const NONE = 57748
const PASSWORD = 57749
const SHARED = 57750
const EXCLUSIVE = 57751
const MAX_QUERIES_PER_HOUR = 57752
const MAX_UPDATES_PER_HOUR = 57753
const MAX_CONNECTIONS_PER_HOUR = 57754
const MAX_USER_CONNECTIONS = 57755
const FORMAT = 57756
const VERBOSE = 57757
const CONNECTION = 57758
const TRIGGERS = 57759
const PROFILES = 57760
const LOAD = 57761
const INLINE = 57762
const INFILE = 57763
const TERMINATED = 57764
const OPTIONALLY = 57765
const ENCLOSED = 57766
const ESCAPED = 57767
const STARTING = 57768
const LINES = 57769
const ROWS = 57770
const IMPORT = 57771
const DISCARD = 57772
const JSONTYPE = 57773
const MODUMP = 57774
const OVER = 57775
const PRECEDING = 57776
const FOLLOWING = 57777
const GROUPS = 57778
const DATABASES = 57779
const TABLES = 57780
const SEQUENCES = 57781
const EXTENDED = 57782
const FULL = 57783
const PROCESSLIST = 57784
const FIELDS = 57785
const COLUMNS = 57786
const OPEN = 57787
const ERRORS = 57788
const WARNINGS = 57789
const INDEXES = 57790
const SCHEMAS = 57791
const NODE = 57792
const LOCKS = 57793
const ROLES = 57794
const TABLE_NUMBER = 57795
const COLUMN_NUMBER = 57796
const TABLE_VALUES = 57797
const TABLE_SIZE = 57798
const NAMES = 57799
const GLOBAL = 57800
const PERSIST = 57801
const SESSION = 57802
const ISOLATION = 57803
const LEVEL = 57804
const READ = 57805
const WRITE = 57806
const ONLY = 57807
const REPEATABLE = 57808
const COMMITTED = 57809
const UNCOMMITTED = 57810
const SERIALIZABLE = 57811
const LOCAL = 57812
const EVENTS = 57813
const PLUGINS = 57814
const CURRENT_TIMESTAMP = 57815
const DATABASE = 57816
const CURRENT_TIME = 57817
const LOCALTIME = 57818
const LOCALTIMESTAMP = 57819
const UTC_DATE = 57820
const UTC_TIME = 57821
const UTC_TIMESTAMP = 57822
const REPLACE = 57823
const CONVERT = 57824
const SEPARATOR = 57825
const TIMESTAMPDIFF = 57826
const CURRENT_DATE = 57827
const CURRENT_USER = 57828
const CURRENT_ROLE = 57829
const SECOND_MICROSECOND = 57830
const MINUTE_MICROSECOND = 57831
const MINUTE_SECOND = 57832
const HOUR_MICROSECOND = 57833
const HOUR_SECOND = 57834
const HOUR_MINUTE = 57835
const DAY_MICROSECOND = 57836
const DAY_SECOND = 57837
const DAY_MINUTE = 57838
const DAY_HOUR = 57839
const YEAR_MONTH = 57840
const SQL_TSI_HOUR = 57841
const SQL_TSI_DAY = 57842
const SQL_TSI_WEEK = 57843
const SQL_TSI_MONTH = 57844
const SQL_TSI_QUARTER = 57845
const SQL_TSI_YEAR = 57846
const SQL_TSI_SECOND = 57847
const SQL_TSI_MINUTE = 57848
const RECURSIVE = 57849
const CONFIG = 57850
const DRAINER = 57851
const SOURCE = 57852
const STREAM = 57853
const HEADERS = 57854
const CONNECTOR = 57855
const CONNECTORS = 57856
const DAEMON = 57857
const PAUSE = 57858
const CANCEL = 57859
const TASK = 57860
const RESUME = 57861
const MATCH = 57862
const AGAINST = 57863
const BOOLEAN = 57864
const LANGUAGE = 57865
const WITH = 57866
const QUERY = 57867
const EXPANSION = 57868
const WITHOUT = 57869
const VALIDATION = 57870
const UPGRADE = 57871
const RETRY = 57872
const ADDDATE = 57873
const BIT_AND = 57874
const BIT_OR = 57875
const BIT_XOR = 57876
const CAST = 57877
const COUNT = 57878
const APPROX_COUNT = 57879
const APPROX_COUNT_DISTINCT = 57880
const SERIAL_EXTRACT = 57881
const APPROX_PERCENTILE = 57882
const CURDATE = 57883
const CURTIME = 57884
const DATE_ADD = 57885
const DATE_SUB = 57886
const EXTRACT = 57887
const GROUP_CONCAT = 57888
const MAX = 57889
const MID = 57890
const MIN = 57891
const NOW = 57892
const POSITION = 57893
const SESSION_USER = 57894
const STD = 57895
const STDDEV = 57896
const MEDIAN = 57897
const CLUSTER_CENTERS = 57898
const KMEANS = 57899
const STDDEV_POP = 57900
const STDDEV_SAMP = 57901
const SUBDATE = 57902
const SUBSTR = 57903
const SUBSTRING = 57904
const SUM = 57905
const SYSDATE = 57906
const SYSTEM_USER = 57907
const TRANSLATE = 57908
const TRIM = 57909
const VARIANCE = 57910
const VAR_POP = 57911
const VAR_SAMP = 57912
const AVG = 57913
const RANK = 57914
const ROW_NUMBER = 57915
const DENSE_RANK = 57916
const BIT_CAST = 57917
const BITMAP_BIT_POSITION = 57918
const BITMAP_BUCKET_NUMBER = 57919
const BITMAP_COUNT = 57920
const BITMAP_CONSTRUCT_AGG = 57921
const BITMAP_OR_AGG = 57922
const NEXTVAL = 57923
const SETVAL = 57924
const CURRVAL = 57925
const LASTVAL = 57926
const ARROW = 57927
const ROW = 57928
const OUTFILE = 57929
const HEADER = 57930
const MAX_FILE_SIZE = 57931
const FORCE_QUOTE = 57932
const PARALLEL = 57933
const STRICT = 57934
const UNUSED = 57935
const BINDINGS = 57936
const DO = 57937
const DECLARE = 57938
const LOOP = 57939
const WHILE = 57940
const LEAVE = 57941
const ITERATE = 57942
const UNTIL = 57943
const CALL = 57944
const PREV = 57945
const SLIDING = 57946
const FILL = 57947
const SPBEGIN = 57948
const BACKEND = 57949
const SERVERS = 57950
const HANDLER = 57951
const PERCENT = 57952
const SAMPLE = 57953
const MO_TS = 57954
const PITR = 57955
const CDC = 57956
const TASKNAME = 57957
const SOURCEURI = 57958
const SINKTYPE = 57959
const SINKURI = 57960
const RESTART = 57961
const KILL = 57962
const BACKUP = 57963
const FILESYSTEM = 57964
const PARALLELISM = 57965
const RESTORE = 57966
const QUERY_RESULT = 57967

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"TASKNAME",
	"SOURCEURI",
	"SINKTYPE",
	"SINKURI",
	"RESTART",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12344

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 131,
	11, 769,
	22, 769,
	-2, 762,
	-1, 154,
	239, 1174,
	241, 1073,
	-2, 1120,
	-1, 181,
	43, 590,
	241, 590,
	268, 597,
	269, 597,
	465, 590,
	-2, 627,
	-1, 220,
	646, 1932,
	-2, 500,
	-1, 522,
	646, 2052,
	-2, 386,
	-1, 580,
	646, 2111,
	-2, 384,
	-1, 581,
	646, 2112,
	-2, 385,
	-1, 582,
	646, 2113,
	-2, 387,
	-1, 720,
	320, 172,
	437, 172,
	438, 172,
	-2, 1837,
	-1, 786,
	83, 1624,
	-2, 1988,
	-1, 787,
	83, 1642,
	-2, 1959,
	-1, 791,
	83, 1643,
	-2, 1987,
	-1, 824,
	83, 1551,
	-2, 2190,
	-1, 825,
	83, 1552,
	-2, 2189,
	-1, 826,
	83, 1553,
	-2, 2179,
	-1, 827,
	83, 2151,
	-2, 2172,
	-1, 828,
	83, 2152,
	-2, 2173,
	-1, 829,
	83, 2153,
	-2, 2181,
	-1, 830,
	83, 2154,
	-2, 2161,
	-1, 831,
	83, 2155,
	-2, 2170,
	-1, 832,
	83, 2156,
	-2, 2182,
	-1, 833,
	83, 2157,
	-2, 2183,
	-1, 834,
	83, 2158,
	-2, 2188,
	-1, 835,
	83, 2159,
	-2, 2193,
	-1, 836,
	83, 2160,
	-2, 2194,
	-1, 837,
	83, 1620,
	-2, 2026,
	-1, 838,
	83, 1621,
	-2, 1821,
	-1, 839,
	83, 1622,
	-2, 2035,
	-1, 840,
	83, 1623,
	-2, 1830,
	-1, 842,
	83, 1626,
	-2, 1838,
	-1, 843,
	83, 1627,
	-2, 2059,
	-1, 845,
	83, 1630,
	-2, 1857,
	-1, 847,
	83, 1632,
	-2, 2071,
	-1, 848,
	83, 1633,
	-2, 2070,
	-1, 849,
	83, 1634,
	-2, 1901,
	-1, 850,
	83, 1635,
	-2, 1983,
	-1, 853,
	83, 1638,
	-2, 2082,
	-1, 855,
	83, 1640,
	-2, 2085,
	-1, 856,
	83, 1641,
	-2, 2087,
	-1, 857,
	83, 1644,
	-2, 2095,
	-1, 858,
	83, 1645,
	-2, 1968,
	-1, 859,
	83, 1646,
	-2, 2013,
	-1, 860,
	83, 1647,
	-2, 1978,
	-1, 861,
	83, 1648,
	-2, 2003,
	-1, 872,
	83, 1529,
	-2, 2184,
	-1, 873,
	83, 1530,
	-2, 2185,
	-1, 874,
	83, 1531,
	-2, 2186,
	-1, 971,
	460, 627,
	461, 627,
	-2, 591,
	-1, 1019,
	125, 1821,
	136, 1821,
	156, 1821,
	-2, 1795,
	-1, 1135,
	22, 796,
	-2, 745,
	-1, 1241,
	11, 769,
	22, 769,
	-2, 1409,
	-1, 1323,
	22, 796,
	-2, 745,
	-1, 1664,
	83, 1695,
	-2, 1985,
	-1, 1665,
	83, 1696,
	-2, 1986,
	-1, 1830,
	84, 949,
	-2, 955,
	-1, 2270,
	108, 1112,
	152, 1112,
	191, 1112,
	194, 1112,
	281, 1112,
	-2, 1105,
	-1, 2423,
	11, 769,
	22, 769,
	-2, 890,
	-1, 2455,
	84, 1781,
	157, 1781,
	-2, 1970,
	-1, 2456,
	84, 1781,
	157, 1781,
	-2, 1969,
	-1, 2457,
	84, 1757,
	157, 1757,
	-2, 1956,
	-1, 2458,
	84, 1758,
	157, 1758,
	-2, 1961,
	-1, 2459,
	84, 1759,
	157, 1759,
	-2, 1889,
	-1, 2460,
	84, 1760,
	157, 1760,
	-2, 1883,
	-1, 2461,
	84, 1761,
	157, 1761,
	-2, 1811,
	-1, 2462,
	84, 1762,
	157, 1762,
	-2, 1958,
	-1, 2463,
	84, 1763,
	157, 1763,
	-2, 1887,
	-1, 2464,
	84, 1764,
	157, 1764,
	-2, 1882,
	-1, 2465,
	84, 1765,
	157, 1765,
	-2, 1871,
	-1, 2466,
	84, 1781,
	157, 1781,
	-2, 1872,
	-1, 2467,
	84, 1781,
	157, 1781,
	-2, 1873,
	-1, 2469,
	84, 1770,
	157, 1770,
	-2, 2003,
	-1, 2470,
	84, 1748,
	157, 1748,
	-2, 1988,
	-1, 2471,
	84, 1779,
	157, 1779,
	-2, 1959,
	-1, 2472,
	84, 1779,
	157, 1779,
	-2, 1987,
	-1, 2473,
	84, 1779,
	157, 1779,
	-2, 1839,
	-1, 2474,
	84, 1777,
	157, 1777,
	-2, 1978,
	-1, 2475,
	84, 1774,
	157, 1774,
	-2, 1862,
	-1, 2476,
	83, 1729,
	84, 1729,
	157, 1729,
	395, 1729,
	396, 1729,
	397, 1729,
	-2, 1810,
	-1, 2477,
	83, 1730,
	84, 1730,
	157, 1730,
	395, 1730,
	396, 1730,
	397, 1730,
	-2, 1812,
	-1, 2478,
	83, 1731,
	84, 1731,
	157, 1731,
	395, 1731,
	396, 1731,
	397, 1731,
	-2, 2031,
	-1, 2479,
	83, 1733,
	84, 1733,
	157, 1733,
	395, 1733,
	396, 1733,
	397, 1733,
	-2, 1960,
	-1, 2480,
	83, 1735,
	84, 1735,
	157, 1735,
	395, 1735,
	396, 1735,
	397, 1735,
	-2, 1941,
	-1, 2481,
	83, 1737,
	84, 1737,
	157, 1737,
	395, 1737,
	396, 1737,
	397, 1737,
	-2, 1888,
	-1, 2482,
	83, 1739,
	84, 1739,
	157, 1739,
	395, 1739,
	396, 1739,
	397, 1739,
	-2, 1867,
	-1, 2483,
	83, 1740,
	84, 1740,
	157, 1740,
	395, 1740,
	396, 1740,
	397, 1740,
	-2, 1868,
	-1, 2484,
	83, 1742,
	84, 1742,
	157, 1742,
	395, 1742,
	396, 1742,
	397, 1742,
	-2, 1809,
	-1, 2485,
	84, 1784,
	157, 1784,
	395, 1784,
	396, 1784,
	397, 1784,
	-2, 1844,
	-1, 2486,
	84, 1784,
	157, 1784,
	395, 1784,
	396, 1784,
	397, 1784,
	-2, 1858,
	-1, 2487,
	84, 1787,
	157, 1787,
	395, 1787,
	396, 1787,
	397, 1787,
	-2, 1840,
	-1, 2488,
	84, 1787,
	157, 1787,
	395, 1787,
	396, 1787,
	397, 1787,
	-2, 1904,
	-1, 2489,
	84, 1784,
	157, 1784,
	395, 1784,
	396, 1784,
	397, 1784,
	-2, 1925,
	-1, 2699,
	108, 1112,
	152, 1112,
	191, 1112,
	194, 1112,
	281, 1112,
	-2, 1106,
	-1, 2717,
	81, 689,
	157, 689,
	-2, 1289,
	-1, 3128,
	194, 1112,
	305, 1377,
	-2, 1349,
	-1, 3301,
	108, 1112,
	152, 1112,
	191, 1112,
	194, 1112,
	-2, 1230,
	-1, 3303,
	108, 1112,
	152, 1112,
	191, 1112,
	194, 1112,
	-2, 1230,
	-1, 3315,
	81, 689,
	157, 689,
	-2, 1289,
	-1, 3337,
	194, 1112,
	305, 1377,
	-2, 1350,
	-1, 3484,
	108, 1112,
	152, 1112,
	191, 1112,
	194, 1112,
	-2, 1231,
	-1, 3511,
	84, 1192,
	157, 1192,
	-2, 1112,
	-1, 3648,
	84, 1192,
	157, 1192,
	-2, 1112,
	-1, 3804,
	84, 1196,
	157, 1196,
	-2, 1112,
	-1, 3852,
	84, 1197,
	157, 1197,
	-2, 1112,
}

const yyPrivate = 57344

const yyLast = 49361

var yyAct = [...]int{
	753, 730, 3898, 755, 3872, 2747, 209, 1916, 3808, 3891,
	3322, 3814, 1644, 3708, 724, 3416, 3815, 3807, 3648, 3114,
	739, 3734, 3147, 2750, 3688, 3765, 3351, 3218, 3539, 3626,
	2741, 2544, 732, 3682, 1276, 3219, 3471, 3647, 3712, 3472,
	3469, 3445, 2744, 1416, 3567, 621, 2658, 783, 1136, 1018,
	3617, 1479, 3420, 1556, 3689, 3691, 3411, 1422, 1863, 639,
	64, 645, 645, 3288, 3123, 3491, 1691, 645, 662, 671,
	2318, 3338, 671, 3481, 3084, 2720, 1647, 3045, 3486, 3453,
	1130, 1640, 3304, 3216, 37, 2857, 2008, 728, 2855, 2856,
	3276, 2837, 3073, 2771, 3132, 2005, 3143, 3125, 1973, 3174,
	3258, 2919, 3306, 3204, 2120, 2579, 2451, 2321, 194, 2417,
	2078, 683, 3184, 2879, 2852, 1705, 3056, 2688, 679, 1876,
	1472, 2453, 3048, 3047, 3052, 3093, 3050, 3043, 722, 3046,
	2300, 3131, 2351, 2281, 1126, 2700, 2400, 2248, 2229, 2022,
	3023, 2228, 2966, 727, 2103, 2892, 2523, 2087, 2086, 2505,
	1797, 2051, 668, 2001, 130, 1552, 2079, 944, 2418, 2902,
	1560, 2116, 2115, 1385, 2405, 1976, 1974, 2676, 2671, 2752,
	2319, 1012, 2773, 1895, 1906, 2712, 6, 1557, 2280, 205,
	8, 204, 7, 1839, 1638, 621, 2449, 2270, 1075, 36,
	731, 1519, 2117, 1488, 2260, 1458, 2612, 2127, 1405, 1698,
	721, 1678, 1589, 1629, 15, 1426, 657, 638, 1149, 209,
	27, 209, 740, 1066, 1067, 2150, 620, 33, 2085, 2067,
	645, 1060, 1061, 1875, 1526, 2041, 1065, 729, 2082, 676,
	2314, 980, 1835, 1457, 1637, 1643, 16, 1838, 14, 1571,
	943, 23, 1011, 2425, 654, 1392, 1510, 876, 1814, 1027,
	686, 1401, 107, 1417, 1706, 685, 1545, 2611, 24, 17,
	1455, 10, 670, 195, 920, 191, 941, 926, 1321, 1277,
	187, 682, 666, 1063, 1567, 1518, 3611, 2124, 667, 878,
	879, 2647, 2647, 3499, 1581, 664, 2427, 934, 2647, 935,
	966, 3318, 3100, 2936, 1425, 2935, 1209, 1210, 1211, 1208,
	1209, 1210, 1211, 1208, 663, 1580, 665, 1209, 1210, 1211,
	1208, 1131, 2134, 3291, 3211, 2301, 2567, 1062, 2506, 1064,
	2508, 2511, 2509, 1132, 1810, 1533, 915, 1529, 1058, 641,
	1059, 1352, 1388, 193, 674, 650, 640, 2227, 1815, 1045,
	929, 1818, 925, 1024, 1340, 1059, 896, 894, 3016, 1000,
	1059, 3013, 3018, 3015, 3883, 2639, 2637, 1439, 1804, 1131,
	1336, 1531, 3409, 2915, 2913, 2056, 3677, 3574, 3568, 3412,
	1057, 3217, 2100, 8, 3693, 7, 2081, 877, 1026, 1271,
	1981, 2993, 2073, 950, 1209, 1210, 1211, 1208, 2359, 1171,
	192, 646, 3458, 1209, 1210, 1211, 1208, 2641, 906, 888,
	2553, 2561, 2121, 3454, 192, 192, 3305, 3789, 2271, 1347,
	2272, 1046, 1566, 3599, 3745, 1496, 1346, 192, 3633, 192,
	60, 183, 155, 1344, 896, 894, 2706, 1028, 192, 192,
	60, 183, 155, 681, 2991, 1575, 1377, 2132, 2938, 1360,
	1435, 644, 644, 1436, 2850, 895, 893, 652, 1812, 192,
	60, 183, 155, 947, 948, 2660, 192, 60, 183, 155,
	188, 192, 3634, 1630, 990, 1572, 1634, 1022, 1023, 931,
	1348, 924, 2443, 2265, 2704, 188, 2927, 3601, 1206, 1587,
	928, 927, 1040, 1035, 1030, 1034, 1038, 1574, 192, 188,
	1633, 2661, 2444, 995, 993, 1610, 994, 909, 188, 188,
	192, 916, 2885, 192, 60, 183, 155, 1985, 889, 1584,
	1043, 2886, 2887, 1147, 1033, 1179, 1986, 1987, 1181, 188,
	1598, 923, 1820, 1821, 2707, 1186, 188, 2524, 1187, 1438,
	3017, 1586, 1459, 3014, 1461, 867, 129, 866, 868, 869,
	933, 870, 871, 2018, 1413, 922, 1182, 992, 129, 921,
	991, 2431, 2673, 989, 2430, 908, 1189, 2432, 188, 914,
	1423, 1424, 2674, 3818, 3819, 1041, 3786, 1144, 3433, 1890,
	188, 1359, 1044, 188, 1635, 1199, 2216, 1646, 1204, 3696,
	3778, 912, 1001, 3118, 1421, 1021, 3839, 976, 1420, 1423,
	1424, 3116, 1020, 3696, 1031, 951, 3695, 3777, 1632, 3695,
	652, 3694, 3776, 2642, 997, 3694, 1532, 1530, 3680, 3782,
	2920, 2672, 3876, 3877, 3683, 3684, 3685, 3686, 1042, 932,
	3220, 3767, 953, 2921, 3767, 2922, 1175, 3770, 3571, 3277,
	3220, 2548, 2662, 1650, 3705, 1141, 1184, 154, 1619, 190,
	2136, 1996, 3233, 645, 645, 913, 1992, 3791, 3792, 1625,
	2002, 2792, 1177, 2128, 645, 1140, 3284, 1152, 1032, 181,
	3787, 3788, 3067, 3463, 1180, 1183, 3603, 3604, 999, 2956,
	2393, 2679, 3057, 671, 671, 2259, 645, 3065, 1139, 932,
	2064, 2663, 1539, 1538, 3363, 975, 973, 1202, 1203, 3784,
	1176, 2133, 1437, 180, 2357, 717, 1191, 2954, 719, 1192,
	1185, 1201, 2558, 718, 1174, 3410, 3432, 972, 2914, 2842,
	1152, 2396, 2397, 1449, 3434, 1631, 2640, 2395, 3817, 946,
	3608, 1027, 930, 3460, 1361, 2264, 3779, 1194, 3592, 3262,
	952, 985, 2656, 3062, 3063, 1039, 2401, 2111, 1196, 1249,
	1212, 1069, 1411, 668, 668, 998, 1582, 891, 1242, 3064,
	1649, 1648, 637, 3378, 981, 3847, 3082, 1252, 3146, 3061,
	1339, 919, 1579, 3727, 3610, 3375, 3094, 1178, 2657, 3236,
	2960, 1036, 3638, 2122, 1037, 3120, 2646, 1188, 3722, 1132,
	1132, 1133, 1260, 892, 2122, 1140, 2122, 1197, 1198, 3630,
	982, 986, 1166, 2713, 1027, 2016, 2017, 3144, 3145, 1132,
	673, 672, 3586, 3586, 3587, 3587, 2848, 1190, 1281, 2267,
	969, 3368, 967, 971, 989, 1024, 3713, 1280, 968, 965,
	964, 3581, 970, 955, 956, 954, 957, 958, 959, 960,
	2937, 987, 3024, 988, 2934, 1059, 3729, 2123, 1059, 3323,
	3735, 2155, 1059, 1059, 983, 984, 1195, 1132, 1059, 1059,
	1026, 3115, 669, 1154, 1153, 3790, 2746, 3330, 3589, 3589,
	3632, 907, 905, 666, 666, 1143, 1145, 2135, 1146, 667,
	667, 1193, 669, 3059, 1047, 1029, 664, 664, 1568, 669,
	1400, 979, 3269, 3149, 996, 2507, 2244, 978, 1024, 3588,
	3588, 3598, 3267, 1342, 1534, 663, 663, 665, 665, 877,
	3034, 2391, 974, 1155, 3602, 3379, 1154, 1153, 680, 1357,
	639, 3704, 3459, 2638, 61, 2139, 2141, 2142, 156, 3519,
	1135, 2562, 1813, 1026, 1319, 2324, 669, 1324, 1163, 3639,
	1134, 1023, 156, 156, 61, 1159, 1160, 3530, 1816, 1620,
	189, 61, 1621, 944, 3909, 156, 3631, 156, 2742, 2743,
	3268, 2746, 1165, 934, 1250, 935, 156, 156, 3894, 2369,
	1423, 1424, 1245, 1246, 1247, 1248, 1412, 2368, 1423, 1424,
	3423, 1157, 1128, 1398, 3068, 2389, 2390, 156, 2685, 3605,
	977, 2678, 2957, 3058, 156, 2003, 949, 945, 61, 156,
	2446, 2337, 1656, 1659, 1660, 1468, 645, 2317, 2340, 1451,
	1467, 3121, 1164, 1657, 1397, 621, 621, 723, 1396, 1419,
	3736, 2324, 2327, 3806, 621, 621, 156, 3652, 1483, 1483,
	3783, 645, 3618, 644, 1129, 1415, 1414, 3525, 156, 2317,
	3464, 156, 1995, 2793, 1138, 2794, 2795, 1993, 2682, 2683,
	1626, 3124, 671, 1511, 639, 1127, 3012, 2360, 2587, 1522,
	1522, 3307, 3407, 2681, 3223, 2339, 1162, 3144, 3145, 1353,
	209, 3764, 2323, 1521, 1521, 1292, 1293, 2325, 681, 621,
	1485, 1490, 3060, 1240, 3148, 1456, 1118, 1114, 1115, 1116,
	1117, 1171, 2592, 3698, 2591, 2590, 2588, 3540, 3541, 3542,
	3546, 3544, 3545, 3543, 3442, 3140, 3895, 3028, 2338, 1481,
	1481, 723, 2692, 2695, 2696, 2697, 2693, 2694, 2881, 2883,
	3582, 3582, 2554, 2435, 3690, 3583, 2334, 1358, 1450, 2355,
	1564, 2326, 2125, 2327, 1369, 1569, 2650, 3141, 1540, 2959,
	1375, 1374, 1578, 2897, 2898, 1373, 1477, 1478, 1372, 1362,
	675, 3270, 3532, 2328, 2790, 1325, 3651, 1323, 2323, 2317,
	2322, 2589, 2320, 2325, 2137, 2138, 2140, 1608, 1407, 1408,
	938, 939, 940, 1402, 1406, 1406, 1406, 1170, 3521, 2243,
	3259, 1483, 3520, 1483, 1140, 936, 1463, 1465, 2151, 1363,
	1382, 1603, 1604, 1588, 2653, 1475, 1476, 1027, 1402, 1402,
	2237, 3805, 2968, 2967, 1027, 1394, 990, 1645, 1050, 1055,
	1056, 1351, 2239, 2238, 1349, 1350, 933, 2326, 2821, 1384,
	1823, 1573, 1824, 3443, 3029, 2732, 2812, 2813, 1585, 2236,
	2232, 1811, 1651, 1652, 1653, 1654, 1655, 3892, 3893, 1822,
	897, 668, 2381, 1658, 1440, 1441, 898, 3910, 1354, 1355,
	1535, 1483, 2251, 1618, 1364, 1365, 1366, 1367, 1368, 2415,
	1370, 1512, 1554, 1555, 2328, 3492, 1376, 1466, 1704, 1427,
	3526, 3527, 1430, 1577, 1696, 2252, 2253, 3774, 1700, 1701,
	1702, 1703, 1753, 1607, 3099, 3594, 2882, 1737, 1562, 992,
	1391, 1606, 991, 3224, 2718, 1747, 2044, 1399, 1137, 1491,
	2593, 2594, 1207, 1559, 1409, 990, 1563, 1137, 650, 1393,
	1503, 1393, 1428, 1429, 1509, 1431, 1432, 3181, 1433, 3905,
	1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675,
	1676, 1677, 1692, 1524, 2333, 1523, 1689, 1690, 2331, 3142,
	3900, 3889, 3854, 1543, 1642, 1546, 1547, 1799, 1140, 3080,
	2811, 3826, 3820, 901, 2324, 2327, 1548, 1549, 2651, 1171,
	2719, 666, 1623, 1597, 2526, 1827, 1828, 667, 1661, 1002,
	1511, 1806, 3802, 1795, 664, 1836, 1483, 1841, 1842, 1616,
	1844, 1451, 645, 3177, 1762, 2416, 1446, 645, 992, 1738,
	1483, 991, 2130, 663, 944, 665, 1596, 1864, 990, 1599,
	1591, 1052, 1053, 1054, 900, 1613, 1483, 1612, 903, 902,
	3755, 1489, 1451, 3901, 3855, 3855, 1639, 662, 1869, 1798,
	3273, 1617, 2262, 2185, 3827, 3614, 2184, 1615, 1614, 1752,
	1611, 3730, 1641, 2296, 2719, 1636, 2042, 1889, 3235, 3718,
	2221, 3671, 2354, 1885, 1207, 3803, 1896, 1896, 2416, 1451,
	3181, 1451, 1451, 1320, 2553, 645, 645, 1680, 1963, 1836,
	1967, 3670, 3153, 1483, 1970, 1971, 1983, 2822, 2824, 2825,
	2826, 2823, 3151, 3022, 1687, 1688, 1627, 1168, 3081, 3020,
	621, 992, 1483, 3614, 991, 2416, 2328, 3665, 2900, 3664,
	1843, 2323, 2317, 2322, 2665, 2320, 2325, 1799, 1893, 1207,
	1845, 2643, 1799, 1799, 2130, 2543, 2531, 2312, 2446, 645,
	1836, 1483, 3719, 2027, 3672, 645, 645, 645, 679, 679,
	3663, 1209, 1210, 1211, 1208, 2037, 2038, 2039, 2040, 3662,
	3642, 1628, 2046, 2164, 2285, 1918, 1801, 3641, 2261, 209,
	3613, 3384, 209, 209, 2019, 209, 1735, 1736, 1965, 1739,
	2326, 3332, 2054, 1169, 1169, 2057, 3297, 1754, 2060, 1767,
	3614, 2062, 3614, 1209, 1210, 1211, 1208, 2295, 1899, 2121,
	1761, 1984, 1763, 2310, 1764, 1765, 1766, 2226, 1796, 881,
	882, 883, 884, 2011, 2012, 1753, 1753, 2089, 1802, 3251,
	1997, 3247, 2220, 3614, 1989, 3161, 1991, 1753, 1753, 2219,
	2876, 2192, 3614, 2130, 2105, 2112, 2009, 2010, 2014, 2163,
	2130, 1840, 1402, 3614, 2446, 1383, 1831, 2104, 1695, 1882,
	1897, 2618, 1243, 2026, 3333, 1856, 1406, 1867, 1868, 3298,
	1469, 1887, 3917, 1740, 1861, 1864, 3902, 3318, 1406, 1483,
	2119, 1870, 2099, 2004, 1866, 1027, 1865, 2055, 1027, 2904,
	2058, 2059, 1860, 2061, 2029, 2030, 2031, 1027, 1872, 2721,
	2556, 1878, 3252, 2610, 3248, 1881, 2555, 3283, 3162, 2091,
	2569, 1171, 1573, 2416, 1900, 1901, 2551, 1209, 1210, 1211,
	1208, 1888, 2539, 2547, 1891, 1892, 2304, 1209, 1210, 1211,
	1208, 1964, 2180, 2113, 1207, 668, 2533, 2528, 1840, 2520,
	1969, 2165, 1832, 1833, 1834, 2095, 1988, 2518, 1990, 1972,
	1877, 2110, 1879, 1880, 1847, 1848, 1849, 1850, 2516, 2514,
	2154, 2284, 1998, 2989, 2159, 2222, 1886, 2049, 886, 3556,
	2199, 2035, 2084, 2161, 1593, 3382, 1207, 1257, 1156, 1024,
	1873, 1874, 2024, 1207, 2084, 2025, 1639, 2032, 2033, 2285,
	2198, 1024, 1027, 2183, 1240, 2529, 2021, 1883, 1884, 2050,
	2052, 2174, 1846, 1124, 2173, 2171, 2172, 1851, 2013, 2534,
	2529, 1224, 2521, 2178, 1026, 2129, 1119, 1894, 1600, 1898,
	2519, 2069, 3104, 2148, 2149, 3723, 1026, 881, 882, 883,
	884, 2515, 2515, 2951, 2285, 2195, 1742, 1741, 2221, 899,
	2200, 2201, 2202, 1207, 2101, 2205, 2206, 2207, 2208, 2209,
	2210, 2211, 2212, 2213, 2214, 666, 2098, 2108, 1742, 1741,
	2109, 667, 2231, 1207, 2233, 2096, 1207, 2090, 664, 3724,
	3493, 3911, 3095, 2506, 1207, 1902, 1903, 1207, 1471, 1207,
	722, 2114, 3310, 645, 645, 645, 1024, 663, 2130, 665,
	2107, 1601, 1227, 1228, 1229, 1230, 1231, 1224, 645, 645,
	645, 645, 3308, 756, 766, 1494, 1389, 3880, 3209, 2352,
	1390, 2282, 3612, 757, 3494, 758, 762, 765, 761, 759,
	760, 1026, 2288, 1451, 1686, 2143, 3311, 1473, 1403, 2023,
	3595, 3578, 2576, 3523, 2145, 2023, 2023, 2023, 1474, 1434,
	1683, 1685, 1682, 3522, 1684, 1680, 3309, 2157, 1779, 1451,
	3096, 2500, 1444, 1445, 2152, 1447, 1448, 3508, 1452, 1453,
	1454, 2146, 2147, 3465, 3290, 3182, 2346, 3173, 763, 3167,
	1772, 1209, 1210, 1211, 1208, 3163, 886, 768, 131, 1470,
	904, 3110, 3212, 131, 3075, 2053, 2845, 2844, 2690, 1498,
	1499, 1500, 1501, 1502, 3097, 1504, 1505, 1506, 1507, 1508,
	764, 2648, 2566, 1514, 1515, 1516, 1517, 1222, 1232, 1233,
	1225, 1226, 1227, 1228, 1229, 1230, 1231, 1224, 2353, 1232,
	1233, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1224, 2420,
	2420, 1983, 2420, 2532, 2437, 2094, 1699, 2215, 2217, 2218,
	1389, 2093, 651, 2092, 1390, 131, 1404, 1379, 1378, 1142,
	621, 621, 2906, 1826, 1799, 2223, 1799, 3775, 1140, 1209,
	1210, 1211, 1208, 1208, 1483, 645, 1211, 1208, 2306, 1699,
	2510, 2158, 3535, 3534, 1799, 1799, 2303, 2923, 2305, 645,
	2245, 1281, 2316, 2315, 2782, 1140, 2490, 639, 2263, 2780,
	1280, 1027, 1527, 1522, 2053, 1983, 2758, 2756, 2495, 3908,
	2497, 3466, 3467, 3514, 209, 3885, 2358, 1521, 2454, 2361,
	2362, 2363, 2364, 2365, 2366, 2367, 3884, 2309, 2370, 2371,
	2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2424,
	2382, 2383, 2384, 2385, 2386, 2433, 2387, 2434, 2631, 2422,
	2632, 2426, 2302, 1757, 2536, 2441, 2289, 3461, 3281, 1406,
	1259, 1209, 1210, 1211, 1208, 2438, 2439, 2535, 1758, 2538,
	3210, 2549, 3907, 1258, 3830, 2119, 1025, 3801, 3800, 2290,
	2291, 131, 1483, 3725, 1483, 2659, 1483, 3667, 3655, 2293,
	2294, 1140, 3645, 3635, 3569, 1024, 131, 2833, 131, 2568,
	2831, 2329, 2330, 2494, 2335, 1743, 1744, 1745, 1209, 1210,
	1211, 1208, 2829, 3496, 2563, 3462, 3282, 2578, 1759, 3495,
	2982, 1760, 2501, 2602, 2398, 1483, 2596, 3324, 2448, 3312,
	1026, 1463, 1465, 2577, 3280, 2689, 2583, 2292, 1773, 1774,
	2428, 2603, 2298, 2597, 2598, 2299, 1483, 1209, 1210, 1211,
	1208, 2600, 2601, 3066, 2818, 2832, 2502, 1794, 2830, 2947,
	1209, 1210, 1211, 1208, 2176, 2559, 2918, 2606, 2442, 1528,
	2828, 3811, 3289, 2255, 2256, 2257, 2595, 2545, 2546, 2297,
	2981, 2917, 2445, 2816, 1209, 1210, 1211, 1208, 2273, 2274,
	2275, 2276, 1527, 2649, 2493, 1651, 1799, 2604, 1209, 1210,
	1211, 1208, 2607, 2608, 2491, 3175, 1481, 1209, 1210, 1211,
	1208, 1140, 2817, 2815, 2814, 1140, 2806, 1209, 1210, 1211,
	1208, 2800, 1483, 2799, 2798, 2686, 2687, 1481, 2584, 2797,
	2644, 2175, 1967, 2522, 2666, 2605, 2225, 2565, 2454, 3904,
	2717, 2072, 2580, 2071, 2580, 2070, 2723, 2492, 2560, 3711,
	2970, 1209, 1210, 1211, 1208, 2066, 2499, 2574, 1209, 1210,
	1211, 1208, 2541, 2550, 3051, 2734, 2557, 2552, 2635, 2065,
	2727, 2728, 3742, 2020, 1819, 1140, 1209, 1210, 1211, 1208,
	1817, 1594, 1338, 2755, 1209, 1210, 1211, 1208, 3606, 3607,
	1140, 1140, 1140, 1896, 1027, 3903, 1140, 1122, 2766, 2767,
	2768, 2769, 1140, 2776, 3738, 2777, 2778, 3438, 2779, 2701,
	2781, 3417, 2586, 3426, 2761, 2762, 3878, 1639, 2705, 2765,
	2702, 2776, 2570, 2571, 3846, 2772, 1209, 1210, 1211, 1208,
	3845, 3842, 3780, 2420, 1209, 1210, 1211, 1208, 3762, 2573,
	1209, 1210, 1211, 1208, 3707, 717, 3470, 2834, 719, 1918,
	3700, 3446, 2675, 718, 1121, 1489, 621, 3687, 3678, 2724,
	2714, 3659, 1967, 1140, 1983, 1983, 1983, 1983, 3654, 2023,
	3653, 3609, 2028, 3597, 2162, 3596, 1140, 1983, 3570, 2668,
	2420, 2670, 3425, 3516, 3477, 3447, 2858, 3591, 2753, 3440,
	2736, 3437, 2753, 3436, 3415, 3413, 1483, 3392, 2839, 2858,
	3391, 2667, 3388, 3386, 2749, 2684, 2838, 645, 645, 1209,
	1210, 1211, 1208, 3319, 3279, 3646, 2613, 2614, 2716, 2760,
	2722, 2708, 2619, 8, 3278, 7, 3275, 3265, 2168, 1223,
	1222, 1232, 1233, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1224, 3260, 3244, 2735, 3242, 2738, 2788, 2789, 2187, 2751,
	1209, 1210, 1211, 1208, 2757, 3170, 3169, 1840, 3164, 3159,
	3158, 2804, 2805, 209, 3076, 2872, 2764, 3038, 209, 1223,
	1222, 1232, 1233, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1224, 2910, 3372, 2912, 3037, 3033, 2841, 3590, 3031, 3027,
	1753, 2808, 1753, 2796, 2230, 2933, 2961, 2958, 2726, 2916,
	3860, 2890, 1799, 2729, 2827, 2819, 2809, 1799, 2946, 1209,
	1210, 1211, 1208, 2807, 1483, 2803, 2802, 2953, 2104, 2801,
	2144, 2840, 1209, 1210, 1211, 1208, 2846, 2843, 2654, 2652,
	2859, 2860, 2861, 2862, 2645, 2542, 2901, 2240, 2875, 2871,
	2235, 2874, 2873, 823, 822, 2748, 131, 131, 1025, 1027,
	2234, 2891, 2075, 2964, 2068, 1825, 1809, 2733, 2888, 1808,
	1027, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1224, 1595,
	1497, 2907, 1387, 2928, 1798, 1345, 2911, 2986, 1343, 2932,
	1288, 1284, 2725, 1283, 2939, 1125, 890, 3579, 1554, 1555,
	3439, 2730, 2731, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1213, 2930, 3424, 3303, 2975, 3239, 2977, 2193, 2194, 1562,
	2196, 2940, 3030, 2754, 2909, 2908, 3302, 2203, 3032, 2905,
	2715, 1241, 3035, 3036, 1559, 2955, 2950, 1563, 2985, 3301,
	1140, 3272, 1209, 1210, 1211, 1208, 3054, 2929, 2926, 192,
	2931, 183, 155, 2924, 3256, 3254, 3070, 2941, 2943, 2942,
	3253, 3250, 645, 3249, 3243, 1209, 1210, 1211, 1208, 2984,
	3241, 3225, 2884, 2983, 3085, 1140, 3215, 3214, 645, 2962,
	1140, 1140, 3200, 1547, 3199, 2949, 2963, 3105, 3041, 1983,
	2282, 3019, 3103, 1548, 1549, 2969, 1209, 1210, 1211, 1208,
	1209, 1210, 1211, 1208, 2987, 2980, 2978, 2979, 2972, 2971,
	2965, 2346, 2160, 2899, 2664, 2517, 2513, 2976, 2512, 188,
	3829, 3079, 2204, 3130, 2197, 3133, 2191, 3133, 3133, 3021,
	2190, 2189, 1140, 2188, 2186, 1027, 2182, 1027, 2181, 2179,
	2170, 2167, 1027, 2166, 3137, 2074, 1792, 1791, 2701, 1790,
	1756, 3154, 2629, 1755, 1746, 1495, 3026, 3025, 3040, 1483,
	1483, 3088, 3150, 1493, 192, 1278, 3092, 3737, 1027, 3673,
	3117, 3119, 3661, 3039, 3152, 3656, 1542, 1326, 3550, 1209,
	1210, 1211, 1208, 3533, 3529, 3507, 3490, 3101, 1209, 1210,
	1211, 1208, 3113, 3071, 3072, 3400, 3398, 2894, 2895, 3370,
	3369, 3366, 3087, 3365, 3331, 3078, 645, 3090, 3091, 3328,
	3155, 3156, 3054, 3326, 2973, 2974, 3292, 3129, 1553, 1544,
	3098, 1451, 1558, 3102, 1967, 1967, 1561, 1550, 3138, 1024,
	3107, 3112, 2316, 2315, 188, 1386, 2835, 2994, 2995, 2628,
	1481, 1481, 3128, 2996, 2997, 2998, 2999, 2759, 3000, 3001,
	3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3134, 3135,
	2710, 3139, 2709, 2703, 1026, 2669, 1209, 1210, 1211, 1208,
	2630, 1140, 2527, 2436, 2388, 2596, 2407, 2411, 2412, 2413,
	2408, 2283, 2409, 2414, 3213, 2572, 2410, 2254, 2224, 1768,
	1769, 1770, 1771, 1681, 2454, 1775, 1776, 1777, 1778, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1223,
	1222, 1232, 1233, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1224, 1492, 2627, 188, 2034, 651, 2626, 1830, 1805, 1624,
	645, 1576, 1551, 3171, 3168, 3172, 3166, 3165, 3178, 3179,
	3176, 3106, 2625, 1337, 3189, 3160, 3108, 3109, 1322, 1209,
	1210, 1211, 1208, 1209, 1210, 1211, 1208, 131, 2624, 3196,
	3197, 3198, 3193, 3512, 2623, 1318, 1317, 3238, 2622, 1209,
	1210, 1211, 1208, 1316, 3240, 1315, 1314, 3202, 1313, 3208,
	1312, 3191, 2621, 1311, 1310, 1209, 1210, 1211, 1208, 1309,
	1448, 1209, 1210, 1211, 1208, 1209, 1210, 1211, 1208, 1308,
	3263, 1307, 1306, 1305, 1304, 3255, 1303, 1302, 3226, 1209,
	1210, 1211, 1208, 1301, 3228, 1300, 1299, 1298, 1297, 3227,
	2620, 1296, 1295, 1294, 131, 3232, 1291, 1290, 1289, 3245,
	3231, 131, 1287, 1286, 1285, 1282, 3111, 2617, 1275, 1274,
	1272, 1271, 3077, 1270, 131, 1269, 3237, 1209, 1210, 1211,
	1208, 3266, 1268, 3296, 2616, 1267, 131, 1266, 3089, 1265,
	3136, 1264, 2580, 2615, 1209, 1210, 1211, 1208, 1263, 2420,
	1983, 3315, 3180, 1027, 1262, 1261, 1256, 1255, 1254, 1253,
	1027, 1209, 1210, 1211, 1208, 2609, 1173, 1123, 3192, 2599,
	1209, 1210, 1211, 1208, 3754, 3334, 3261, 3271, 1140, 3858,
	3505, 3752, 2575, 3750, 3274, 3748, 3816, 3130, 3257, 1694,
	3367, 1140, 1209, 1210, 1211, 1208, 1209, 1210, 1211, 1208,
	2287, 3335, 1140, 2269, 3381, 3185, 3186, 1161, 1483, 1209,
	1210, 1211, 1208, 3188, 3374, 2691, 1209, 1210, 1211, 1208,
	2447, 3286, 3287, 2077, 1172, 2772, 2868, 3190, 1967, 3317,
	2865, 2869, 1140, 1799, 1223, 1222, 1232, 1233, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1224, 2866, 1799, 3314, 3364,
	3397, 2867, 3402, 3399, 3325, 2858, 3327, 3357, 3313, 3383,
	3403, 209, 3293, 3294, 3295, 3321, 2023, 2864, 3299, 3300,
	3405, 2863, 116, 2870, 1140, 2412, 2413, 63, 2540, 3394,
	2530, 3371, 62, 1380, 1858, 1859, 3404, 3373, 3376, 1481,
	3074, 3126, 2402, 3127, 2784, 3380, 2945, 2858, 1853, 1854,
	1855, 2785, 2786, 2787, 3385, 3229, 3230, 3387, 2356, 3401,
	3377, 3203, 1955, 3441, 3389, 3390, 3393, 3395, 1536, 3396,
	3450, 2525, 2545, 2546, 1140, 2564, 1590, 1570, 2241, 2407,
	2411, 2412, 2413, 2408, 3422, 2409, 2414, 647, 2036, 2410,
	1167, 3049, 648, 1140, 1483, 1483, 3042, 649, 2737, 3085,
	2711, 2308, 2278, 1862, 1829, 1742, 1741, 1333, 1334, 3485,
	3869, 3485, 3419, 3418, 3448, 3449, 3473, 1331, 1332, 3408,
	1329, 1330, 1327, 1328, 3658, 3157, 2399, 1140, 3501, 1140,
	2394, 1968, 3479, 3480, 1443, 1442, 1200, 3195, 2893, 3504,
	3234, 3506, 2242, 2106, 1395, 3475, 1483, 3316, 1371, 1418,
	1645, 3456, 1645, 3836, 3457, 3455, 3834, 3320, 3794, 3772,
	3771, 3476, 1027, 3769, 645, 3714, 1140, 1140, 3674, 3564,
	1140, 1140, 3563, 3478, 3502, 1481, 1692, 3489, 3414, 3488,
	3246, 3222, 3221, 1982, 3206, 2341, 3482, 3500, 2311, 3473,
	3473, 3317, 3452, 3473, 3473, 3552, 2091, 3547, 3510, 1864,
	1592, 3561, 3537, 3538, 3205, 2903, 3548, 3549, 3364, 3513,
	3565, 3566, 3517, 1393, 3862, 3861, 3357, 3264, 2948, 3509,
	2271, 2169, 1341, 1483, 1158, 3861, 3862, 1692, 3531, 3515,
	3201, 881, 882, 883, 884, 1137, 1137, 1410, 3558, 196,
	3, 71, 2, 3881, 3593, 3882, 1, 2636, 1803, 1335,
	885, 880, 3585, 1460, 3557, 2429, 131, 3559, 2015, 131,
	131, 1487, 131, 3553, 1807, 887, 2877, 2878, 3194, 2880,
	2655, 2126, 2847, 2392, 3577, 2258, 3572, 3069, 1381, 3576,
	937, 1748, 1605, 1049, 1151, 1602, 3580, 3584, 1150, 3616,
	1148, 3627, 3621, 1697, 770, 2080, 2836, 2810, 3560, 3427,
	3868, 3428, 1025, 3897, 1481, 131, 3828, 3871, 1140, 1622,
	754, 3554, 3763, 3679, 1025, 3555, 3832, 3681, 3575, 3650,
	3644, 2131, 1205, 2925, 962, 811, 781, 3615, 131, 1273,
	1583, 1645, 2992, 2990, 1051, 780, 3622, 3285, 3422, 2680,
	3624, 3623, 2896, 3629, 1027, 3640, 3636, 1048, 963, 2063,
	3676, 1140, 3573, 1537, 1541, 2307, 1483, 3637, 3733, 3497,
	3498, 3511, 3122, 2745, 1565, 3728, 3329, 3431, 3619, 3429,
	3430, 687, 1994, 619, 3473, 1009, 3551, 2076, 688, 3657,
	2286, 3785, 3660, 917, 2268, 918, 910, 3666, 2699, 2698,
	1662, 1214, 1679, 3697, 3010, 3011, 1251, 726, 2156, 2677,
	3703, 3352, 3692, 2889, 1260, 70, 69, 3668, 68, 1241,
	67, 2045, 217, 772, 216, 1140, 3444, 3675, 3468, 3759,
	3873, 752, 751, 750, 749, 748, 747, 2406, 3715, 2404,
	2403, 1978, 1977, 2043, 3083, 2775, 3699, 1481, 3473, 2770,
	1907, 1905, 2763, 2336, 2343, 3701, 3503, 3710, 1904, 3813,
	3743, 3744, 3706, 3528, 3709, 2820, 3732, 3421, 1852, 2332,
	3341, 1924, 1140, 3717, 2791, 1921, 1920, 2783, 3524, 3518,
	1483, 3739, 1952, 3757, 3760, 3625, 3747, 3749, 3751, 3753,
	3726, 3484, 3336, 3337, 3343, 3473, 3731, 2277, 1074, 3669,
	3761, 1070, 3740, 1072, 1073, 1071, 2585, 2313, 3746, 3353,
	1223, 1222, 1232, 1233, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1224, 3344, 3044, 2250, 3768, 3766, 1483, 2249, 2247,
	3627, 3756, 2246, 3339, 1356, 3702, 3781, 3451, 3361, 3362,
	2452, 2450, 1120, 3187, 3340, 3183, 3804, 2088, 2102, 2944,
	1979, 1975, 3812, 3793, 3536, 3795, 2849, 3600, 1857, 3797,
	911, 1481, 3809, 3798, 3799, 3716, 2266, 114, 104, 172,
	3720, 3721, 55, 171, 54, 112, 169, 53, 3796, 99,
	98, 3345, 111, 167, 52, 201, 200, 3821, 203, 3822,
	3841, 3823, 3825, 3824, 202, 3835, 199, 3837, 3838, 2503,
	2504, 3741, 3833, 3831, 198, 1140, 3692, 1525, 1481, 197,
	3840, 1726, 3773, 3487, 875, 43, 42, 173, 41, 105,
	56, 40, 3650, 39, 38, 3850, 34, 13, 3848, 12,
	35, 3809, 22, 3852, 3853, 3851, 21, 3859, 3867, 1609,
	3875, 3857, 20, 3874, 3856, 3863, 3864, 3865, 3866, 26,
	32, 31, 124, 123, 30, 122, 121, 120, 3886, 119,
	1140, 118, 3879, 29, 19, 47, 46, 45, 9, 110,
	3732, 3888, 3887, 108, 3890, 3360, 28, 2322, 109, 106,
	3809, 3899, 3896, 1645, 102, 192, 60, 183, 155, 100,
	82, 81, 80, 95, 94, 93, 92, 91, 90, 1092,
	88, 89, 3349, 184, 3906, 961, 79, 78, 77, 76,
	176, 75, 3875, 3913, 185, 3874, 3912, 97, 2423, 103,
	101, 86, 3899, 3914, 3346, 3350, 3348, 3347, 3918, 3843,
	3844, 96, 87, 129, 85, 84, 3916, 83, 74, 73,
	72, 153, 152, 151, 150, 149, 147, 148, 117, 146,
	192, 60, 183, 155, 145, 188, 144, 143, 142, 141,
	48, 49, 3355, 3356, 50, 51, 163, 162, 184, 164,
	166, 168, 165, 170, 1722, 176, 160, 158, 161, 185,
	159, 1719, 1982, 157, 65, 1721, 1718, 1720, 1724, 1725,
	11, 131, 113, 1723, 18, 25, 4, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3363, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	188, 1078, 3342, 0, 0, 0, 0, 0, 3354, 0,
	0, 0, 137, 138, 0, 139, 140, 0, 0, 0,
	0, 1100, 1104, 1106, 1108, 1110, 1111, 1113, 0, 1118,
	1114, 1115, 1116, 1117, 2988, 1095, 1096, 1097, 1098, 1076,
	1077, 1101, 0, 1079, 0, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1091, 1093, 1089, 1090, 1099, 0,
	0, 0, 0, 0, 0, 0, 1103, 1105, 1107, 1109,
	1112, 0, 0, 0, 0, 3406, 0, 137, 138, 0,
	139, 140, 0, 154, 182, 190, 0, 115, 1223, 1222,
	1232, 1233, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1224,
	0, 0, 0, 0, 1094, 181, 175, 174, 0, 0,
	0, 0, 66, 0, 0, 3435, 0, 1729, 1730, 1731,
	1732, 1733, 1734, 1727, 1728, 0, 0, 0, 0, 0,
	1953, 0, 0, 0, 0, 0, 0, 192, 3359, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 182,
	190, 0, 115, 0, 2153, 0, 0, 0, 0, 3483,
	0, 0, 0, 0, 0, 1955, 0, 0, 0, 0,
	181, 175, 174, 177, 178, 179, 0, 66, 1223, 1222,
	1232, 1233, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1224,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 186, 0, 0, 188, 0, 0,
	0, 0, 0, 0, 3358, 0, 0, 1930, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 1235, 180,
	1239, 126, 0, 0, 0, 0, 0, 0, 177, 178,
	179, 0, 0, 2581, 2582, 0, 1236, 1238, 1234, 0,
	1237, 1223, 1222, 1232, 1233, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1224, 0, 0, 0, 0, 0, 0, 186,
	1223, 1222, 1232, 1233, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1224, 0, 0, 0, 1946, 0, 0, 127, 0,
	125, 0, 0, 1953, 180, 0, 126, 0, 1914, 0,
	0, 59, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1982, 1982, 1982, 1982, 0, 0, 0, 1955, 1923,
	0, 0, 0, 0, 1982, 0, 0, 0, 1956, 1957,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 127, 0, 0, 1209, 1210, 1211, 1208,
	0, 0, 0, 0, 1922, 1934, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1940, 0, 0, 0,
	1930, 0, 0, 0, 0, 135, 189, 1102, 136, 0,
	0, 0, 0, 156, 0, 0, 1928, 1962, 57, 0,
	1929, 1931, 1933, 0, 1935, 1936, 1937, 1941, 1942, 1943,
	1945, 1948, 1949, 1950, 0, 61, 0, 0, 0, 0,
	131, 1938, 1947, 1939, 1953, 131, 0, 0, 0, 1914,
	0, 0, 0, 0, 0, 1726, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 1946, 0,
	135, 189, 0, 136, 0, 1954, 0, 131, 156, 1955,
	1923, 0, 0, 57, 128, 44, 0, 0, 0, 1956,
	1957, 58, 0, 0, 0, 5, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	133, 0, 0, 134, 0, 1922, 0, 0, 0, 0,
	1951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1930, 0, 0, 0, 0, 0, 1927, 0, 1913,
	1915, 1912, 0, 1909, 1926, 0, 0, 0, 1934, 128,
	44, 0, 0, 0, 0, 0, 58, 0, 0, 1940,
	0, 0, 0, 0, 0, 0, 0, 1925, 1944, 1908,
	0, 0, 0, 0, 132, 133, 0, 1932, 134, 1928,
	1962, 0, 0, 1929, 1931, 1933, 0, 1935, 1936, 1937,
	1941, 1942, 1943, 1945, 1948, 1949, 1950, 0, 0, 1946,
	0, 0, 0, 0, 1938, 1947, 1939, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1917, 0, 1722, 0,
	0, 0, 0, 0, 0, 1719, 0, 0, 0, 1721,
	1718, 1720, 1724, 1725, 0, 1726, 0, 1723, 1954, 0,
	0, 0, 1025, 0, 131, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 0, 1982, 0, 0, 0,
	0, 0, 0, 0, 0, 1910, 1911, 0, 0, 0,
	1913, 2740, 1912, 0, 2739, 131, 0, 0, 0, 1934,
	0, 0, 0, 1951, 0, 156, 0, 0, 0, 0,
	1940, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1927, 0, 0, 0, 0, 0, 0, 1926, 0, 0,
	1928, 1962, 0, 0, 1929, 1931, 1933, 0, 1935, 1936,
	1937, 1941, 1942, 1943, 1945, 1948, 1949, 1950, 0, 0,
	0, 1944, 0, 0, 0, 1938, 1947, 1939, 0, 0,
	1932, 0, 0, 0, 1092, 0, 0, 1917, 0, 0,
	0, 0, 0, 1959, 1958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1954,
	1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
	1717, 1729, 1730, 1731, 1732, 1733, 1734, 1727, 1728, 0,
	0, 0, 0, 0, 0, 0, 1910, 1911, 1722, 0,
	0, 0, 0, 0, 0, 1719, 1919, 0, 0, 1721,
	1718, 1720, 1724, 1725, 1951, 0, 0, 1723, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1927, 0, 0, 0, 0, 0, 0, 1926, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1961, 0,
	0, 1960, 1092, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1944, 0, 0, 0, 1078, 0, 0, 0,
	1068, 1932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1959, 1958, 1100, 1104, 1106, 1108,
	1110, 1111, 1113, 0, 1118, 1114, 1115, 1116, 1117, 0,
	1095, 1096, 1097, 1098, 1076, 1077, 1101, 0, 1079, 0,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1091,
	1093, 1089, 1090, 1099, 0, 0, 0, 0, 0, 0,
	0, 1103, 1105, 1107, 1109, 1112, 0, 1919, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
	1717, 1729, 1730, 1731, 1732, 1733, 1734, 1727, 1728, 1094,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 1961,
	131, 0, 1960, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 0, 0, 1100, 1104, 1106, 1108, 1110, 1111,
	1113, 0, 1118, 1114, 1115, 1116, 1117, 0, 1095, 1096,
	1097, 1098, 1076, 1077, 1101, 0, 1079, 0, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1091, 1093, 1089,
	1090, 1099, 0, 0, 0, 0, 0, 1982, 0, 1103,
	1105, 1107, 1109, 1112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	788, 0, 0, 0, 0, 0, 0, 0, 0, 382,
	0, 506, 539, 528, 612, 494, 0, 0, 131, 0,
	0, 0, 741, 0, 0, 0, 322, 0, 0, 352,
	543, 525, 535, 526, 511, 512, 513, 520, 332, 514,
	515, 516, 486, 517, 487, 518, 519, 779, 542, 493,
	411, 366, 560, 559, 0, 0, 846, 854, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 0, 769, 823, 822, 756, 766, 0, 0, 295,
	215, 488, 608, 490, 489, 757, 0, 758, 762, 765,
	761, 759, 760, 0, 838, 0, 0, 0, 0, 0,
	0, 725, 737, 0, 742, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 734, 735,
	0, 0, 0, 0, 789, 0, 736, 0, 0, 784,
	763, 767, 0, 0, 0, 0, 285, 417, 434, 296,
	407, 447, 301, 414, 291, 381, 404, 0, 0, 287,
	432, 413, 363, 342, 343, 286, 0, 399, 320, 334,
	317, 379, 764, 787, 791, 316, 860, 785, 442, 289,
	0, 441, 378, 428, 433, 364, 358, 288, 430, 362,
	357, 346, 324, 861, 347, 348, 338, 390, 356, 391,
	339, 368, 367, 369, 0, 0, 0, 0, 0, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 782, 0, 605, 0, 444, 0,
	1102, 844, 0, 0, 0, 416, 0, 0, 349, 0,
	0, 0, 786, 0, 402, 384, 857, 0, 0, 400,
	354, 429, 392, 435, 418, 443, 396, 393, 280, 419,
	319, 365, 292, 294, 314, 321, 323, 325, 326, 374,
	375, 387, 406, 420, 421, 422, 318, 302, 401, 303,
	336, 304, 281, 310, 308, 311, 408, 312, 283, 388,
	426, 131, 331, 397, 361, 284, 360, 389, 425, 424,
	293, 451, 457, 458, 547, 0, 463, 633, 634, 635,
	472, 477, 478, 479, 481, 482, 483, 484, 548, 565,
	532, 502, 465, 556, 499, 503, 504, 568, 1750, 1749,
	1751, 456, 350, 351, 0, 329, 277, 278, 628, 842,
	380, 570, 603, 604, 495, 0, 856, 837, 839, 840,
	843, 847, 848, 849, 850, 851, 853, 855, 859, 627,
	0, 549, 564, 631, 563, 624, 386, 0, 405, 561,
	508, 0, 553, 527, 0, 554, 523, 558, 0, 497,
	0, 412, 437, 449, 466, 469, 498, 583, 584, 585,
	282, 468, 587, 588, 589, 590, 591, 592, 593, 586,
	858, 530, 507, 533, 448, 510, 509, 0, 0, 544,
	790, 545, 546, 370, 371, 372, 373, 845, 571, 300,
	467, 395, 0, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 537, 534, 636, 0, 594, 595, 0,
	0, 461, 462, 328, 335, 480, 337, 299, 385, 330,
	446, 344, 0, 473, 538, 474, 597, 600, 598, 599,
	377, 340, 341, 409, 345, 355, 398, 445, 383, 403,
	297, 436, 410, 359, 524, 551, 867, 841, 866, 868,
	869, 865, 870, 871, 852, 746, 0, 797, 863, 862,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 578, 577, 576, 575, 574, 573, 572,
	0, 0, 521, 423, 309, 271, 305, 306, 313, 625,
	622, 427, 626, 0, 279, 501, 353, 0, 394, 327,
	566, 567, 0, 0, 830, 804, 805, 806, 743, 807,
	801, 802, 744, 803, 831, 795, 827, 828, 771, 798,
	808, 826, 809, 829, 832, 833, 872, 873, 815, 799,
	243, 874, 812, 834, 825, 824, 810, 796, 835, 836,
	778, 773, 813, 814, 800, 818, 819, 820, 745, 792,
	793, 794, 816, 817, 774, 775, 776, 777, 0, 0,
	0, 452, 453, 454, 476, 0, 438, 500, 623, 0,
	0, 0, 0, 0, 0, 0, 550, 562, 596, 0,
	606, 607, 609, 611, 821, 613, 415, 0, 614, 615,
	616, 617, 618, 788, 629, 491, 492, 630, 602, 0,
	738, 0, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 741, 0, 0, 0, 322,
	1800, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	779, 542, 493, 411, 366, 560, 559, 0, 0, 846,
	854, 0, 0, 0, 0, 0, 0, 0, 0, 2006,
	0, 0, 733, 0, 0, 769, 823, 822, 756, 766,
	0, 0, 295, 215, 488, 608, 490, 489, 757, 0,
	758, 762, 765, 761, 759, 760, 0, 838, 0, 0,
	0, 0, 0, 0, 725, 737, 0, 742, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 734, 735, 0, 0, 0, 0, 789, 0, 736,
	0, 0, 2007, 763, 767, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 764, 787, 791, 316, 860,
	785, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 861, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 782, 0, 605,
	0, 444, 0, 0, 844, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 786, 0, 402, 384, 857,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	633, 634, 635, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 628, 842, 380, 570, 603, 604, 495, 0, 856,
	837, 839, 840, 843, 847, 848, 849, 850, 851, 853,
	855, 859, 627, 0, 549, 564, 631, 563, 624, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 858, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 790, 545, 546, 370, 371, 372, 373,
	845, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 636, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 867,
	841, 866, 868, 869, 865, 870, 871, 852, 746, 0,
	797, 863, 862, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 625, 622, 427, 626, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 830, 804, 805,
	806, 743, 807, 801, 802, 744, 803, 831, 795, 827,
	828, 771, 798, 808, 826, 809, 829, 832, 833, 872,
	873, 815, 799, 243, 874, 812, 834, 825, 824, 810,
	796, 835, 836, 778, 773, 813, 814, 800, 818, 819,
	820, 745, 792, 793, 794, 816, 817, 774, 775, 776,
	777, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 623, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 821, 613, 415,
	0, 614, 615, 616, 617, 618, 0, 629, 491, 492,
	630, 602, 0, 738, 192, 788, 0, 0, 0, 0,
	0, 0, 0, 0, 382, 0, 506, 539, 528, 612,
	494, 0, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 322, 0, 0, 352, 543, 525, 535, 526, 511,
	512, 513, 520, 332, 514, 515, 516, 486, 517, 487,
	518, 519, 1244, 542, 493, 411, 366, 560, 559, 0,
	0, 846, 854, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 733, 0, 0, 769, 823, 822,
	756, 766, 0, 0, 295, 215, 488, 608, 490, 489,
	757, 0, 758, 762, 765, 761, 759, 760, 0, 838,
	0, 0, 0, 0, 0, 0, 725, 737, 0, 742,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 734, 735, 0, 0, 0, 0, 789,
	0, 736, 0, 0, 784, 763, 767, 0, 0, 0,
	0, 285, 417, 434, 296, 407, 447, 301, 414, 291,
	381, 404, 0, 0, 287, 432, 413, 363, 342, 343,
	286, 0, 399, 320, 334, 317, 379, 764, 787, 791,
	316, 860, 785, 442, 289, 0, 441, 378, 428, 433,
	364, 358, 288, 430, 362, 357, 346, 324, 861, 347,
	348, 338, 390, 356, 391, 339, 368, 367, 369, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 782,
	0, 605, 0, 444, 0, 0, 844, 0, 0, 0,
	416, 0, 0, 349, 0, 0, 0, 786, 0, 402,
	384, 857, 0, 0, 400, 354, 429, 392, 435, 418,
	443, 396, 393, 280, 419, 319, 365, 292, 294, 314,
	321, 323, 325, 326, 374, 375, 387, 406, 420, 421,
	422, 318, 302, 401, 303, 336, 304, 281, 310, 308,
	311, 408, 312, 283, 388, 426, 0, 331, 397, 361,
	284, 360, 389, 425, 424, 293, 451, 457, 458, 547,
	0, 463, 633, 634, 635, 472, 477, 478, 479, 481,
	482, 483, 484, 548, 565, 532, 502, 465, 556, 499,
	503, 504, 568, 0, 0, 0, 456, 350, 351, 0,
	329, 277, 278, 628, 842, 380, 570, 603, 604, 495,
	0, 856, 837, 839, 840, 843, 847, 848, 849, 850,
	851, 853, 855, 859, 627, 0, 549, 564, 631, 563,
	624, 386, 0, 405, 561, 508, 0, 553, 527, 0,
	554, 523, 558, 0, 497, 0, 412, 437, 449, 466,
	469, 498, 583, 584, 585, 282, 468, 587, 588, 589,
	590, 591, 592, 593, 586, 858, 530, 507, 533, 448,
	510, 509, 0, 0, 544, 790, 545, 546, 370, 371,
	372, 373, 845, 571, 300, 467, 395, 0, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 536, 537, 534,
	636, 0, 594, 595, 0, 0, 461, 462, 328, 335,
	480, 337, 299, 385, 330, 446, 344, 0, 473, 538,
	474, 597, 600, 598, 599, 377, 340, 341, 409, 345,
	355, 398, 445, 383, 403, 297, 436, 410, 359, 524,
	551, 867, 841, 866, 868, 869, 865, 870, 871, 852,
	746, 0, 797, 863, 862, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 578, 577,
	576, 575, 574, 573, 572, 0, 0, 521, 423, 309,
	271, 305, 306, 313, 625, 622, 427, 626, 0, 279,
	501, 353, 156, 394, 327, 566, 567, 0, 0, 830,
	804, 805, 806, 743, 807, 801, 802, 744, 803, 831,
	795, 827, 828, 771, 798, 808, 826, 809, 829, 832,
	833, 872, 873, 815, 799, 243, 874, 812, 834, 825,
	824, 810, 796, 835, 836, 778, 773, 813, 814, 800,
	818, 819, 820, 745, 792, 793, 794, 816, 817, 774,
	775, 776, 777, 0, 0, 0, 452, 453, 454, 476,
	0, 438, 500, 623, 0, 0, 0, 0, 0, 0,
	0, 550, 562, 596, 0, 606, 607, 609, 611, 821,
	613, 415, 0, 614, 615, 616, 617, 618, 788, 629,
	491, 492, 630, 602, 0, 738, 0, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 322, 3915, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 779, 542, 493, 411, 366,
	560, 559, 0, 0, 846, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 0, 0,
	769, 823, 822, 756, 766, 0, 0, 295, 215, 488,
	608, 490, 489, 757, 0, 758, 762, 765, 761, 759,
	760, 0, 838, 0, 0, 0, 0, 0, 0, 725,
	737, 0, 742, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 735, 0, 0,
	0, 0, 789, 0, 736, 0, 0, 784, 763, 767,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	764, 787, 791, 316, 860, 785, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 861, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 782, 0, 605, 0, 444, 0, 0, 844,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	786, 0, 402, 384, 857, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 842, 380, 570,
	603, 604, 495, 0, 856, 837, 839, 840, 843, 847,
	848, 849, 850, 851, 853, 855, 859, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 858, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 790, 545,
	546, 370, 371, 372, 373, 845, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 867, 841, 866, 868, 869, 865,
	870, 871, 852, 746, 0, 797, 863, 862, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 830, 804, 805, 806, 743, 807, 801, 802,
	744, 803, 831, 795, 827, 828, 771, 798, 808, 826,
	809, 829, 832, 833, 872, 873, 815, 799, 243, 874,
	812, 834, 825, 824, 810, 796, 835, 836, 778, 773,
	813, 814, 800, 818, 819, 820, 745, 792, 793, 794,
	816, 817, 774, 775, 776, 777, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 821, 613, 415, 0, 614, 615, 616, 617,
	618, 788, 629, 491, 492, 630, 602, 0, 738, 0,
	382, 0, 506, 539, 528, 612, 494, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 322, 0, 0,
	352, 543, 525, 535, 526, 511, 512, 513, 520, 332,
	514, 515, 516, 486, 517, 487, 518, 519, 779, 542,
	493, 411, 366, 560, 559, 0, 0, 846, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	733, 0, 0, 769, 823, 822, 756, 766, 0, 0,
	295, 215, 488, 608, 490, 489, 757, 0, 758, 762,
	765, 761, 759, 760, 0, 838, 0, 0, 0, 0,
	0, 0, 725, 737, 0, 742, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 734,
	735, 0, 0, 0, 0, 789, 0, 736, 0, 0,
	784, 763, 767, 0, 0, 0, 0, 285, 417, 434,
	296, 407, 447, 301, 414, 291, 381, 404, 0, 0,
	287, 432, 413, 363, 342, 343, 286, 0, 399, 320,
	334, 317, 379, 764, 787, 791, 316, 860, 785, 442,
	289, 0, 441, 378, 428, 433, 364, 358, 288, 430,
	362, 357, 346, 324, 861, 347, 348, 338, 390, 356,
	391, 339, 368, 367, 369, 0, 0, 0, 0, 0,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 601, 782, 0, 605, 0, 444,
	0, 0, 844, 0, 0, 0, 416, 0, 0, 349,
	0, 0, 0, 786, 0, 402, 384, 857, 3810, 0,
	400, 354, 429, 392, 435, 418, 443, 396, 393, 280,
	419, 319, 365, 292, 294, 314, 321, 323, 325, 326,
	374, 375, 387, 406, 420, 421, 422, 318, 302, 401,
	303, 336, 304, 281, 310, 308, 311, 408, 312, 283,
	388, 426, 0, 331, 397, 361, 284, 360, 389, 425,
	424, 293, 451, 457, 458, 547, 0, 463, 633, 634,
	635, 472, 477, 478, 479, 481, 482, 483, 484, 548,
	565, 532, 502, 465, 556, 499, 503, 504, 568, 0,
	0, 0, 456, 350, 351, 0, 329, 277, 278, 628,
	842, 380, 570, 603, 604, 495, 0, 856, 837, 839,
	840, 843, 847, 848, 849, 850, 851, 853, 855, 859,
	627, 0, 549, 564, 631, 563, 624, 386, 0, 405,
	561, 508, 0, 553, 527, 0, 554, 523, 558, 0,
	497, 0, 412, 437, 449, 466, 469, 498, 583, 584,
	585, 282, 468, 587, 588, 589, 590, 591, 592, 593,
	586, 858, 530, 507, 533, 448, 510, 509, 0, 0,
	544, 790, 545, 546, 370, 371, 372, 373, 845, 571,
	300, 467, 395, 0, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 537, 534, 636, 0, 594, 595,
	0, 0, 461, 462, 328, 335, 480, 337, 299, 385,
	330, 446, 344, 0, 473, 538, 474, 597, 600, 598,
	599, 377, 340, 341, 409, 345, 355, 398, 445, 383,
	403, 297, 436, 410, 359, 524, 551, 867, 841, 866,
	868, 869, 865, 870, 871, 852, 746, 0, 797, 863,
	862, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 578, 577, 576, 575, 574, 573,
	572, 0, 0, 521, 423, 309, 271, 305, 306, 313,
	625, 622, 427, 626, 0, 279, 501, 353, 0, 394,
	327, 566, 567, 0, 0, 830, 804, 805, 806, 743,
	807, 801, 802, 744, 803, 831, 795, 827, 828, 771,
	798, 808, 826, 809, 829, 832, 833, 872, 873, 815,
	799, 243, 874, 812, 834, 825, 824, 810, 796, 835,
	836, 778, 773, 813, 814, 800, 818, 819, 820, 745,
	792, 793, 794, 816, 817, 774, 775, 776, 777, 0,
	0, 0, 452, 453, 454, 476, 0, 438, 500, 623,
	0, 0, 0, 0, 0, 0, 0, 550, 562, 596,
	0, 606, 607, 609, 611, 821, 613, 415, 0, 614,
	615, 616, 617, 618, 788, 629, 491, 492, 630, 602,
	0, 738, 0, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	322, 1800, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 779, 542, 493, 411, 366, 560, 559, 0, 0,
	846, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 0, 769, 823, 822, 756,
	766, 0, 0, 295, 215, 488, 608, 490, 489, 757,
	0, 758, 762, 765, 761, 759, 760, 0, 838, 0,
	0, 0, 0, 0, 0, 725, 737, 0, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 735, 0, 0, 0, 0, 789, 0,
	736, 0, 0, 784, 763, 767, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 764, 787, 791, 316,
	860, 785, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 861, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 782, 0,
	605, 0, 444, 0, 0, 844, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 786, 0, 402, 384,
	857, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 633, 634, 635, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 628, 842, 380, 570, 603, 604, 495, 0,
	856, 837, 839, 840, 843, 847, 848, 849, 850, 851,
	853, 855, 859, 627, 0, 549, 564, 631, 563, 624,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 858, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 790, 545, 546, 370, 371, 372,
	373, 845, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 636,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	867, 841, 866, 868, 869, 865, 870, 871, 852, 746,
	0, 797, 863, 862, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 625, 622, 427, 626, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 830, 804,
	805, 806, 743, 807, 801, 802, 744, 803, 831, 795,
	827, 828, 771, 798, 808, 826, 809, 829, 832, 833,
	872, 873, 815, 799, 243, 874, 812, 834, 825, 824,
	810, 796, 835, 836, 778, 773, 813, 814, 800, 818,
	819, 820, 745, 792, 793, 794, 816, 817, 774, 775,
	776, 777, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 623, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 821, 613,
	415, 0, 614, 615, 616, 617, 618, 788, 629, 491,
	492, 630, 602, 0, 738, 0, 382, 0, 506, 539,
	528, 612, 494, 0, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 322, 0, 0, 352, 543, 525, 535,
	526, 511, 512, 513, 520, 332, 514, 515, 516, 486,
	517, 487, 518, 519, 779, 542, 493, 411, 366, 560,
	559, 0, 0, 846, 854, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 733, 0, 0, 769,
	823, 822, 756, 766, 0, 0, 295, 215, 488, 608,
	490, 489, 757, 0, 758, 762, 765, 761, 759, 760,
	0, 838, 0, 0, 0, 0, 0, 0, 725, 737,
	0, 742, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 734, 735, 1520, 0, 0,
	0, 789, 0, 736, 0, 0, 784, 763, 767, 0,
	0, 0, 0, 285, 417, 434, 296, 407, 447, 301,
	414, 291, 381, 404, 0, 0, 287, 432, 413, 363,
	342, 343, 286, 0, 399, 320, 334, 317, 379, 764,
	787, 791, 316, 860, 785, 442, 289, 0, 441, 378,
	428, 433, 364, 358, 288, 430, 362, 357, 346, 324,
	861, 347, 348, 338, 390, 356, 391, 339, 368, 367,
	369, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 782, 0, 605, 0, 444, 0, 0, 844, 0,
	0, 0, 416, 0, 0, 349, 0, 0, 0, 786,
	0, 402, 384, 857, 0, 0, 400, 354, 429, 392,
	435, 418, 443, 396, 393, 280, 419, 319, 365, 292,
	294, 314, 321, 323, 325, 326, 374, 375, 387, 406,
	420, 421, 422, 318, 302, 401, 303, 336, 304, 281,
	310, 308, 311, 408, 312, 283, 388, 426, 0, 331,
	397, 361, 284, 360, 389, 425, 424, 293, 451, 457,
	458, 547, 0, 463, 633, 634, 635, 472, 477, 478,
	479, 481, 482, 483, 484, 548, 565, 532, 502, 465,
	556, 499, 503, 504, 568, 0, 0, 0, 456, 350,
	351, 0, 329, 277, 278, 628, 842, 380, 570, 603,
	604, 495, 0, 856, 837, 839, 840, 843, 847, 848,
	849, 850, 851, 853, 855, 859, 627, 0, 549, 564,
	631, 563, 624, 386, 0, 405, 561, 508, 0, 553,
	527, 0, 554, 523, 558, 0, 497, 0, 412, 437,
	449, 466, 469, 498, 583, 584, 585, 282, 468, 587,
	588, 589, 590, 591, 592, 593, 586, 858, 530, 507,
	533, 448, 510, 509, 0, 0, 544, 790, 545, 546,
	370, 371, 372, 373, 845, 571, 300, 467, 395, 0,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	537, 534, 636, 0, 594, 595, 0, 0, 461, 462,
	328, 335, 480, 337, 299, 385, 330, 446, 344, 0,
	473, 538, 474, 597, 600, 598, 599, 377, 340, 341,
	409, 345, 355, 398, 445, 383, 403, 297, 436, 410,
	359, 524, 551, 867, 841, 866, 868, 869, 865, 870,
	871, 852, 746, 0, 797, 863, 862, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 579,
	578, 577, 576, 575, 574, 573, 572, 0, 0, 521,
	423, 309, 271, 305, 306, 313, 625, 622, 427, 626,
	0, 279, 501, 353, 0, 394, 327, 566, 567, 0,
	0, 830, 804, 805, 806, 743, 807, 801, 802, 744,
	803, 831, 795, 827, 828, 771, 798, 808, 826, 809,
	829, 832, 833, 872, 873, 815, 799, 243, 874, 812,
	834, 825, 824, 810, 796, 835, 836, 778, 773, 813,
	814, 800, 818, 819, 820, 745, 792, 793, 794, 816,
	817, 774, 775, 776, 777, 0, 0, 0, 452, 453,
	454, 476, 0, 438, 500, 623, 0, 0, 0, 0,
	0, 0, 0, 550, 562, 596, 0, 606, 607, 609,
	611, 821, 613, 415, 0, 614, 615, 616, 617, 618,
	0, 629, 491, 492, 630, 602, 788, 738, 0, 2177,
	0, 0, 0, 0, 0, 382, 0, 506, 539, 528,
	612, 494, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 322, 0, 0, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 779, 542, 493, 411, 366, 560, 559,
	0, 0, 846, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 733, 0, 0, 769, 823,
	822, 756, 766, 0, 0, 295, 215, 488, 608, 490,
	489, 757, 0, 758, 762, 765, 761, 759, 760, 0,
	838, 0, 0, 0, 0, 0, 0, 725, 737, 0,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 734, 735, 0, 0, 0, 0,
	789, 0, 736, 0, 0, 784, 763, 767, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 764, 787,
	791, 316, 860, 785, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 861,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	782, 0, 605, 0, 444, 0, 0, 844, 0, 0,
	0, 416, 0, 0, 349, 0, 0, 0, 786, 0,
	402, 384, 857, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 0, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 633, 634, 635, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 628, 842, 380, 570, 603, 604,
	495, 0, 856, 837, 839, 840, 843, 847, 848, 849,
	850, 851, 853, 855, 859, 627, 0, 549, 564, 631,
	563, 624, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 858, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 790, 545, 546, 370,
	371, 372, 373, 845, 571, 300, 467, 395, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 636, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 867, 841, 866, 868, 869, 865, 870, 871,
	852, 746, 0, 797, 863, 862, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 625, 622, 427, 626, 0,
	279, 501, 353, 0, 394, 327, 566, 567, 0, 0,
	830, 804, 805, 806, 743, 807, 801, 802, 744, 803,
	831, 795, 827, 828, 771, 798, 808, 826, 809, 829,
	832, 833, 872, 873, 815, 799, 243, 874, 812, 834,
	825, 824, 810, 796, 835, 836, 778, 773, 813, 814,
	800, 818, 819, 820, 745, 792, 793, 794, 816, 817,
	774, 775, 776, 777, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 623, 0, 0, 0, 0, 0,
	0, 0, 550, 562, 596, 0, 606, 607, 609, 611,
	821, 613, 415, 0, 614, 615, 616, 617, 618, 788,
	629, 491, 492, 630, 602, 0, 738, 0, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 741, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 779, 542, 493, 411,
	366, 560, 559, 0, 0, 846, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 733, 0,
	0, 769, 823, 822, 756, 766, 0, 0, 295, 215,
	488, 608, 490, 489, 757, 0, 758, 762, 765, 761,
	759, 760, 0, 838, 0, 0, 0, 0, 0, 0,
	725, 737, 0, 742, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 734, 735, 1793,
	0, 0, 0, 789, 0, 736, 0, 0, 784, 763,
	767, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 764, 787, 791, 316, 860, 785, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 861, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 782, 0, 605, 0, 444, 0, 0,
	844, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 786, 0, 402, 384, 857, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 633, 634, 635, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 628, 842, 380,
	570, 603, 604, 495, 0, 856, 837, 839, 840, 843,
	847, 848, 849, 850, 851, 853, 855, 859, 627, 0,
	549, 564, 631, 563, 624, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 858,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 790,
	545, 546, 370, 371, 372, 373, 845, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 636, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 867, 841, 866, 868, 869,
	865, 870, 871, 852, 746, 0, 797, 863, 862, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 625, 622,
	427, 626, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 830, 804, 805, 806, 743, 807, 801,
	802, 744, 803, 831, 795, 827, 828, 771, 798, 808,
	826, 809, 829, 832, 833, 872, 873, 815, 799, 243,
	874, 812, 834, 825, 824, 810, 796, 835, 836, 778,
	773, 813, 814, 800, 818, 819, 820, 745, 792, 793,
	794, 816, 817, 774, 775, 776, 777, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 623, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 821, 613, 415, 0, 614, 615, 616,
	617, 618, 788, 629, 491, 492, 630, 602, 0, 738,
	0, 382, 0, 506, 539, 528, 612, 494, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 322, 0,
	0, 352, 543, 525, 535, 526, 511, 512, 513, 520,
	332, 514, 515, 516, 486, 517, 487, 518, 519, 779,
	542, 493, 411, 366, 560, 559, 0, 0, 846, 854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 769, 823, 822, 756, 766, 0,
	0, 295, 215, 488, 608, 490, 489, 757, 0, 758,
	762, 765, 761, 759, 760, 0, 838, 0, 0, 0,
	0, 0, 0, 725, 737, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	734, 735, 0, 0, 0, 0, 789, 0, 736, 0,
	0, 784, 763, 767, 0, 0, 0, 0, 285, 417,
	434, 296, 407, 447, 301, 414, 291, 381, 404, 0,
	0, 287, 432, 413, 363, 342, 343, 286, 0, 399,
	320, 334, 317, 379, 764, 787, 791, 316, 860, 785,
	442, 289, 0, 441, 378, 428, 433, 364, 358, 288,
	430, 362, 357, 346, 324, 861, 347, 348, 338, 390,
	356, 391, 339, 368, 367, 369, 0, 0, 0, 0,
	0, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 601, 782, 0, 605, 0,
	444, 0, 0, 844, 0, 0, 0, 416, 0, 0,
	349, 0, 0, 0, 786, 0, 402, 384, 857, 0,
	0, 400, 354, 429, 392, 435, 418, 443, 396, 393,
	280, 419, 319, 365, 292, 294, 314, 321, 323, 325,
	326, 374, 375, 387, 406, 420, 421, 422, 318, 302,
	401, 303, 336, 304, 281, 310, 308, 311, 408, 312,
	283, 388, 426, 0, 331, 397, 361, 284, 360, 389,
	425, 424, 293, 451, 457, 458, 547, 0, 463, 633,
	634, 635, 472, 477, 478, 479, 481, 482, 483, 484,
	548, 565, 532, 502, 465, 556, 499, 503, 504, 568,
	0, 0, 0, 456, 350, 351, 0, 329, 277, 278,
	628, 842, 380, 570, 603, 604, 495, 0, 856, 837,
	839, 840, 843, 847, 848, 849, 850, 851, 853, 855,
	859, 627, 0, 549, 564, 631, 563, 624, 386, 0,
	405, 561, 508, 0, 553, 527, 0, 554, 523, 558,
	0, 497, 0, 412, 437, 449, 466, 469, 498, 583,
	584, 585, 282, 468, 587, 588, 589, 590, 591, 592,
	593, 586, 858, 530, 507, 533, 448, 510, 509, 0,
	0, 544, 790, 545, 546, 370, 371, 372, 373, 845,
	571, 300, 467, 395, 0, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 537, 534, 636, 0, 594,
	595, 0, 0, 461, 462, 328, 335, 480, 337, 299,
	385, 330, 446, 344, 0, 473, 538, 474, 597, 600,
	598, 599, 377, 340, 341, 409, 345, 355, 398, 445,
	383, 403, 297, 436, 410, 359, 524, 551, 867, 841,
	866, 868, 869, 865, 870, 871, 852, 746, 0, 797,
	863, 862, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 579, 578, 577, 576, 575, 574,
	573, 572, 0, 0, 521, 423, 309, 271, 305, 306,
	313, 625, 622, 427, 626, 0, 279, 501, 353, 0,
	394, 327, 566, 567, 0, 0, 830, 804, 805, 806,
	743, 807, 801, 802, 744, 803, 831, 795, 827, 828,
	771, 798, 808, 826, 809, 829, 832, 833, 872, 873,
	815, 799, 243, 874, 812, 834, 825, 824, 810, 796,
	835, 836, 778, 773, 813, 814, 800, 818, 819, 820,
	745, 792, 793, 794, 816, 817, 774, 775, 776, 777,
	0, 0, 0, 452, 453, 454, 476, 0, 438, 500,
	623, 0, 0, 0, 0, 0, 0, 0, 550, 562,
	596, 0, 606, 607, 609, 611, 821, 613, 415, 0,
	614, 615, 616, 617, 618, 788, 629, 491, 492, 630,
	602, 0, 738, 0, 382, 0, 506, 539, 528, 612,
	494, 0, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 322, 0, 0, 352, 543, 525, 535, 526, 511,
	512, 513, 520, 332, 514, 515, 516, 486, 517, 487,
	518, 519, 779, 542, 493, 411, 366, 560, 559, 0,
	0, 846, 854, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 733, 0, 0, 769, 823, 822,
	756, 766, 0, 0, 295, 215, 488, 608, 490, 489,
	2633, 0, 2634, 762, 765, 761, 759, 760, 0, 838,
	0, 0, 0, 0, 0, 0, 725, 737, 0, 742,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 734, 735, 0, 0, 0, 0, 789,
	0, 736, 0, 0, 784, 763, 767, 0, 0, 0,
	0, 285, 417, 434, 296, 407, 447, 301, 414, 291,
	381, 404, 0, 0, 287, 432, 413, 363, 342, 343,
	286, 0, 399, 320, 334, 317, 379, 764, 787, 791,
	316, 860, 785, 442, 289, 0, 441, 378, 428, 433,
	364, 358, 288, 430, 362, 357, 346, 324, 861, 347,
	348, 338, 390, 356, 391, 339, 368, 367, 369, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 782,
	0, 605, 0, 444, 0, 0, 844, 0, 0, 0,
	416, 0, 0, 349, 0, 0, 0, 786, 0, 402,
	384, 857, 0, 0, 400, 354, 429, 392, 435, 418,
	443, 396, 393, 280, 419, 319, 365, 292, 294, 314,
	321, 323, 325, 326, 374, 375, 387, 406, 420, 421,
	422, 318, 302, 401, 303, 336, 304, 281, 310, 308,
	311, 408, 312, 283, 388, 426, 0, 331, 397, 361,
	284, 360, 389, 425, 424, 293, 451, 457, 458, 547,
	0, 463, 633, 634, 635, 472, 477, 478, 479, 481,
	482, 483, 484, 548, 565, 532, 502, 465, 556, 499,
	503, 504, 568, 0, 0, 0, 456, 350, 351, 0,
	329, 277, 278, 628, 842, 380, 570, 603, 604, 495,
	0, 856, 837, 839, 840, 843, 847, 848, 849, 850,
	851, 853, 855, 859, 627, 0, 549, 564, 631, 563,
	624, 386, 0, 405, 561, 508, 0, 553, 527, 0,
	554, 523, 558, 0, 497, 0, 412, 437, 449, 466,
	469, 498, 583, 584, 585, 282, 468, 587, 588, 589,
	590, 591, 592, 593, 586, 858, 530, 507, 533, 448,
	510, 509, 0, 0, 544, 790, 545, 546, 370, 371,
	372, 373, 845, 571, 300, 467, 395, 0, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 536, 537, 534,
	636, 0, 594, 595, 0, 0, 461, 462, 328, 335,
	480, 337, 299, 385, 330, 446, 344, 0, 473, 538,
	474, 597, 600, 598, 599, 377, 340, 341, 409, 345,
	355, 398, 445, 383, 403, 297, 436, 410, 359, 524,
	551, 867, 841, 866, 868, 869, 865, 870, 871, 852,
	746, 0, 797, 863, 862, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 578, 577,
	576, 575, 574, 573, 572, 0, 0, 521, 423, 309,
	271, 305, 306, 313, 625, 622, 427, 626, 0, 279,
	501, 353, 0, 394, 327, 566, 567, 0, 0, 830,
	804, 805, 806, 743, 807, 801, 802, 744, 803, 831,
	795, 827, 828, 771, 798, 808, 826, 809, 829, 832,
	833, 872, 873, 815, 799, 243, 874, 812, 834, 825,
	824, 810, 796, 835, 836, 778, 773, 813, 814, 800,
	818, 819, 820, 745, 792, 793, 794, 816, 817, 774,
	775, 776, 777, 0, 0, 0, 452, 453, 454, 476,
	0, 438, 500, 623, 0, 0, 0, 0, 0, 0,
	0, 550, 562, 596, 0, 606, 607, 609, 611, 821,
	613, 415, 0, 614, 615, 616, 617, 618, 788, 629,
	491, 492, 630, 602, 0, 738, 0, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 1663, 0, 0, 0,
	741, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 779, 542, 493, 411, 366,
	560, 559, 0, 0, 846, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 0, 0,
	769, 823, 822, 756, 766, 0, 0, 295, 215, 488,
	608, 490, 489, 757, 0, 758, 762, 765, 761, 759,
	760, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 742, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 735, 0, 0,
	0, 0, 789, 0, 736, 0, 0, 784, 763, 767,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	764, 787, 791, 316, 860, 785, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 861, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 782, 0, 605, 0, 444, 0, 0, 844,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	786, 0, 402, 384, 857, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	1664, 1665, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 842, 380, 570,
	603, 604, 495, 0, 856, 837, 839, 840, 843, 847,
	848, 849, 850, 851, 853, 855, 859, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 858, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 790, 545,
	546, 370, 371, 372, 373, 845, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 867, 841, 866, 868, 869, 865,
	870, 871, 852, 746, 0, 797, 863, 862, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 830, 804, 805, 806, 743, 807, 801, 802,
	744, 803, 831, 795, 827, 828, 771, 798, 808, 826,
	809, 829, 832, 833, 872, 873, 815, 799, 243, 874,
	812, 834, 825, 824, 810, 796, 835, 836, 778, 773,
	813, 814, 800, 818, 819, 820, 745, 792, 793, 794,
	816, 817, 774, 775, 776, 777, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 821, 613, 415, 0, 614, 615, 616, 617,
	618, 788, 629, 491, 492, 630, 602, 0, 738, 0,
	382, 0, 506, 539, 528, 612, 494, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 322, 0, 0,
	352, 543, 525, 535, 526, 511, 512, 513, 520, 332,
	514, 515, 516, 486, 517, 487, 518, 519, 779, 542,
	493, 411, 366, 560, 559, 0, 0, 846, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	733, 0, 0, 769, 823, 822, 756, 766, 0, 0,
	295, 215, 488, 608, 490, 489, 757, 0, 758, 762,
	765, 761, 759, 760, 0, 838, 0, 0, 0, 0,
	0, 0, 0, 737, 0, 742, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 734,
	735, 0, 0, 0, 0, 789, 0, 736, 0, 0,
	784, 763, 767, 0, 0, 0, 0, 285, 417, 434,
	296, 407, 447, 301, 414, 291, 381, 404, 0, 0,
	287, 432, 413, 363, 342, 343, 286, 0, 399, 320,
	334, 317, 379, 764, 787, 791, 316, 860, 785, 442,
	289, 0, 441, 378, 428, 433, 364, 358, 288, 430,
	362, 357, 346, 324, 861, 347, 348, 338, 390, 356,
	391, 339, 368, 367, 369, 0, 0, 0, 0, 0,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 601, 782, 0, 605, 0, 444,
	0, 0, 844, 0, 0, 0, 416, 0, 0, 349,
	0, 0, 0, 786, 0, 402, 384, 857, 0, 0,
	400, 354, 429, 392, 435, 418, 443, 396, 393, 280,
	419, 319, 365, 292, 294, 314, 321, 323, 325, 326,
	374, 375, 387, 406, 420, 421, 422, 318, 302, 401,
	303, 336, 304, 281, 310, 308, 311, 408, 312, 283,
	388, 426, 0, 331, 397, 361, 284, 360, 389, 425,
	424, 293, 451, 457, 458, 547, 0, 463, 633, 634,
	635, 472, 477, 478, 479, 481, 482, 483, 484, 548,
	565, 532, 502, 465, 556, 499, 503, 504, 568, 0,
	0, 0, 456, 350, 351, 0, 329, 277, 278, 628,
	842, 380, 570, 603, 604, 495, 0, 856, 837, 839,
	840, 843, 847, 848, 849, 850, 851, 853, 855, 859,
	627, 0, 549, 564, 631, 563, 624, 386, 0, 405,
	561, 508, 0, 553, 527, 0, 554, 523, 558, 0,
	497, 0, 412, 437, 449, 466, 469, 498, 583, 584,
	585, 282, 468, 587, 588, 589, 590, 591, 592, 593,
	586, 858, 530, 507, 533, 448, 510, 509, 0, 0,
	544, 790, 545, 546, 370, 371, 372, 373, 845, 571,
	300, 467, 395, 0, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 537, 534, 636, 0, 594, 595,
	0, 0, 461, 462, 328, 335, 480, 337, 299, 385,
	330, 446, 344, 0, 473, 538, 474, 597, 600, 598,
	599, 377, 340, 341, 409, 345, 355, 398, 445, 383,
	403, 297, 436, 410, 359, 524, 551, 867, 841, 866,
	868, 869, 865, 870, 871, 852, 746, 0, 797, 863,
	862, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 578, 577, 576, 575, 574, 573,
	572, 0, 0, 521, 423, 309, 271, 305, 306, 313,
	625, 622, 427, 626, 0, 279, 501, 353, 0, 394,
	327, 566, 567, 0, 0, 830, 804, 805, 806, 743,
	807, 801, 802, 744, 803, 831, 795, 827, 828, 771,
	798, 808, 826, 809, 829, 832, 833, 872, 873, 815,
	799, 243, 874, 812, 834, 825, 824, 810, 796, 835,
	836, 778, 773, 813, 814, 800, 818, 819, 820, 745,
	792, 793, 794, 816, 817, 774, 775, 776, 777, 0,
	0, 0, 452, 453, 454, 476, 0, 438, 500, 623,
	0, 0, 0, 0, 0, 0, 0, 550, 562, 596,
	0, 606, 607, 609, 611, 821, 613, 415, 0, 614,
	615, 616, 617, 618, 788, 629, 491, 492, 630, 602,
	0, 738, 0, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 779, 542, 493, 411, 366, 560, 559, 0, 0,
	846, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 769, 823, 822, 756,
	766, 0, 0, 295, 215, 488, 608, 490, 489, 757,
	0, 758, 762, 765, 761, 759, 760, 0, 838, 0,
	0, 0, 0, 0, 0, 725, 737, 0, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 735, 0, 0, 0, 0, 789, 0,
	736, 0, 0, 784, 763, 767, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 764, 787, 791, 316,
	860, 785, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 861, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 782, 0,
	605, 0, 444, 0, 0, 844, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 786, 0, 402, 384,
	857, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 633, 634, 635, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 628, 842, 380, 570, 603, 604, 495, 0,
	856, 837, 839, 840, 843, 847, 848, 849, 850, 851,
	853, 855, 859, 627, 0, 549, 564, 631, 563, 624,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 858, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 790, 545, 546, 370, 371, 372,
	373, 845, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 636,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	867, 841, 866, 868, 869, 865, 870, 871, 852, 746,
	0, 797, 863, 862, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 625, 622, 427, 626, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 830, 804,
	805, 806, 743, 807, 801, 802, 744, 803, 831, 795,
	827, 828, 771, 798, 808, 826, 809, 829, 832, 833,
	872, 873, 815, 799, 243, 874, 812, 834, 825, 824,
	810, 796, 835, 836, 778, 773, 813, 814, 800, 818,
	819, 820, 745, 792, 793, 794, 816, 817, 774, 775,
	776, 777, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 623, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 821, 613,
	415, 0, 614, 615, 616, 617, 618, 0, 629, 491,
	492, 630, 602, 0, 738, 192, 60, 183, 155, 0,
	0, 0, 0, 0, 0, 382, 0, 506, 539, 528,
	612, 494, 0, 184, 0, 0, 0, 0, 0, 0,
	176, 0, 322, 0, 185, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 129, 542, 493, 411, 366, 560, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 295, 215, 488, 608, 490,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 0, 431,
	459, 316, 450, 0, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 475,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 154, 182, 190, 0, 115, 0, 601,
	0, 0, 605, 0, 444, 0, 0, 207, 0, 0,
	0, 416, 0, 0, 349, 181, 175, 174, 460, 0,
	402, 384, 219, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 0, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 580, 581, 582, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 439, 315, 380, 570, 603, 604,
	495, 0, 557, 496, 505, 307, 529, 541, 540, 376,
	455, 210, 552, 555, 485, 220, 0, 549, 564, 522,
	563, 221, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 440, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 464, 545, 546, 370,
	371, 372, 373, 333, 571, 300, 467, 395, 127, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 218, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 225, 290, 427, 226, 0,
	279, 501, 353, 156, 394, 327, 566, 567, 57, 0,
	227, 228, 229, 230, 231, 232, 233, 234, 272, 235,
	236, 237, 238, 239, 240, 241, 244, 245, 246, 247,
	248, 249, 250, 251, 569, 242, 243, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 0, 0, 0, 273, 274, 275, 276, 0, 0,
	267, 268, 269, 270, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 222, 44, 208, 211, 213, 212,
	0, 58, 550, 562, 596, 5, 606, 607, 609, 611,
	610, 613, 415, 0, 614, 615, 616, 617, 618, 132,
	223, 491, 492, 224, 602, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 382, 0, 506, 539, 528,
	612, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 129, 542, 493, 411, 366, 560, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 295, 215, 488, 608, 490,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 2324, 2327, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 0, 431,
	459, 316, 450, 0, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 475,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	0, 0, 605, 2328, 444, 0, 0, 0, 2323, 0,
	2322, 416, 2320, 2325, 349, 0, 0, 0, 460, 0,
	402, 384, 632, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 2326, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 633, 634, 635, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 628, 315, 380, 570, 603, 604,
	495, 0, 557, 496, 505, 307, 529, 541, 540, 376,
	455, 0, 552, 555, 485, 627, 0, 549, 564, 631,
	563, 624, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 440, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 464, 545, 546, 370,
	371, 372, 373, 333, 571, 300, 467, 395, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 636, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 625, 622, 427, 626, 0,
	279, 501, 353, 156, 394, 327, 566, 567, 0, 0,
	227, 228, 229, 230, 231, 232, 233, 234, 272, 235,
	236, 237, 238, 239, 240, 241, 244, 245, 246, 247,
	248, 249, 250, 251, 569, 242, 243, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 0, 0, 0, 273, 274, 275, 276, 0, 0,
	267, 268, 269, 270, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 623, 0, 0, 0, 0, 0,
	0, 0, 550, 562, 596, 0, 606, 607, 609, 611,
	610, 613, 415, 0, 614, 615, 616, 617, 618, 0,
	629, 491, 492, 630, 602, 382, 0, 506, 539, 528,
	612, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 0, 542, 493, 411, 366, 560, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1279, 0, 0, 214, 0,
	0, 756, 766, 0, 0, 295, 215, 488, 608, 490,
	489, 757, 0, 758, 762, 765, 761, 759, 760, 0,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 763, 0, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 764, 431,
	459, 316, 450, 0, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 475,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	0, 0, 605, 0, 444, 0, 0, 0, 0, 0,
	0, 416, 0, 0, 349, 0, 0, 0, 460, 0,
	402, 384, 632, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 0, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 633, 634, 635, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 628, 315, 380, 570, 603, 604,
	495, 0, 557, 496, 505, 307, 529, 541, 540, 376,
	455, 0, 552, 555, 485, 627, 0, 549, 564, 631,
	563, 624, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 440, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 464, 545, 546, 370,
	371, 372, 373, 333, 571, 300, 467, 395, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 636, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 625, 622, 427, 626, 0,
	279, 501, 353, 0, 394, 327, 566, 567, 0, 0,
	227, 228, 229, 230, 231, 232, 233, 234, 272, 235,
	236, 237, 238, 239, 240, 241, 244, 245, 246, 247,
	248, 249, 250, 251, 569, 242, 243, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 0, 0, 0, 273, 274, 275, 276, 0, 0,
	267, 268, 269, 270, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 623, 0, 0, 0, 0, 0,
	0, 0, 550, 562, 596, 0, 606, 607, 609, 611,
	610, 613, 415, 0, 614, 615, 616, 617, 618, 0,
	629, 491, 492, 630, 602, 192, 60, 183, 155, 0,
	0, 0, 0, 0, 0, 382, 655, 506, 539, 528,
	612, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 0, 542, 493, 411, 366, 560, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 661,
	0, 0, 0, 0, 0, 660, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 295, 215, 488, 608, 490,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 0, 431,
	459, 316, 450, 0, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 475,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 659, 0, 601,
	0, 0, 605, 0, 444, 0, 0, 0, 0, 0,
	0, 416, 0, 0, 349, 0, 0, 0, 460, 0,
	402, 384, 632, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 0, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 633, 634, 635, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 628, 315, 380, 570, 603, 604,
	495, 0, 557, 496, 505, 307, 529, 541, 540, 376,
	455, 0, 552, 555, 485, 627, 0, 549, 564, 631,
	563, 624, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 440, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 464, 545, 546, 370,
	371, 372, 373, 656, 658, 300, 467, 395, 669, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 636, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 625, 622, 427, 626, 0,
	279, 501, 353, 156, 394, 327, 566, 567, 0, 0,
	227, 228, 229, 230, 231, 232, 233, 234, 272, 235,
	236, 237, 238, 239, 240, 241, 244, 245, 246, 247,
	248, 249, 250, 251, 569, 242, 243, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 0, 0, 0, 273, 274, 275, 276, 0, 0,
	267, 268, 269, 270, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 623, 0, 0, 0, 0, 0,
	0, 0, 550, 562, 596, 0, 606, 607, 609, 611,
	610, 613, 415, 0, 614, 615, 616, 617, 618, 0,
	629, 491, 492, 630, 602, 382, 0, 506, 539, 528,
	612, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 0, 542, 493, 411, 366, 560, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 295, 215, 488, 608, 490,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 2324, 2327, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 0, 431,
	459, 316, 450, 0, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 475,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	0, 0, 605, 2328, 444, 0, 0, 0, 2323, 0,
	2322, 416, 2320, 2325, 349, 0, 0, 0, 460, 0,
	402, 384, 632, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 2326, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 633, 634, 635, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 628, 315, 380, 570, 603, 604,
	495, 0, 557, 496, 505, 307, 529, 541, 540, 376,
	455, 0, 552, 555, 485, 627, 0, 549, 564, 631,
	563, 624, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 440, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 464, 545, 546, 370,
	371, 372, 373, 333, 571, 300, 467, 395, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 636, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 625, 622, 427, 626, 0,
	279, 501, 353, 0, 394, 327, 566, 567, 0, 0,
	227, 228, 229, 230, 231, 232, 233, 234, 272, 235,
	236, 237, 238, 239, 240, 241, 244, 245, 246, 247,
	248, 249, 250, 251, 569, 242, 243, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 0, 0, 0, 273, 274, 275, 276, 0, 0,
	267, 268, 269, 270, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 623, 0, 0, 0, 0, 0,
	0, 0, 550, 562, 596, 0, 606, 607, 609, 611,
	610, 613, 415, 0, 614, 615, 616, 617, 618, 0,
	629, 491, 492, 630, 602, 382, 0, 506, 539, 528,
	612, 494, 0, 1092, 0, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 0, 542, 493, 411, 366, 560, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 295, 215, 488, 608, 490,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 2476, 2479, 2480, 2481, 2482,
	2483, 2484, 0, 2489, 2485, 2486, 2487, 2488, 0, 2471,
	2472, 2473, 2474, 1076, 2455, 2477, 0, 2456, 378, 2457,
	2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2468, 2469,
	2466, 2467, 2475, 390, 356, 391, 339, 368, 367, 369,
	1103, 1105, 1107, 1109, 1112, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	0, 0, 605, 0, 444, 0, 0, 0, 0, 0,
	0, 416, 0, 0, 349, 0, 0, 0, 2470, 0,
	402, 384, 632, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 0, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 633, 634, 635, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 628, 315, 380, 570, 603, 604,
	495, 0, 557, 496, 505, 307, 529, 541, 540, 376,
	455, 0, 552, 555, 485, 627, 0, 549, 564, 631,
	563, 624, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 440, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 464, 545, 546, 370,
	371, 372, 373, 333, 571, 300, 467, 395, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 636, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 625, 622, 427, 626, 0,
	279, 2478, 353, 0, 394, 327, 566, 567, 0, 0,
	227, 228, 229, 230, 231, 232, 233, 234, 272, 235,
	236, 237, 238, 239, 240, 241, 244, 245, 246, 247,
	248, 249, 250, 251, 569, 242, 243, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 0, 0, 0, 273, 274, 275, 276, 0, 0,
	267, 268, 269, 270, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 623, 0, 0, 0, 0, 0,
	0, 0, 550, 562, 596, 0, 606, 607, 609, 611,
	610, 613, 415, 0, 614, 615, 616, 617, 618, 0,
	629, 491, 492, 630, 602, 382, 0, 506, 539, 528,
	612, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 0, 542, 493, 411, 366, 560, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 295, 215, 488, 608, 490,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 2345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 0, 431,
	459, 316, 450, 0, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 475,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	0, 0, 605, 2344, 444, 0, 0, 0, 2350, 2347,
	2349, 416, 0, 2348, 349, 0, 0, 0, 460, 0,
	402, 384, 632, 0, 2342, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 0, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 633, 634, 635, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 628, 315, 380, 570, 603, 604,
	495, 0, 557, 496, 505, 307, 529, 541, 540, 376,
	455, 0, 552, 555, 485, 627, 0, 549, 564, 631,
	563, 624, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 440, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 464, 545, 546, 370,
	371, 372, 373, 333, 571, 300, 467, 395, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 636, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 625, 622, 427, 626, 0,
	279, 501, 353, 0, 394, 327, 566, 567, 0, 0,
	227, 228, 229, 230, 231, 232, 233, 234, 272, 235,
	236, 237, 238, 239, 240, 241, 244, 245, 246, 247,
	248, 249, 250, 251, 569, 242, 243, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 0, 0, 0, 273, 274, 275, 276, 0, 0,
	267, 268, 269, 270, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 623, 0, 0, 0, 0, 0,
	0, 0, 550, 562, 596, 0, 606, 607, 609, 611,
	610, 613, 415, 0, 614, 615, 616, 617, 618, 0,
	629, 491, 492, 630, 602, 382, 0, 506, 539, 528,
	612, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 0, 542, 493, 411, 366, 560, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 295, 215, 488, 608, 490,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 2345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 0, 431,
	459, 316, 450, 0, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 475,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	0, 0, 605, 2344, 444, 0, 0, 0, 2350, 2347,
	2349, 416, 0, 2348, 349, 0, 0, 0, 460, 0,
	402, 384, 632, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 0, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 633, 634, 635, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 628, 315, 380, 570, 603, 604,
	495, 0, 557, 496, 505, 307, 529, 541, 540, 376,
	455, 0, 552, 555, 485, 627, 0, 549, 564, 631,
	563, 624, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 440, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 464, 545, 546, 370,
	371, 372, 373, 333, 571, 300, 467, 395, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 636, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 625, 622, 427, 626, 0,
	279, 501, 353, 0, 394, 327, 566, 567, 0, 0,
	227, 228, 229, 230, 231, 232, 233, 234, 272, 235,
	236, 237, 238, 239, 240, 241, 244, 245, 246, 247,
	248, 249, 250, 251, 569, 242, 243, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 0, 0, 0, 273, 274, 275, 276, 0, 0,
	267, 268, 269, 270, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 623, 0, 0, 0, 0, 0,
	0, 0, 550, 562, 596, 0, 606, 607, 609, 611,
	610, 613, 415, 0, 614, 615, 616, 617, 618, 0,
	629, 491, 492, 630, 602, 382, 0, 506, 539, 528,
	612, 494, 0, 0, 0, 0, 0, 2047, 0, 0,
	0, 0, 322, 0, 0, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 0, 542, 493, 411, 366, 560, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 2048, 0, 0, 0, 295, 215, 488, 608, 490,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 1209, 1210, 1211, 1208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 0, 431,
	459, 316, 450, 0, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 475,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	0, 0, 605, 0, 444, 0, 0, 0, 0, 0,
	0, 416, 0, 0, 349, 0, 0, 0, 460, 0,
	402, 384, 632, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 0, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 633, 634, 635, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 628, 315, 380, 570, 603, 604,
	495, 0, 557, 496, 505, 307, 529, 541, 540, 376,
	455, 0, 552, 555, 485, 627, 0, 549, 564, 631,
	563, 624, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 440, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 464, 545, 546, 370,
	371, 372, 373, 333, 571, 300, 467, 395, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 636, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 625, 622, 427, 626, 0,
	279, 501, 353, 0, 394, 327, 566, 567, 0, 0,
	227, 228, 229, 230, 231, 232, 233, 234, 272, 235,
	236, 237, 238, 239, 240, 241, 244, 245, 246, 247,
	248, 249, 250, 251, 569, 242, 243, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 0, 0, 0, 273, 274, 275, 276, 0, 0,
	267, 268, 269, 270, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 623, 0, 0, 0, 0, 0,
	0, 0, 550, 562, 596, 0, 606, 607, 609, 611,
	610, 613, 415, 0, 614, 615, 616, 617, 618, 192,
	629, 491, 492, 630, 602, 0, 0, 0, 0, 382,
	0, 506, 539, 528, 612, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 322, 0, 0, 352,
	543, 525, 535, 526, 511, 512, 513, 520, 332, 514,
	515, 516, 486, 517, 487, 518, 519, 129, 542, 493,
	411, 366, 560, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	2097, 0, 214, 0, 0, 0, 0, 0, 0, 295,
	215, 488, 608, 490, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 417, 434, 296,
	407, 447, 301, 414, 291, 381, 404, 0, 0, 287,
	432, 413, 363, 342, 343, 286, 0, 399, 320, 334,
	317, 379, 0, 431, 459, 316, 450, 0, 442, 289,
	0, 441, 378, 428, 433, 364, 358, 288, 430, 362,
	357, 346, 324, 475, 347, 348, 338, 390, 356, 391,
	339, 368, 367, 369, 0, 0, 0, 0, 0, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 0, 0, 605, 0, 444, 0,
	0, 0, 0, 0, 0, 416, 0, 0, 349, 0,
	0, 0, 460, 0, 402, 384, 632, 0, 0, 400,
	354, 429, 392, 435, 418, 443, 396, 393, 280, 419,
	319, 365, 292, 294, 314, 321, 323, 325, 326, 374,
	375, 387, 406, 420, 421, 422, 318, 302, 401, 303,
	336, 304, 281, 310, 308, 311, 408, 312, 283, 388,
	426, 0, 331, 397, 361, 284, 360, 389, 425, 424,
	293, 451, 457, 458, 547, 0, 463, 633, 634, 635,
	472, 477, 478, 479, 481, 482, 483, 484, 548, 565,
	532, 502, 465, 556, 499, 503, 504, 568, 0, 0,
	0, 456, 350, 351, 0, 329, 277, 278, 628, 315,
	380, 570, 603, 604, 495, 0, 557, 496, 505, 307,
	529, 541, 540, 376, 455, 0, 552, 555, 485, 627,
	0, 549, 564, 631, 563, 624, 386, 0, 405, 561,
	508, 0, 553, 527, 0, 554, 523, 558, 0, 497,
	0, 412, 437, 449, 466, 469, 498, 583, 584, 585,
	282, 468, 587, 588, 589, 590, 591, 592, 593, 586,
	440, 530, 507, 533, 448, 510, 509, 0, 0, 544,
	464, 545, 546, 370, 371, 372, 373, 333, 571, 300,
	467, 395, 0, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 537, 534, 636, 0, 594, 595, 0,
	0, 461, 462, 328, 335, 480, 337, 299, 385, 330,
	446, 344, 0, 473, 538, 474, 597, 600, 598, 599,
	377, 340, 341, 409, 345, 355, 398, 445, 383, 403,
	297, 436, 410, 359, 524, 551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 578, 577, 576, 575, 574, 573, 572,
	0, 0, 521, 423, 309, 271, 305, 306, 313, 625,
	622, 427, 626, 0, 279, 501, 353, 156, 394, 327,
	566, 567, 0, 0, 227, 228, 229, 230, 231, 232,
	233, 234, 272, 235, 236, 237, 238, 239, 240, 241,
	244, 245, 246, 247, 248, 249, 250, 251, 569, 242,
	243, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 0, 0, 0, 273, 274,
	275, 276, 0, 0, 267, 268, 269, 270, 0, 0,
	0, 452, 453, 454, 476, 0, 438, 500, 623, 0,
	0, 0, 0, 0, 0, 0, 550, 562, 596, 0,
	606, 607, 609, 611, 610, 613, 415, 0, 614, 615,
	616, 617, 618, 192, 629, 491, 492, 630, 602, 0,
	0, 0, 0, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 129, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 2083, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	632, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 633, 634, 635, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 628, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 627, 0, 549, 564, 631, 563, 624,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 636,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 625, 622, 427, 626, 0, 279, 501,
	353, 156, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 623, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 614, 615, 616, 617, 618, 0, 629, 491,
	492, 630, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 1008, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 1015, 1016, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1019, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 1003, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 992, 442, 289, 991, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	632, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	1006, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 633, 634, 635, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 628, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 627, 0, 549, 564, 631, 563, 624,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 1007, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 1010, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 636,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 1017, 1004, 1013, 1005, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 1014, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 625, 622, 427, 626, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 623, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 614, 615, 616, 617, 618, 192, 629, 491,
	492, 630, 602, 0, 0, 0, 0, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 129, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1980, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 156, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 1015, 1016, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1019, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 992, 442, 289, 991, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 1017, 1999,
	1013, 2000, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 1014, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 2851, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 2854, 0, 0,
	2853, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 1486, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 1484, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 1480, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 1484, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3870, 0,
	214, 823, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 1484, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 1484, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1693, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 2419,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 2421, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 3053, 3055, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 2440, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 1484, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 643, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 642, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 823, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3849, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 3628, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	3758, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3474, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3643, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	3562, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 3086, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1980, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3207, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2952, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 1484, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 2421, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 2774, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 2537, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 2496, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 2279, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 1837, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 1966, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 1484, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 1871, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 1513,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 643, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 653, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 942, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 1464, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 1462, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 720, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 632, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 677, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 633, 634, 635, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 628, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 627, 0, 549,
	564, 631, 563, 624, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 678, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 636, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 625, 622, 427,
	626, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 623, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 614, 615, 616, 617,
	618, 0, 629, 491, 492, 630, 602, 699, 698, 705,
	695, 0, 0, 0, 0, 0, 0, 0, 0, 702,
	703, 0, 704, 708, 0, 0, 689, 0, 0, 0,
	699, 698, 705, 695, 0, 0, 713, 0, 0, 0,
	0, 0, 702, 703, 0, 704, 708, 0, 0, 689,
	0, 0, 0, 699, 698, 705, 695, 0, 0, 713,
	0, 0, 1953, 0, 0, 702, 703, 0, 704, 708,
	0, 0, 689, 0, 0, 0, 0, 0, 0, 0,
	717, 0, 713, 719, 0, 0, 0, 0, 718, 0,
	0, 0, 0, 0, 0, 0, 0, 1955, 0, 0,
	0, 0, 0, 717, 0, 0, 719, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3649,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1930,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1946, 0, 0,
	0, 0, 0, 0, 0, 690, 692, 691, 0, 0,
	0, 1953, 0, 0, 0, 697, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 701, 690, 692,
	691, 0, 0, 0, 716, 0, 0, 0, 697, 0,
	0, 694, 0, 0, 0, 684, 1955, 0, 0, 0,
	701, 690, 692, 691, 0, 0, 0, 716, 0, 0,
	0, 697, 0, 0, 694, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 0, 1934, 0, 0,
	716, 0, 0, 0, 0, 0, 0, 694, 1940, 0,
	0, 0, 0, 1953, 0, 0, 0, 0, 1930, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1928, 1962,
	0, 0, 1929, 1931, 1933, 0, 1935, 1936, 1937, 1941,
	1942, 1943, 1945, 1948, 1949, 1950, 0, 0, 1955, 0,
	0, 0, 0, 1938, 1947, 1939, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 696, 700, 706, 0, 707, 709, 0, 0, 710,
	711, 712, 3620, 0, 714, 715, 1946, 1954, 0, 0,
	0, 0, 0, 0, 696, 700, 706, 0, 707, 709,
	1930, 0, 710, 711, 712, 0, 0, 714, 715, 0,
	0, 0, 0, 0, 0, 0, 0, 696, 700, 706,
	0, 707, 709, 0, 0, 710, 711, 712, 0, 0,
	714, 715, 1951, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1927,
	0, 0, 0, 0, 0, 0, 1926, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1934, 0, 1946, 0,
	0, 0, 0, 0, 0, 0, 0, 1940, 0, 0,
	1944, 0, 0, 0, 0, 0, 0, 0, 0, 1932,
	0, 0, 0, 0, 0, 0, 0, 1928, 1962, 0,
	0, 1929, 1931, 1933, 0, 1935, 1936, 1937, 1941, 1942,
	1943, 1945, 1948, 1949, 1950, 0, 0, 0, 0, 0,
	0, 0, 1938, 1947, 1939, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	693, 0, 0, 0, 0, 0, 0, 0, 1934, 0,
	0, 0, 0, 0, 0, 0, 1954, 0, 0, 1940,
	0, 0, 0, 693, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1928,
	1962, 0, 0, 1929, 1931, 1933, 693, 1935, 1936, 1937,
	1941, 1942, 1943, 1945, 1948, 1949, 1950, 0, 0, 0,
	0, 1951, 0, 0, 1938, 1947, 1939, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1927, 0,
	0, 0, 0, 0, 0, 1926, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1944,
	0, 0, 0, 0, 0, 0, 0, 0, 1932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1951, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1927, 0, 0, 0, 0, 0, 0, 1926, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1944, 0, 0, 0, 0, 0, 0, 0, 0,
	1932,
}

var yyPact = [...]int{
	3862, -1000, -1000, -1000, -310, 13852, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 45504, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 402, 45504, -306,
	28144, 43644, -1000, -1000, 2666, -1000, 44264, 15732, 45504, 480,
	479, 45504, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 901, -1000, 47984, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 823, 48614, 47364, 10728, -226,
	-1000, 1563, -34, 2537, 433, -185, -186, 1065, 1074, 1229,
	1229, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 231, 932, 44884, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 356, 254, 932, 20700, 137, 130, 1563, 487, -105,
	244, -1000, 1166, 3927, 206, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10728, 10728, 13852, -373,
	13852, 10728, 45504, 45504, -1000, -1000, -1000, -1000, -306, 44264,
	823, 48614, 10728, 2537, 433, -185, -186, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-105, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 130,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4703,
	-1000, 1610, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2305, 3034, 1597,
	2536, 783, 43644, 45504, -1000, 155, 783, -1000, -1000, -1000,
	1563, 3425, -1000, 45504, 45504, 202, 1874, -1000, 490, 436,
	475, 316, 1572, -1000, -1000, -1000, -1000, -1000, -1000, 693,
	3407, -1000, 45504, 45504, 3076, 45504, -1000, 2299, 732, -1000,
	48637, 3254, 1387, 924, 3094, -1000, -1000, 3033, -1000, 329,
	276, 286, 457, 388, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 333, -1000, 3309, -1000, -1000, 321, -1000, -1000, 304,
	-1000, -1000, -1000, 123, -1000, -1000, -1000, -1000, -1000, -1000,
	-9, -1000, -1000, 1135, 2213, 10728, 2508, -1000, 4123, 1592,
	-1000, -1000, -1000, 6361, 12597, 12597, 12597, 12597, 45504, -1000,
	-1000, 2870, 10728, 3026, 3025, 3024, 3023, -1000, -1000, -1000,
	-1000, -1000, -1000, 1571, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2011, -1000, -1000, -1000, 13220, -1000, 3022,
	3021, 3015, 3008, 3006, 3004, 3002, 2999, 2992, 2990, 2988,
	2987, 2986, 2985, 2712, 15102, 2982, 2534, 2532, 2981, 2980,
	2979, 2531, 2975, 2974, 2973, 2712, 2712, 2970, 2969, 2968,
	2965, 2964, 2963, 2962, 2960, 2954, 2953, 2951, 2950, 2949,
	2948, 2946, 2936, 2931, 2930, 2927, 2925, 2923, 2922, 2920,
	2913, 2912, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1286, -1000, 2895, 3424, 2781,
	-1000, 3290, 3288, 3285, 3275, -261, 2890, 2223, -1000, -1000,
	121, 3405, 45504, 2529, -112, 2526, -119, -1000, -71, -1000,
	-1000, 1036, -1000, 1031, -1000, 814, 814, 814, 45504, 45504,
	197, 897, 814, 814, 814, 814, 814, 883, 814, 3324,
	899, 896, 892, 891, 814, -62, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1873, 1872, 3174, 1008, -1000, -1000, -1000,
	-1000, 1448, 45504, -1000, 2782, 2523, 1723, 1723, 3395, 3395,
	3320, 740, 736, 705, 1723, 572, -1000, 1861, 1861, 1861,
	1861, 1723, 501, 757, 3327, 3327, 129, 1861, 95, 1723,
	1723, 95, 1723, 1723, -1000, 1857, 201, -268, -1000, -1000,
	-1000, -1000, 1861, 1861, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3304, 3303, 823, 823, 45504, 823, 188, 45504, 823,
	823, 823, 831, 54, 46744, 46124, 2299, 730, 725, 1463,
	1804, -1000, 1752, 45504, 45504, 1752, 1752, 23804, 23184, -1000,
	45504, -1000, 3424, 2781, 2709, 1771, 2701, 2781, -120, 2521,
	823, 823, 823, 823, 823, 291, 823, 823, 823, 823,
	823, 45504, 45504, 43024, 823, 823, 823, 823, 8853, 8853,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13852,
	2113, 2089, 205, -8, -293, 282, -1000, -1000, 45504, 3227,
	287, -1000, -1000, -1000, 2723, -1000, 2766, 2766, 2766, 2766,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2766,
	2766, 2774, 2879, -1000, -1000, 2765, 2765, 2765, 2723, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2769, 2769, 2773, 2773, 2769, 45504,
	-129, -1000, -1000, 10728, 45504, 3238, 404, 2878, 783, -1000,
	-1000, 45504, 117, 448, 3424, 3237, 3327, 3379, -1000, -1000,
	1568, 2222, 2520, -1000, 316, -1000, 443, 316, 1684, -1000,
	1076, -1000, -1000, -1000, -1000, -1000, 45504, -9, 406, -1000,
	-1000, 2496, 2876, -1000, 617, 1386, 1504, -1000, 224, 48660,
	36204, 2299, 36204, 45504, -1000, -1000, -1000, -1000, -1000, -1000,
	122, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 313, -1000, 10728, 10728, 10728,
	10728, 10728, -1000, 888, 11974, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 12597, 12597, 12597, 12597, 12597, 12597, 12597, 12597,
	12597, 12597, 12597, 12597, 2840, 1757, 12597, 12597, 12597, 12597,
	25664, 1771, 3055, 1451, 296, 1592, 1592, 1592, 1592, 10728,
	-1000, 1867, 2213, 10728, 10728, 10728, 10728, 45504, -1000, -1000,
	4255, 10728, 10728, 4435, 10728, 3273, 10728, 10728, 10728, 2700,
	5106, 45504, 10728, -1000, 2699, 2696, -1000, -1000, 2009, 10728,
	-1000, -1000, 10728, -1000, -1000, 10728, 12597, 10728, -1000, 10728,
	10728, 10728, -1000, -1000, 3611, 3273, 3273, 3273, 1776, 10728,
	10728, 3273, 3273, 3273, 1754, 3273, 3273, 3273, 3273, 3273,
	3273, 3273, 3273, 3273, 3273, 2695, 2693, 2692, 10105, 3327,
	-226, -1000, 8230, 3237, 3327, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -264, 2875, 45504, 2510, 2507,
	-320, 1054, 431, 306, 2221, -291, 2215, 41, 1063, 1041,
	1044, -1000, 2506, 1888, 45504, 45504, 3269, -1000, 2874, 45504,
	814, 814, 814, -1000, 41164, 36204, 45504, 45504, 2299, 45504,
	45504, 45504, 814, 814, 814, 814, 45504, -1000, 3195, 36204,
	3178, 831, -1000, 45504, 1448, 3268, 45504, 306, 3395, 12597,
	12597, -1000, -1000, 10728, -1000, 42404, 1861, 1723, 1723, -1000,
	-1000, 45504, -1000, -1000, -1000, 1861, 45504, 1861, 1861, 3395,
	1861, -1000, -1000, -1000, 1723, 1723, -1000, -1000, 10728, -1000,
	-1000, 1861, 1861, -1000, -1000, 3395, 45504, 114, 3395, 3395,
	100, -1000, -1000, -1000, 1723, 45504, 45504, 814, 45504, -1000,
	45504, 45504, -1000, -1000, 45504, 45504, 4297, 45504, 41164, 41784,
	3300, -1000, 36204, 45504, 45504, 34344, -1000, 1404, -1000, 28,
	-1000, 35, 54, 1752, 54, 1752, -1000, 614, 609, 21944,
	561, 36204, 5729, -1000, -1000, 1752, 1752, 5729, 5729, 1606,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1441, -1000, 315,
	3327, -1000, -1000, -1000, -1000, -1000, 2214, 306, 45504, 41164,
	36204, 2299, 45504, 823, 45504, 45504, 45504, 45504, 45504, -1000,
	2871, 1565, -1000, 3252, 45504, 45504, 45504, 45504, 1269, -1000,
	-1000, 18832, 1561, 1269, -1000, 1923, -1000, 10728, 13852, -249,
	10728, 13852, 13852, 10728, 13852, -1000, 10728, 283, -1000, -1000,
	-1000, -1000, 2210, -1000, 2196, -1000, -1000, -1000, -1000, -1000,
	2505, 2505, -1000, 2186, -1000, -1000, -1000, -1000, 2184, -1000,
	-1000, 2182, -1000, -1000, -1000, -1000, -165, 2691, 1135, -1000,
	2503, 3093, -227, -1000, 20080, 45504, 45504, 404, -321, -1000,
	1868, 1866, 1860, -1000, -227, -1000, 19456, 45504, 3327, -1000,
	-232, 3237, 10728, 45504, -1000, 3319, -1000, -1000, 316, -1000,
	416, 422, -1000, -1000, -1000, -1000, -1000, -1000, 1545, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 387,
	-107, -108, 1438, -1000, 45504, -1000, -1000, 224, 36204, 38064,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 245, -1000, -1000,
	190, -1000, 879, 238, 1681, -1000, -1000, 193, 223, 209,
	931, 2213, -1000, 1903, 1903, 1899, -1000, 811, -1000, -1000,
	-1000, -1000, 2870, -1000, -1000, -1000, 1829, 1818, -1000, 1698,
	1698, 1612, 1612, 1612, 1612, 1612, 2459, 2459, -1000, -1000,
	-1000, 6361, 2840, 12597, 12597, 12597, 12597, 921, 921, 4142,
	4050, -1000, -1000, -1000, -1000, 10728, 196, 1900, -1000, 10728,
	2707, 1566, 2379, 1442, 1535, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2689, 2687, 2451, 3404, 2686,
	10728, -1000, -1000, 1672, 1670, 1667, -1000, 2187, 9482, -1000,
	-1000, -1000, 2685, 1526, 2684, -1000, -1000, -1000, 2682, 1659,
	1332, 2680, 2331, 2679, 2677, 2676, 2672, 1434, 10728, 10728,
	10728, 10728, 2670, 1656, 1636, 10728, 10728, 10728, 10728, 2668,
	10728, 10728, 10728, 10728, 10728, 10728, 10728, 10728, 10728, 10728,
	126, 126, 126, 1432, 1425, -1000, -1000, 1631, -1000, 2213,
	-1000, -1000, 3237, -1000, 2835, 2177, 1410, -1000, -1000, -303,
	2445, 45504, 1053, 45504, -1000, -1000, 2501, -1000, 2491, -1000,
	-1000, -1000, 1052, 1020, 1033, 2488, 3242, 3318, 862, 45504,
	1107, 2834, 45504, 45504, 45504, 274, -1000, -1000, 1371, -1000,
	238, 234, 489, 1192, 3072, 3403, -131, 45504, 45504, 45504,
	45504, 3267, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	40544, -1000, 2828, 1627, -1000, -1000, -1000, 1592, 1592, 2213,
	3069, 45504, 45504, 3395, 3395, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1861, 3395, 3395, 1400, 1723, 1861, -1000, -1000,
	1861, -329, -1000, 1861, -1000, -329, 1520, -329, 45504, -1000,
	-1000, -1000, 3266, 2782, 1406, -1000, -1000, -1000, 3367, 1235,
	782, 782, 1081, 750, 3364, 17592, -1000, 1734, 1280, 876,
	3215, 318, -1000, 1734, -157, 785, 1734, 1734, 1734, 1734,
	1734, 1734, 1734, 688, 680, 1734, 1734, 1734, 1734, 1734,
	1734, 1734, 1734, 1734, 1734, 1734, 1070, 1734, 1734, 1734,
	1734, 1734, -1000, 1734, 2821, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 701, 594, 269, 3299, 361, -1000, 355, 1371,
	3295, 386, 3211, 1218, -1000, -1000, -1000, -1000, 26284, 26284,
	21324, 26284, -1000, 203, 54, 71, -1000, -1000, 1404, 5729,
	1404, 5729, -1000, -1000, 870, -1000, -1000, 1192, -1000, 45504,
	45504, -1000, -1000, 2820, 1859, -1000, -1000, 15102, -1000, 5729,
	5729, -1000, -1000, 27524, 45504, -1000, -15, -1000, 11, 3237,
	-1000, -1000, 1341, -1000, -1000, 1402, 1192, 3090, 45504, 1341,
	1341, 1341, -1000, -1000, 16972, 45504, 45504, -1000, -1000, -1000,
	-1000, 3395, 8853, -1000, 34344, -1000, -1000, 39924, -1000, 39304,
	3395, 1779, -1000, 13852, 2076, 195, -1000, 273, -298, 200,
	1898, 199, 2213, -1000, -1000, 2664, 2662, 1625, -1000, 1624,
	2661, 1613, 1605, 2174, -1000, 67, -1000, 3231, 1197, -1000,
	2819, -1000, 1603, 3169, -1000, 1339, -1000, 1858, 1602, -1000,
	-1000, -1000, 10728, 38684, 10728, 1197, 1588, 3167, 1339, 3237,
	2486, -1000, 1338, -1000, 2180, 1517, 198, -1000, -1000, -1000,
	45504, 823, 2496, 1582, 38064, 1287, -1000, 869, 1500, 1494,
	-1000, 36204, 323, 36204, -1000, 36204, -1000, -1000, 380, -1000,
	45504, 3236, -1000, -1000, -1000, 2445, 1827, -328, 45504, -1000,
	-1000, -1000, -1000, -1000, 1576, -1000, 921, 921, 4142, 2801,
	-1000, 12597, -1000, 12597, 3048, -1000, 1760, -1000, 10728, 2037,
	3858, 10728, 3858, 895, 25044, 45504, -1000, -1000, 10728, 10728,
	-1000, 3035, -1000, -1000, -1000, -1000, 10728, 10728, 2146, -1000,
	45504, -1000, -1000, -1000, -1000, 25044, -1000, 12597, -1000, -1000,
	-1000, -1000, 10728, 1277, 1277, 3031, 1569, 126, 126, 126,
	3009, 3000, 2983, 1527, 126, 2966, 2928, 2914, 2910, 2904,
	2888, 2872, 2868, 2785, 2698, -1000, 2817, -1000, -1000, 1989,
	11351, 8230, -1000, -1000, 293, 1334, 2171, 2485, 131, -1000,
	1826, -1000, 45504, 1109, -1000, 2480, -1000, -1000, -1000, 1014,
	2479, -1000, 418, 2026, 141, 294, 2660, 1327, -1000, -1000,
	45504, -1000, -1000, -1000, 16972, 2782, 2812, 2782, 149, 1734,
	629, 36204, 708, -1000, 45504, 45504, 2079, 1813, 3085, 767,
	3221, 45504, 2810, 391, 2809, 2807, 3265, 468, 4811, 45504,
	1267, -1000, 1493, 3927, -1000, 45504, -1000, 2299, -1000, 1723,
	-1000, -1000, 3395, -1000, -1000, 10728, 10728, 3395, 1723, 1723,
	-1000, 1048, 1861, -1000, 45504, -1000, -1000, 468, 4811, 3263,
	4428, 641, 2502, -1000, 45504, -1000, -1000, -1000, 816, -1000,
	1013, 814, 45504, 1937, 1013, 1936, 2794, -1000, -1000, 45504,
	45504, 45504, 45504, -1000, -1000, 45504, -1000, 45504, 45504, 45504,
	45504, 45504, 37444, -1000, 45504, 45504, -1000, 45504, 1929, 45504,
	1924, 3203, -1000, 1734, 1734, 950, -1000, -1000, 610, -1000,
	37444, 2170, 2165, 2164, 2162, 2470, 2467, 2466, 1734, 1734,
	2157, 2464, 36824, 2457, 1171, 2155, 2154, 2124, 2153, 2456,
	1167, -1000, 2455, 2111, 2099, 2096, 45504, 2783, 2357, -1000,
	-1000, 2026, 149, 1734, 353, 45504, 1812, 1811, 629, 486,
	-47, 22564, 45504, 34344, 34344, 34344, 34344, -1000, 3153, 3149,
	3112, -1000, 3128, 3108, 3155, 45504, 34344, 2782, -1000, 36824,
	-1000, -1000, -1000, 1771, 1506, 2838, 1032, 10728, -1000, -1000,
	22, 27, -1000, -1000, -1000, 36204, 2452, 561, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3314, 45504, 45504, 833, 2659,
	1321, -1000, -1000, -1000, 4811, 2766, 2766, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2766, 2766, 2774, -1000,
	-1000, 2765, 2765, 2765, 2723, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2769, 2769, 2773, 2773, 2769,
	-1000, -1000, 3386, -1000, 1318, -1000, -1000, 1483, -1000, 3386,
	1884, -313, 13852, 1814, 1700, -1000, 10728, 13852, 10728, -250,
	339, -252, -1000, -1000, -1000, 2450, -1000, -1000, -1000, 2122,
	-1000, 2107, -1000, 166, 184, 1917, -227, 8230, 415, 45504,
	-227, 45504, 8230, -1000, 45504, 189, -350, -352, 185, 377,
	-227, 3314, 67, 10728, 3202, -1000, -1000, 45504, 2100, -1000,
	-1000, -1000, 3401, 36204, 2299, 1639, 35584, -1000, 317, -1000,
	243, 580, 2448, -1000, 890, 125, 2447, 2445, -1000, -1000,
	-1000, -1000, 12597, 1592, -1000, -1000, -1000, 2213, 10728, 2656,
	-1000, 1015, 1015, 2255, 2655, 2654, -1000, 2766, 2766, -1000,
	2723, 2765, 2723, 1015, 1015, 2651, -1000, 2136, 2619, -1000,
	2615, 2584, 10728, -1000, 2650, 3960, 1556, -66, -193, 126,
	126, -1000, -1000, -1000, -1000, 126, 126, 126, 126, -1000,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	784, -94, -274, -97, -275, -1000, 2637, 1312, -1000, -1000,
	-1000, -1000, -1000, 4435, 1306, 517, 517, 2445, 2440, 854,
	1047, 45504, -1000, -1000, 2439, -1000, -1000, 45504, 2436, -1000,
	593, 45504, 45504, 2435, 2418, 1107, 4811, 2634, 3261, 16352,
	3256, 2211, -1000, -1000, -1000, 26904, 579, -1000, -1000, -1000,
	718, 328, 2094, 563, -1000, 45504, 386, 386, 3188, 1809,
	2415, 45504, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3221,
	-1000, 1187, 428, 33104, 14482, -1000, 392, 45504, -1000, 16352,
	16352, 392, 439, 1801, -1000, 783, 1193, 136, 34344, 45504,
	-1000, 33724, 2633, -1000, 1192, 3395, -1000, 2213, 2213, -329,
	3395, 3395, 1806, 1723, -1000, 439, -1000, 392, -1000, 902,
	18212, 540, 508, 500, -1000, 665, -1000, -1000, 779, 3196,
	4811, -1000, 45504, -1000, 45504, -1000, 45504, 45504, 814, 10728,
	3196, 45504, 852, -1000, -1000, 1096, 464, 419, 768, 768,
	1305, -1000, 3235, -1000, -1000, 1295, -1000, -1000, -1000, -1000,
	45504, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25044, 25044,
	3294, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2411, 2410, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 45504, 1501, -1000, 1800, 2409,
	2211, 26904, 1794, 1752, 2407, 2406, 579, 2079, 1792, 2152,
	45504, -1000, 1216, 45504, 45504, -1000, 1283, -1000, 1790, 3075,
	3083, 3075, -1000, -1000, -1000, -1000, -1000, 3109, -1000, 2943,
	-1000, -1000, 1283, -1000, -1000, -1000, -1000, -1000, 1032, -1000,
	3313, 1013, 1013, 1013, 2630, -1000, -1000, -1000, 1287, 2628,
	-1000, -1000, -1000, 3415, -1000, -1000, -1000, -1000, -1000, -1000,
	16972, 3220, 3384, 3363, 34964, 3384, -1000, -313, 1736, -1000,
	1990, 192, 1810, 45504, -1000, -1000, -1000, 2623, 2622, -234,
	191, 3361, 3360, 1039, -1000, 2617, 1273, -227, -1000, -1000,
	1197, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -227, -1000,
	1197, -1000, 166, -1000, -1000, 3210, -1000, -1000, 2299, -1000,
	232, -1000, -1000, -1000, -1000, -1000, -1000, 218, -1000, 45504,
	-1000, 1271, 124, -1000, 2213, -1000, -1000, -1000, -1000, -1000,
	3858, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10728, -1000, -1000, -1000, 2561, -1000, -1000, 10728,
	2616, 2395, 2610, 2393, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3424, -1000, 3359, 1497, 2609, 2607, 1495, 2606, 2601, -1000,
	10728, 2600, 4435, 982, 2392, 982, -1000, -1000, 379, 45504,
	3400, 2378, -1000, -1000, 2026, 585, 643, -1000, -1000, -1000,
	-1000, 904, 392, 2587, 1253, -1000, -1000, -1000, -1000, 392,
	-1000, 2377, 214, -1000, -1000, -1000, -1000, 2375, 2365, 2075,
	-1000, -1000, 2057, 1502, 249, -1000, -1000, -1000, -1000, -1000,
	-1000, 2152, 2152, 2119, 1789, -331, -1000, 2763, -1000, 1734,
	1734, 1734, 45504, 1462, -1000, 1734, 1734, 2585, -1000, -1000,
	2572, 2559, -135, 790, 1753, 1733, -1000, 2070, 26284, 34344,
	33724, 1281, -1000, 1471, -1000, -1000, -1000, -1000, -1000, -1000,
	2364, 3395, 790, -1000, 527, 2068, 12597, 2760, 12597, 2756,
	548, 2751, 1457, -1000, 45504, -1000, -1000, 45504, 3619, 2750,
	-1000, 2748, 3059, 496, 2747, 2746, 45504, 2438, -1000, 3196,
	45504, 724, 3219, -1000, -1000, -1000, 407, -1000, -1000, 599,
	-1000, 45504, -1000, 45504, -1000, 1573, -1000, 25044, -1000, -1000,
	1447, -1000, 2357, 2354, -1000, -1000, 214, 2353, 5729, -1000,
	-1000, -1000, 3188, 2351, -1000, 2348, -1000, 45504, 1216, 1216,
	3424, 45504, 8230, -1000, -1000, 10728, 2743, -1000, 10728, -1000,
	-1000, -1000, -1000, -1000, 2742, 3191, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1764, -1000, 10728, 10728, -1000, -1000, 807,
	13852, -253, 336, -1000, -1000, -1000, -237, 2346, -1000, -1000,
	3357, 2345, 2262, 45504, -1000, -1000, 1197, 1197, -234, -1000,
	-1000, 1192, -1000, -1000, 1088, 692, -1000, 2558, 2338, -1000,
	2269, 126, -1000, 126, -1000, 261, 10728, -1000, 2344, -1000,
	-1000, -1000, 2342, -1000, -1000, 2263, -1000, 2546, -1000, 2340,
	-1000, -1000, 45504, 851, 1046, 2302, 2336, 2026, 2026, 45504,
	4811, -138, -135, 16352, -138, -1000, -1000, 371, -1000, -1000,
	370, -1000, -1000, 2056, 622, -1000, -1000, -1000, -1000, 1788,
	1946, 2297, 31244, 25044, 25664, 2335, -1000, -1000, 33104, 1764,
	1764, 4134, 313, 48927, -1000, 2733, 1094, 1721, -1000, 2060,
	-1000, 2054, -1000, 3395, 1281, 135, -1000, -1000, 1628, -362,
	-1000, 1094, 2502, 3353, -1000, 3562, 45504, 3046, 45504, 2732,
	1782, 12597, -1000, 779, 2932, -1000, -1000, 3619, -1000, -1000,
	1949, 12597, -1000, -1000, 2334, 25664, 878, 1768, 1758, 986,
	2731, -1000, 632, 3413, -1000, -1000, -1000, 948, 2730, -1000,
	1913, 1912, -1000, 45504, -1000, 31244, 31244, 752, 752, 31244,
	31244, 2725, 768, -1000, -1000, 12597, -1000, -1000, 1734, -1000,
	-1000, -1000, 1734, 1567, -1000, -1000, -1000, -1000, -1000, -1000,
	2119, -1000, -1000, -1000, 3327, -1000, -1000, 2213, 45504, 2213,
	32484, -1000, 3351, 3348, -1000, 2213, 1135, -1000, -313, 45504,
	45504, -239, 2035, -1000, 2329, 187, -1000, -1000, 1150, -237,
	-241, 100, 25044, 1756, -1000, -1000, -1000, -1000, -1000, 2543,
	-1000, 704, -1000, -1000, -1000, 1135, 2443, 2343, -1000, -1000,
	-1000, -1000, 378, 45504, 1118, -1000, 1755, -1000, 2326, 2324,
	584, -127, -1000, -1000, 417, -1000, -1000, -1000, 577, 2239,
	-1000, -1000, 367, -1000, -1000, 2322, -1000, -1000, 119, -1000,
	1737, 1446, -1000, 2723, 10728, -1000, -1000, -1000, -1000, -1000,
	-1000, 760, -1000, 392, 48845, -1000, 1280, -1000, 1088, 760,
	30004, 620, 319, -1000, 2034, -1000, -1000, 3424, -1000, -1000,
	603, -1000, 546, -1000, 1443, -1000, 1436, 31864, 2033, 2371,
	-1000, 48676, 882, -1000, -1000, 4142, -1000, -1000, -1000, -1000,
	-1000, -1000, 2321, 2319, -1000, -1000, -1000, -1000, -1000, 2029,
	2722, 45, 3293, 2312, -1000, -1000, 2719, 1435, 1426, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1395, 1393,
	31244, -1000, -1000, 4142, 2028, 25044, 1734, -1000, -1000, 1367,
	1347, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2716, -1000,
	-1000, 3347, -239, -243, 2309, 164, 175, -1000, 2308, -1000,
	-1000, 703, -229, 154, 148, 142, -1000, -1000, -1000, 10728,
	-1000, -1000, 45504, 840, 2302, 2301, -1000, -1000, 2026, 45504,
	606, -1000, -1000, -1000, -1000, 210, -1000, -1000, -1000, -1000,
	-1000, 2297, 2295, -1000, 31244, 3235, 2205, 502, 3344, -1000,
	48927, -1000, 1734, -1000, 502, 1345, -1000, 1734, 1734, -1000,
	452, -1000, 1676, -1000, 2024, -1000, 3327, -1000, 437, -1000,
	523, -1000, -1000, -1000, 1337, -1000, -1000, -1000, 48676, 528,
	-1000, 745, 2714, -1000, -1000, 2260, 10728, 2712, 1734, 2228,
	-123, 31244, 3054, 3052, 3050, 3043, 1316, -1000, -1000, 25044,
	-1000, -1000, 30624, 45504, 2262, -1000, -1000, 2289, -1000, 817,
	181, 175, -1000, 3342, 186, 3339, 3338, 1110, 1893, -1000,
	150, 145, 128, -1000, -1000, -1000, -1000, -1000, 376, -1000,
	-1000, 2283, 574, -1000, 309, -1000, -1000, -1000, 314, -1000,
	-1000, 3235, -1000, 3337, 641, -1000, 25044, -1000, -1000, 30004,
	1764, 1764, -1000, -1000, 2019, -1000, -1000, -1000, -1000, 2018,
	-1000, -1000, -1000, 1278, -1000, 45504, 930, 7607, -1000, 2127,
	-1000, 45504, -1000, 3056, -1000, 260, 1258, 314, 752, 314,
	752, 314, 752, 314, 752, 303, -1000, -1000, -1000, 1257,
	-1000, -1000, -1000, 2667, 2015, 191, 178, 3335, -1000, 2262,
	3332, 2262, 2262, -1000, 138, 703, -1000, -1000, -1000, 45504,
	-1000, 2282, -1000, -1000, -1000, -1000, 1734, 1734, 2281, 2275,
	423, -1000, -1000, -1000, 29384, 540, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 528, 48927, -1000, 7607, 1248, -1000, 2213,
	-1000, 768, -1000, -1000, 3049, 2460, 3399, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 45504, 3279, 24424,
	168, -1000, -1000, -1000, 2267, -1000, 2262, -1000, -1000, 1732,
	-1000, -1000, -272, 1967, 1956, -1000, -1000, 45504, -1000, 45504,
	527, -1000, 48927, 1247, -1000, 7607, -1000, -1000, 3411, -1000,
	3409, 927, 927, 314, 314, 314, 314, -1000, -1000, 45504,
	-1000, 1246, -1000, -1000, -1000, 1470, -1000, -1000, -1000, -1000,
	2246, -1000, -1000, 2190, -1000, -1000, -1000, 1225, 2502, -1000,
	-1000, -1000, -1000, -1000, 2008, 642, -1000, 1080, -1000, 1696,
	-1000, 28764, 45504, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	45504, 6984, -1000, 1466, -1000, -1000, 2213, 45504, -1000,
}

var yyPgo = [...]int{
	0, 176, 3439, 263, 181, 3986, 108, 261, 238, 236,
	259, 3985, 3984, 3982, 3980, 3232, 3227, 3974, 3973, 3970,
	3968, 3967, 3966, 3963, 3962, 3961, 3960, 3959, 3957, 3956,
	3955, 3954, 3951, 3950, 3949, 3948, 3947, 3946, 3944, 3939,
	3937, 3936, 3935, 3934, 3933, 3932, 3931, 258, 3930, 3929,
	3928, 3927, 3925, 3924, 3922, 3921, 3911, 3910, 3909, 3907,
	3901, 3899, 3898, 3897, 3896, 3895, 3891, 3890, 3888, 3887,
	3886, 3885, 3884, 3883, 3882, 3881, 3880, 3879, 3874, 252,
	3869, 3868, 210, 3866, 3222, 3863, 3859, 3858, 3857, 3856,
	3855, 3854, 206, 3853, 3851, 3849, 3847, 3846, 3845, 3844,
	3843, 3842, 3841, 3840, 217, 3839, 3832, 3829, 3826, 241,
	3822, 204, 3820, 179, 189, 3819, 3817, 3816, 3814, 3813,
	3811, 3810, 3809, 3808, 3807, 3806, 3805, 3804, 247, 202,
	76, 3803, 52, 3802, 3799, 224, 3797, 151, 3794, 149,
	3790, 3789, 3786, 3784, 3778, 3776, 3775, 3774, 3773, 3772,
	3770, 3769, 3767, 3766, 3765, 3764, 3763, 3762, 3759, 3758,
	3757, 3756, 99, 3750, 267, 3748, 79, 3747, 187, 136,
	3746, 84, 154, 270, 1927, 265, 275, 191, 178, 98,
	3741, 329, 3740, 166, 243, 165, 31, 3739, 144, 3738,
	268, 48, 43, 253, 147, 58, 163, 134, 3737, 228,
	114, 112, 3735, 3733, 145, 3732, 246, 186, 3731, 106,
	3730, 3727, 3726, 3725, 3724, 200, 207, 3722, 3719, 137,
	3718, 3714, 80, 127, 3713, 77, 123, 170, 122, 3697,
	380, 133, 139, 129, 105, 3696, 121, 3695, 3694, 3693,
	3691, 188, 3688, 3687, 142, 71, 3684, 3683, 3682, 73,
	3681, 82, 3675, 51, 3672, 66, 3669, 3668, 3667, 3666,
	3665, 3664, 3661, 3659, 3658, 3657, 3655, 3653, 56, 3651,
	3650, 9, 11, 16, 3649, 26, 3648, 174, 3644, 3643,
	3642, 3641, 3640, 97, 93, 3639, 96, 172, 3635, 7,
	29, 74, 3634, 3633, 225, 245, 103, 159, 3632, 280,
	3631, 3630, 3629, 164, 3627, 1623, 3626, 3625, 3624, 3623,
	3622, 3621, 23, 3620, 1, 219, 44, 3619, 138, 141,
	3618, 40, 41, 3616, 49, 119, 223, 140, 100, 3614,
	3613, 3612, 132, 230, 109, 81, 0, 3611, 229, 158,
	3610, 3608, 3606, 262, 3605, 244, 198, 173, 332, 290,
	294, 3603, 3601, 70, 130, 3599, 167, 32, 55, 143,
	87, 20, 227, 3598, 14, 8, 215, 3597, 201, 3596,
	274, 17, 878, 156, 3595, 3594, 34, 269, 3592, 3591,
	3590, 135, 3589, 3588, 331, 78, 3586, 3585, 3584, 3583,
	36, 3582, 39, 13, 3581, 111, 3580, 250, 3578, 235,
	161, 184, 183, 162, 234, 237, 85, 89, 3577, 1789,
	153, 104, 22, 3576, 242, 3575, 171, 120, 3573, 95,
	3572, 255, 271, 203, 3571, 192, 12, 50, 38, 30,
	42, 10, 257, 196, 3570, 3569, 24, 54, 3567, 57,
	3566, 19, 3565, 3564, 46, 3563, 64, 5, 3562, 3561,
	18, 21, 3558, 37, 212, 175, 125, 102, 65, 3557,
	3555, 53, 256, 3554, 155, 177, 160, 3553, 83, 3552,
	3550, 3549, 3548, 908, 3547, 264, 3543, 3542, 3539, 3537,
	3535, 3534, 3533, 3532, 239, 3530, 110, 47, 3529, 3526,
	3525, 3524, 86, 150, 3523, 3522, 3521, 3518, 33, 146,
	3517, 15, 3516, 27, 25, 35, 3513, 101, 3512, 3,
	190, 3510, 3509, 4, 3507, 3506, 2, 3503, 3500, 131,
	3498, 94, 28, 169, 107, 3497, 3496, 91, 218, 148,
	3495, 3494, 115, 254, 199, 3493, 60, 240, 266, 3490,
	208, 3488, 3485, 3484, 3483, 3482, 3481, 1175, 3480, 3478,
	260, 75, 88, 3477, 232, 124, 3475, 3473, 90, 168,
	126, 116, 63, 92, 3472, 117, 197, 3471, 194, 3470,
	248, 3469, 3468, 113, 3467, 3466, 3465, 3464, 193, 3461,
	3458, 195, 233, 3455, 3453, 279, 3451, 3450, 3449, 3448,
	3447, 3446, 3445, 3443, 3442, 3441, 251, 205, 3437,
}

//line mysql_sql.y:12344
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 591, 594, 594, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 119, 119,
	327, 327, 328, 328, 121, 323, 323, 322, 322, 122,
	123, 124, 570, 570, 125, 126, 155, 569, 569, 157,
	157, 157, 157, 157, 444, 120, 120, 120, 120, 120,
	120, 120, 118, 576, 576, 576, 577, 577, 115, 144,
	143, 146, 146, 145, 145, 142, 142, 138, 141, 141,
	140, 140, 139, 134, 136, 136, 135, 137, 137, 116,
	104, 117, 518, 518, 517, 517, 516, 516, 469, 469,
	470, 470, 314, 314, 314, 515, 515, 515, 514, 514,
	513, 513, 512, 512, 510, 510, 511, 509, 508, 508,
	508, 506, 506, 506, 502, 502, 504, 503, 503, 505,
	497, 497, 500, 500, 498, 498, 498, 498, 501, 496,
	496, 496, 495, 495, 103, 103, 103, 411, 411, 102,
	102, 425, 425, 425, 425, 425, 423, 423, 423, 423,
	423, 423, 422, 422, 421, 421, 426, 426, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 93,
	93, 93, 93, 93, 98, 98, 98, 582, 582, 581,
	581, 583, 583, 583, 583, 584, 584, 96, 96, 96,
	97, 420, 420, 420, 94, 95, 95, 410, 410, 415,
	415, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 419, 419, 419, 417, 417, 416,
	416, 418, 418, 87, 87, 87, 90, 89, 409, 409,
	409, 409, 409, 409, 409, 409, 409, 88, 88, 88,
	88, 88, 88, 83, 83, 83, 83, 83, 82, 82,
	84, 84, 407, 407, 406, 99, 99, 100, 579, 579,
	578, 580, 580, 580, 580, 101, 107, 107, 107, 107,
	107, 107, 107, 107, 106, 106, 109, 109, 108, 110,
	92, 92, 92, 92, 92, 92, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 543,
	543, 543, 545, 545, 341, 342, 595, 344, 340, 340,
	340, 539, 539, 540, 541, 542, 542, 542, 105, 14,
	205, 205, 443, 443, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 13, 81, 86, 86, 276, 276, 281,
	281, 160, 282, 282, 282, 287, 287, 288, 288, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 263, 263, 263, 258, 258, 258, 258, 259, 259,
	260, 260, 261, 261, 261, 261, 262, 262, 333, 333,
	283, 283, 283, 285, 285, 284, 280, 278, 278, 278,
	278, 278, 278, 278, 279, 279, 279, 279, 286, 286,
	79, 85, 85, 85, 85, 557, 557, 80, 568, 568,
	473, 473, 356, 356, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	478, 479, 351, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 54, 57, 58,
	159, 53, 53, 53, 396, 396, 52, 596, 596, 326,
	326, 67, 66, 56, 68, 69, 70, 71, 72, 73,
	51, 65, 65, 65, 65, 65, 65, 65, 65, 76,
	491, 491, 598, 598, 598, 74, 75, 472, 472, 472,
	64, 63, 62, 61, 60, 60, 50, 50, 49, 49,
	55, 150, 59, 151, 151, 348, 348, 348, 350, 350,
	346, 354, 354, 597, 597, 439, 439, 349, 349, 48,
	48, 48, 48, 77, 347, 347, 325, 345, 345, 345,
	12, 12, 10, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	26, 27, 29, 404, 404, 401, 28, 20, 19, 19,
	23, 22, 18, 18, 21, 24, 25, 25, 9, 9,
	9, 9, 15, 15, 16, 178, 178, 231, 231, 551,
	551, 547, 547, 548, 548, 548, 549, 549, 550, 550,
	111, 485, 485, 485, 485, 485, 485, 8, 8, 200,
	200, 484, 484, 484, 484, 484, 484, 408, 408, 408,
	528, 528, 528, 529, 199, 199, 194, 194, 486, 486,
	373, 530, 530, 494, 494, 493, 493, 492, 492, 197,
	197, 198, 198, 181, 181, 129, 129, 499, 499, 499,
	499, 507, 507, 468, 468, 268, 268, 316, 316, 317,
	317, 171, 171, 172, 172, 172, 172, 172, 172, 585,
	585, 586, 587, 588, 588, 589, 589, 589, 590, 590,
	590, 590, 590, 536, 536, 538, 538, 537, 196, 196,
	192, 192, 193, 193, 193, 191, 191, 190, 189, 189,
	188, 186, 186, 186, 187, 187, 187, 204, 204, 174,
	174, 174, 173, 173, 173, 173, 173, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 175,
	175, 544, 544, 544, 474, 474, 474, 481, 481, 296,
	296, 297, 297, 295, 295, 176, 176, 177, 177, 177,
	177, 294, 294, 293, 179, 179, 185, 184, 184, 180,
	180, 180, 180, 304, 304, 303, 303, 303, 303, 114,
	127, 127, 128, 203, 203, 302, 301, 301, 301, 301,
	202, 202, 201, 201, 195, 195, 183, 183, 183, 183,
	300, 182, 298, 575, 575, 574, 574, 573, 571, 571,
	571, 572, 572, 572, 572, 520, 520, 520, 520, 520,
	334, 334, 334, 339, 339, 337, 337, 337, 337, 337,
	343, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 39, 214, 215, 40, 216, 216, 217,
	217, 218, 218, 219, 220, 221, 221, 221, 221, 38,
	206, 206, 207, 207, 208, 208, 209, 210, 210, 210,
	213, 211, 212, 212, 593, 593, 592, 37, 37, 30,
	163, 163, 164, 164, 164, 166, 166, 264, 264, 264,
	165, 165, 167, 167, 167, 552, 554, 554, 556, 555,
	555, 555, 558, 558, 558, 558, 558, 559, 559, 559,
	559, 560, 560, 31, 147, 147, 152, 563, 563, 563,
	562, 562, 564, 564, 565, 565, 320, 320, 321, 321,
	161, 162, 162, 154, 149, 169, 169, 169, 169, 169,
	170, 170, 148, 153, 156, 158, 553, 561, 561, 561,
	405, 405, 402, 403, 403, 400, 399, 399, 399, 567,
	567, 566, 566, 566, 335, 335, 32, 395, 395, 397,
	398, 398, 398, 389, 389, 389, 389, 36, 393, 393,
	394, 394, 394, 394, 394, 394, 394, 390, 390, 392,
	392, 388, 388, 388, 388, 388, 388, 388, 35, 168,
	168, 387, 387, 384, 384, 382, 382, 383, 383, 381,
	381, 381, 385, 385, 43, 78, 44, 45, 46, 42,
	386, 386, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 131, 130, 130, 130, 130, 130, 133, 133,
	319, 319, 318, 318, 132, 265, 265, 41, 243, 243,
	460, 460, 455, 455, 455, 455, 455, 476, 476, 476,
	456, 456, 456, 457, 457, 457, 459, 459, 459, 458,
	458, 458, 458, 458, 475, 475, 477, 477, 477, 427,
	427, 428, 428, 428, 431, 431, 447, 447, 448, 448,
	446, 446, 453, 453, 452, 452, 451, 451, 450, 450,
	449, 449, 449, 449, 442, 442, 441, 441, 429, 429,
	429, 429, 429, 430, 430, 430, 440, 440, 445, 445,
	292, 292, 291, 291, 251, 251, 252, 252, 290, 290,
	249, 249, 250, 250, 250, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	526, 526, 527, 254, 254, 266, 266, 266, 266, 266,
	266, 253, 253, 255, 255, 232, 232, 230, 230, 222,
	222, 222, 222, 222, 222, 223, 223, 224, 224, 225,
	225, 225, 229, 229, 228, 228, 228, 228, 226, 226,
	227, 227, 227, 227, 227, 227, 413, 413, 523, 523,
	524, 524, 519, 519, 519, 522, 522, 522, 522, 522,
	522, 522, 525, 525, 525, 521, 521, 233, 313, 313,
	313, 336, 336, 336, 336, 338, 312, 312, 312, 248,
	248, 247, 247, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 412, 412, 352, 352, 353,
	353, 275, 274, 274, 274, 274, 274, 272, 273, 271,
	271, 271, 271, 271, 270, 270, 269, 269, 269, 391,
	391, 267, 267, 257, 257, 257, 256, 256, 256, 454,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 310,
	310, 310, 311, 311, 311, 311, 311, 311, 311, 311,
	363, 363, 369, 369, 535, 535, 534, 234, 234, 234,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 244,
	244, 244, 436, 436, 436, 436, 437, 437, 437, 437,
	438, 438, 438, 434, 434, 435, 435, 374, 375, 375,
	482, 482, 483, 483, 432, 432, 433, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 490,
	490, 490, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 546, 546,
	546, 531, 531, 531, 532, 532, 532, 532, 532, 532,
	532, 532, 532, 532, 532, 532, 533, 533, 533, 533,
	533, 533, 533, 533, 533, 533, 533, 533, 533, 533,
	533, 533, 533, 308, 308, 308, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 376, 376, 377, 377, 487, 487,
	487, 487, 487, 487, 488, 488, 489, 489, 489, 489,
	480, 480, 480, 480, 480, 480, 480, 480, 480, 480,
	480, 480, 480, 480, 480, 480, 480, 480, 480, 480,
	480, 480, 480, 480, 480, 480, 480, 480, 480, 361,
	305, 305, 305, 378, 370, 370, 371, 371, 372, 372,
	364, 364, 364, 364, 364, 364, 365, 365, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	366, 366, 368, 368, 380, 380, 380, 379, 379, 379,
	379, 379, 379, 379, 246, 246, 246, 246, 358, 358,
	358, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 236, 236, 236, 236, 240, 240, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 241, 241, 241, 241, 241, 239, 239,
	239, 239, 239, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 112, 113, 113, 238, 315, 315, 461, 461, 464,
	464, 462, 462, 463, 465, 465, 465, 466, 466, 466,
	467, 467, 467, 471, 471, 324, 324, 324, 332, 332,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 8, 8,
	0, 2, 0, 2, 9, 1, 3, 0, 3, 4,
	4, 4, 1, 2, 5, 6, 6, 1, 2, 7,
	9, 10, 10, 12, 1, 5, 6, 8, 10, 9,
	11, 13, 4, 0, 1, 1, 0, 1, 5, 2,
	2, 6, 9, 6, 9, 4, 7, 8, 0, 1,
	1, 2, 4, 6, 1, 2, 4, 0, 2, 10,
	11, 2, 0, 2, 1, 3, 3, 3, 0, 2,
	0, 2, 1, 3, 5, 0, 2, 3, 1, 3,
	1, 1, 1, 3, 1, 1, 1, 1, 0, 3,
	3, 0, 3, 3, 0, 1, 3, 0, 1, 3,
	0, 2, 1, 2, 3, 4, 3, 3, 1, 0,
	1, 1, 0, 1, 8, 5, 7, 0, 3, 8,
	5, 1, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 4, 1, 3, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 1, 3, 3,
	1, 2, 2, 2, 1, 2, 2, 3, 4, 4,
	6, 1, 1, 1, 2, 4, 6, 1, 4, 1,
	3, 3, 4, 4, 4, 4, 3, 3, 2, 4,
	4, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 2, 2, 0, 1,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 3, 4, 4, 1, 2,
	9, 7, 1, 3, 3, 1, 1, 3, 1, 3,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 2, 4, 3, 3,
	1, 1, 1, 1, 1, 1, 2, 3, 4, 7,
	2, 3, 3, 4, 5, 3, 4, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 1, 1, 1, 1, 6, 4,
	1, 1, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 10, 7, 4, 4, 1, 3, 1,
	6, 7, 3, 3, 3, 1, 1, 1, 3, 2,
	4, 5, 5, 6, 5, 5, 3, 2, 2, 1,
	3, 4, 3, 7, 5, 8, 2, 2, 1, 3,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 2, 1, 3, 2, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 6, 3, 3, 1, 1,
	7, 7, 7, 8, 8, 0, 4, 7, 0, 3,
	0, 2, 0, 1, 1, 1, 1, 4, 2, 2,
	3, 3, 4, 5, 3, 4, 4, 2, 2, 2,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 3,
	3, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 7, 7, 5, 4, 7, 8,
	3, 3, 2, 3, 4, 0, 2, 2, 0, 2,
	2, 0, 5, 1, 1, 1, 1, 0, 1, 5,
	5, 5, 4, 3, 1, 3, 1, 1, 3, 5,
	2, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 4, 1, 3, 1, 4, 6, 6, 4,
	4, 4, 4, 4, 3, 6, 3, 5, 1, 1,
	2, 2, 11, 8, 9, 1, 3, 2, 4, 0,
	2, 0, 1, 1, 1, 1, 0, 1, 0, 1,
	4, 2, 1, 5, 4, 4, 2, 5, 5, 1,
	3, 2, 1, 5, 4, 4, 2, 0, 5, 4,
	0, 1, 3, 3, 1, 3, 1, 3, 1, 3,
	4, 0, 1, 0, 1, 1, 3, 1, 1, 0,
	4, 1, 3, 2, 1, 0, 8, 0, 4, 7,
	4, 0, 2, 0, 2, 0, 2, 0, 4, 1,
	3, 1, 1, 6, 4, 5, 7, 4, 5, 0,
	1, 3, 8, 0, 6, 0, 4, 6, 1, 1,
	1, 1, 1, 2, 3, 1, 3, 6, 0, 3,
	0, 1, 2, 4, 4, 0, 1, 3, 1, 3,
	3, 0, 1, 1, 0, 2, 2, 0, 2, 3,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 7,
	7, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 2, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 3, 1, 1, 1, 4,
	4, 4, 3, 2, 2, 2, 3, 2, 3, 4,
	1, 3, 4, 0, 2, 1, 1, 2, 2, 2,
	0, 1, 2, 4, 1, 3, 1, 3, 2, 3,
	1, 4, 3, 0, 1, 1, 2, 5, 2, 2,
	2, 0, 2, 3, 3, 0, 1, 3, 1, 3,
	0, 1, 2, 1, 1, 0, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 1, 7, 1, 3, 0,
	1, 1, 3, 1, 3, 0, 1, 1, 1, 14,
	1, 3, 0, 1, 1, 3, 1, 1, 2, 4,
	1, 1, 1, 1, 0, 1, 2, 9, 9, 7,
	1, 2, 3, 3, 3, 0, 4, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 4, 1,
	1, 1, 3, 3, 4, 3, 3, 0, 1, 1,
	1, 0, 2, 7, 8, 8, 8, 0, 3, 3,
	0, 3, 0, 3, 0, 5, 1, 3, 0, 3,
	3, 0, 2, 9, 7, 0, 2, 2, 3, 3,
	0, 2, 4, 4, 4, 4, 1, 0, 2, 2,
	1, 3, 2, 1, 3, 2, 1, 3, 2, 0,
	1, 3, 4, 3, 1, 1, 4, 1, 3, 1,
	1, 1, 1, 0, 1, 1, 1, 11, 0, 2,
	3, 3, 2, 2, 3, 1, 1, 1, 3, 3,
	4, 0, 2, 2, 2, 2, 2, 2, 6, 0,
	4, 1, 1, 0, 3, 0, 1, 1, 2, 4,
	4, 4, 0, 1, 8, 2, 4, 4, 4, 9,
	0, 2, 11, 9, 11, 8, 6, 9, 7, 10,
	7, 6, 2, 2, 9, 4, 5, 3, 0, 4,
	1, 3, 0, 3, 6, 0, 2, 10, 0, 2,
	0, 2, 0, 3, 2, 4, 3, 0, 2, 1,
	0, 2, 3, 0, 2, 3, 0, 2, 1, 0,
	3, 2, 4, 3, 0, 1, 0, 1, 1, 0,
	6, 0, 3, 5, 0, 4, 0, 3, 1, 3,
	4, 5, 0, 3, 1, 3, 2, 3, 1, 2,
	0, 4, 6, 5, 0, 2, 0, 2, 4, 5,
	4, 5, 1, 5, 6, 5, 0, 3, 0, 1,
	1, 3, 3, 3, 0, 4, 1, 3, 3, 3,
	0, 1, 1, 3, 2, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 5, 4,
	1, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 4, 0,
	2, 5, 5, 5, 5, 0, 1, 1, 3, 1,
	1, 1, 1, 1, 7, 9, 7, 9, 2, 1,
	7, 9, 7, 9, 8, 5, 0, 1, 0, 1,
	1, 1, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 3, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 2, 1, 2, 2, 1, 1, 2, 2,
	2, 3, 3, 2, 2, 1, 5, 6, 4, 1,
	1, 1, 5, 4, 1, 1, 2, 0, 1, 1,
	2, 5, 0, 1, 1, 2, 2, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 2, 2, 2, 0,
	3, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 3, 5, 2, 2,
	2, 2, 4, 1, 1, 2, 5, 6, 8, 6,
	6, 6, 1, 1, 1, 1, 1, 1, 3, 4,
	4, 4, 7, 9, 7, 7, 7, 9, 7, 7,
	0, 2, 0, 1, 1, 2, 4, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 2, 2, 2, 0,
	1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 5, 0, 1, 3, 0, 1,
	0, 2, 0, 2, 0, 1, 6, 8, 8, 6,
	6, 5, 5, 5, 6, 6, 6, 6, 5, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 1,
	1, 1, 4, 4, 6, 8, 6, 4, 5, 4,
	4, 4, 3, 4, 6, 6, 7, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 8, 4, 2, 3, 2,
	4, 2, 2, 4, 6, 2, 2, 4, 6, 4,
	2, 4, 4, 4, 0, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 3, 0, 1, 1, 3, 1, 3,
	3, 3, 3, 3, 2, 1, 1, 1, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 1, 3,
	4, 4, 5, 4, 5, 3, 4, 5, 6, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 2, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 4,
	1, 2, 3, 5, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int{
	-1000, -591, -594, -2, -5, 623, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -171, -118, -119,
	-120, -123, -125, -126, 613, -88, -89, -90, -33, -32,
	-31, -30, -147, -152, -155, -157, -121, 546, 619, 449,
	14, 498, -15, -16, -536, -17, 260, -340, -341, -342,
	-344, -595, -48, -49, -50, -60, -61, -62, -63, -64,
	-74, -75, -76, -51, -52, -53, -56, -54, -67, -66,
	-68, -69, -70, -71, -72, -73, -55, -59, -150, -151,
	-77, -57, -78, -58, -159, -122, -80, -79, -85, -81,
	-86, -149, -154, -13, -160, 235, -84, 76, -94, -95,
	-96, -97, -98, -100, -101, 373, 379, 436, 612, 61,
	-172, -174, 637, 638, 641, 533, 536, 160, 161, 163,
	164, -34, -35, -36, -37, -38, -39, -41, -40, -42,
	-43, -44, -45, -46, 231, 16, 541, -18, -21, -19,
	-22, -20, -28, -29, -27, -24, -26, -148, -25, -153,
	-23, -156, -158, -124, 255, 254, 38, 321, 322, 323,
	377, 253, 232, 15, 31, 42, 352, -173, 83, 534,
	233, -175, 13, 643, -6, -3, -2, -134, -138, -142,
	-145, -146, -143, -144, -4, -113, 118, 245, 614, -336,
	369, 615, 617, 616, 86, 94, -329, -331, 449, 260,
	373, 379, 612, 638, 641, 533, 536, 548, 549, 550,
	551, 552, 553, 554, 555, 557, 558, 559, 560, 561,
	562, 563, 573, 574, 564, 565, 566, 567, 568, 569,
	570, 571, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 501, 598, 599, 600,
	601, 529, 556, 592, 593, 594, 595, 350, 351, 538,
	272, 296, 404, 302, 309, 160, 179, 173, 201, 193,
	534, 168, 276, 314, 277, 93, 163, 484, 108, 461,
	433, 166, 291, 293, 295, 530, 531, 363, 298, 528,
	297, 299, 301, 532, 278, 353, 189, 184, 290, 274,
	182, 279, 40, 280, 206, 281, 282, 543, 457, 349,
	463, 306, 52, 431, 183, 458, 294, 460, 210, 214,
	475, 476, 177, 178, 465, 478, 205, 208, 209, 252,
	346, 347, 43, 540, 264, 479, 212, 204, 200, 487,
	310, 308, 203, 176, 199, 275, 65, 216, 215, 217,
	427, 428, 429, 430, 283, 284, 367, 474, 196, 185,
	354, 169, 23, 482, 259, 462, 380, 285, 303, 311,
	211, 213, 266, 271, 542, 435, 270, 307, 480, 181,
	263, 292, 258, 483, 170, 382, 286, 164, 300, 477,
	486, 64, 395, 175, 167, 630, 249, 161, 268, 273,
	287, 288, 289, 527, 313, 312, 304, 535, 197, 265,
	202, 187, 174, 198, 162, 267, 485, 396, 610, 352,
	414, 195, 192, 269, 242, 481, 464, 165, 418, 397,
	190, 315, 605, 606, 607, 368, 345, 316, 317, 188,
	256, 455, 456, 320, 424, 336, 398, 434, 405, 399,
	223, 224, 324, 467, 469, 207, 608, 325, 326, 327,
	459, 328, 329, 330, 331, 372, 56, 58, 95, 98,
	97, 639, 640, 63, 29, 358, 361, 393, 400, 338,
	611, 539, 335, 339, 340, 362, 25, 416, 384, 420,
	419, 48, 49, 50, 53, 54, 55, 57, 59, 60,
	51, 526, 377, 390, 488, 45, 47, 387, 27, 364,
	415, 437, 334, 417, 448, 46, 446, 447, 468, 26,
	366, 365, 62, 44, 423, 425, 426, 318, 332, 375,
	620, 489, 370, 386, 389, 371, 337, 360, 391, 67,
	66, 383, 621, 378, 376, 333, 544, 545, 341, 572,
	355, 432, 523, 522, 521, 520, 519, 518, 517, 516,
	321, 322, 323, 401, 402, 403, 413, 406, 407, 408,
	409, 410, 411, 412, 451, 452, 622, 470, 472, 473,
	471, 237, 642, 356, 357, 240, 624, 625, 96, 626,
	628, 627, 28, 629, 632, 633, 634, 635, 636, -418,
	-416, -336, 534, 612, 379, 533, 536, 373, 352, 638,
	641, 377, 260, 321, 322, 323, 449, 350, -216, -336,
	642, -181, 244, 39, -230, -336, -181, -84, -16, -15,
	-173, -174, -230, 239, -345, 24, 431, -92, 432, 235,
	83, 77, -336, -9, -104, -8, -111, -82, -171, 436,
	-343, -336, 321, 321, -343, 239, -338, 270, 412, -336,
	-473, 245, -422, -395, 271, -421, -397, -424, -398, 32,
	231, 233, 232, 546, 267, 16, 377, 241, 14, 13,
	378, 253, 25, 26, 28, 15, 379, 381, 29, 382,
	385, 386, 387, 42, 390, 391, 260, 86, 94, 89,
	278, -215, -336, -372, -364, 115, -367, -359, -360, -362,
	-314, -510, -357, 83, 142, 143, 150, 116, 644, -361,
	-454, 36, 118, 552, 556, 592, 499, -306, -307, -308,
	-309, -310, -311, -336, -511, -509, 89, 99, 101, 105,
	106, 104, 102, 154, 186, 103, 90, 155, -174, 86,
	-531, 562, -330, 585, 598, 599, 600, 601, 584, 61,
	-480, -489, 238, -487, 153, 191, 256, 187, 14, 148,
	424, 188, 593, 594, 595, 559, 581, 501, 563, 573,
	588, 554, 555, 557, 549, 550, 551, 553, 564, 566,
	580, -490, 576, 586, 587, 572, 596, 597, 589, 590,
	591, 628, 88, 87, 579, 578, 565, 560, 561, 567,
	548, 558, 568, 569, 577, 582, 583, 361, 108, 362,
	363, 491, 353, 364, 245, 431, 70, 365, 366, 367,
	368, 369, 498, 370, 71, 371, 360, 260, 414, 372,
	190, 207, 503, 502, 504, 495, 492, 490, 493, 494,
	496, 497, 570, 571, 575, -127, -128, 603, -585, -299,
	-586, 6, 7, 8, 9, -587, 155, -576, 433, 542,
	89, 314, 350, 631, 532, 631, 532, 165, 162, -409,
	165, 114, 170, 169, -409, 631, 167, 630, 324, 266,
	-386, -163, 350, 414, 328, 95, 270, -389, -387, 530,
	-475, 318, 314, 290, 240, 111, -164, 250, 249, 109,
	491, 238, 388, 309, 56, 58, -547, -548, 228, 229,
	230, -538, 524, -537, -336, 631, 363, 97, 98, 630,
	27, 239, 374, 266, 469, 467, 468, 470, 471, 472,
	473, -65, -491, -472, 464, 463, -349, 456, 462, 454,
	466, 457, 351, 330, 546, 329, 231, 624, 531, 525,
	-324, 398, 434, 488, 489, 375, 435, 475, 477, 458,
	108, 194, 191, 240, 242, 239, 630, 350, 491, 414,
	95, 328, -547, 162, 475, 477, 270, 412, 41, -415,
	424, -414, -416, 476, 487, 87, 88, 474, -324, 108,
	455, 455, -585, -299, -172, -174, -114, -536, 532, 631,
	240, 350, 414, 270, 241, 239, 527, 530, 242, 491,
	238, 321, 374, 266, 328, 95, 167, 630, -474, -544,
	32, -481, 225, 226, 227, 33, 34, -1, 122, 643,
	-364, -364, -6, 646, -6, -364, -336, -336, 157, -236,
	-240, -237, -239, -238, -242, -241, 191, 192, 153, 195,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 208,
	209, 206, 31, 207, 256, 187, 188, 189, 190, 210,
	173, 193, 539, 218, 174, 219, 175, 220, 176, 221,
	177, 178, 222, 179, 182, 183, 184, 185, 181, 156,
	-205, 89, 32, 83, 156, 89, -197, 262, -181, -230,
	-222, 156, 644, -197, -585, -190, -191, 11, -230, -312,
	-336, 433, 125, -92, 77, -92, 432, 77, -539, -540,
	-541, -543, 235, 432, 431, -109, 156, 278, 17, -343,
	-343, 81, -230, -397, 270, -422, -395, 36, 80, 157,
	243, 157, 80, 83, 375, 350, 414, 376, 491, 239,
	388, 242, 270, 389, 350, 414, 239, 242, 491, 270,
	350, 239, 242, 414, 270, 389, 350, 454, 455, 242,
	27, 380, 383, 384, 455, -495, 487, 157, 114, 111,
	112, 113, -364, 132, -379, 125, 126, 127, 128, 129,
	130, 131, 139, 138, 149, 142, 143, 144, 145, 146,
	147, 148, 140, 141, 135, 115, 133, 137, 134, 117,
	152, -174, -364, -372, 61, -362, -362, -362, -362, -336,
	-454, -369, -364, 83, 83, 83, 83, 156, 102, 89,
	-364, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, -488, 83, 83, -376, -377, 83, 83,
	-357, -312, 83, 89, 89, 83, 83, 83, 89, 83,
	83, 83, -377, -377, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, -191,
	157, -190, 83, -190, -191, -175, -174, 32, 33, 32,
	33, 32, 33, 32, 33, -588, 621, 83, 99, 639,
	223, 17, -336, 89, 535, 89, 535, 480, 541, 168,
	169, 170, -384, 245, -384, -384, -214, -336, -216, 374,
	242, 527, 242, -164, -384, -384, -384, -384, -384, 241,
	-384, 24, 239, 239, 239, 239, -384, 498, 125, 125,
	59, -549, 172, 157, -538, -196, 83, 89, -348, 133,
	137, -348, -295, 18, -295, 24, 268, 268, 268, -348,
	308, -596, -597, 17, 135, -346, -597, -346, -346, -348,
	-598, 241, 465, 43, 269, 268, -192, -193, 22, -192,
	459, 455, -439, 460, 461, -350, -597, -349, -348, -348,
	-349, -348, -348, -348, 32, 239, 242, 491, 328, 625,
	-596, -596, 31, 31, -473, -473, -230, -473, -473, 525,
	-325, -336, -473, -473, -473, -550, 244, -582, -581, 478,
	-584, 480, 162, -416, 162, -416, -397, 270, 270, 157,
	125, 24, -417, 125, 136, -416, -416, -417, -417, -253,
	41, -335, 153, -336, 89, -253, 41, -579, -578, -230,
	-191, -175, -174, 84, 84, 84, 535, 89, -473, -473,
	-473, -473, -473, -475, -473, -473, -473, -473, -473, -343,
	-206, -336, -216, 245, -473, -473, -473, -473, -176, -177,
	144, -364, -336, -176, -3, -136, -135, 119, 120, 122,
	615, 369, 614, 618, 612, -416, 41, -467, 396, 395,
	-461, -463, 83, -462, 83, -462, -462, -462, -462, -462,
	83, 83, -464, 83, -464, -464, -461, -465, 83, -465,
	-466, 83, -466, -465, -336, -443, 541, -370, -372, -336,
	39, -484, 61, -171, 83, 31, 83, -197, -336, 645,
	188, 167, 629, -485, 61, -171, 83, 31, -191, -129,
	39, -193, 21, 156, 99, 89, -109, -92, 77, -109,
	84, 157, -542, 105, 106, -545, 205, 197, -336, -107,
	89, -7, -8, -9, -10, -47, -82, -79, -171, 232,
	533, 536, -512, -510, 83, 32, 423, 80, 17, -423,
	239, 491, 374, 266, 242, 350, -421, -404, -401, -399,
	-335, -397, -400, -399, -426, -312, 455, -130, 438, 437,
	320, -364, -364, -364, -364, -364, 104, 115, 345, 105,
	106, -359, -380, 32, 316, 317, -360, -360, -360, -360,
	-360, -360, -360, -360, -360, -360, -360, -360, -368, -378,
	-454, 83, 135, 133, 137, 134, 117, -362, -362, -360,
	-360, -255, -335, 153, 84, 157, -364, -535, -534, 119,
	-364, -364, -364, -364, -336, -532, -533, 505, 506, 507,
	508, 509, 510, 511, 512, 513, 514, 515, 365, 360,
	366, 364, 353, 372, 367, 368, 190, 522, 523, 516,
	517, 518, 519, 520, 521, -370, -370, -364, -532, -370,
	-305, 33, 32, -372, -372, -372, 84, -364, -546, 343,
	342, 344, -194, -336, -370, 84, 84, 84, 99, -372,
	-372, -370, -360, -370, -370, -370, -370, -533, -305, -305,
	-305, -305, 144, -372, -372, -305, -305, -305, -305, 144,
	-305, -305, -305, -305, -305, -305, -305, -305, -305, -305,
	84, 84, 84, 144, -372, -192, -128, -493, -492, -364,
	41, -129, -193, -589, 622, 83, -312, -577, 89, 89,
	644, 167, 17, 491, -570, 32, 632, 99, 632, 99,
	481, 482, 166, 169, 168, 89, 115, -336, -336, 35,
	83, -206, -384, -384, -384, -554, -336, 90, -405, -402,
	-399, -336, -336, -395, -336, -325, -230, -384, -384, -384,
	-384, -230, -264, 53, 54, 55, -399, -165, 56, 57,
	-550, -537, 35, -195, -336, -570, -295, -362, -362, -364,
	-399, 270, -596, -348, -348, -326, -325, -350, -345, -350,
	-350, -295, -346, -348, -348, -364, -350, -346, -295, -336,
	455, -295, -295, -439, -348, -347, -336, -347, -384, -325,
	-326, -326, -230, -230, -276, -281, -277, -282, 262, 236,
	358, 359, 234, 232, 11, 233, -289, 309, -385, 499,
	-259, -260, 77, 42, -262, 260, 400, 393, 272, 276,
	93, 277, 433, 278, 241, 280, 281, 282, 297, 299,
	252, 283, 284, 285, 424, 286, 161, 298, 287, 288,
	289, 376, -254, 6, 331, 41, 51, 52, 447, 446,
	544, 541, 273, -336, -554, -552, 31, -336, 31, -405,
	-336, -336, -184, -179, -183, -180, -185, -298, -300, -182,
	83, -230, -174, -336, 157, 479, 481, 482, -582, -417,
	-582, -417, 32, 423, -420, 423, 32, -395, -414, 475,
	477, -410, 89, 424, -400, -419, 80, 153, -492, -417,
	-417, -419, -419, 152, 157, -580, 480, 481, 228, -192,
	99, -570, -232, -230, -554, -404, -395, -336, -473, -232,
	-232, -232, -338, -338, 83, 156, 36, -336, -336, -336,
	-336, -294, 157, -293, 17, -337, -336, 35, 89, 156,
	-294, -137, -135, 121, -364, -6, 614, -364, -6, -6,
	-364, -6, -364, -471, 397, 99, 99, -315, 89, -315,
	99, 99, 99, 547, 84, 89, -408, 80, -486, -373,
	-530, 603, -199, 84, -194, -528, -529, -194, -198, -336,
	-484, -222, 125, 125, 125, -486, -199, 84, -528, -192,
	604, -129, -189, -188, -364, -336, 24, -109, -92, -540,
	156, 350, 157, -195, -423, -403, -400, -425, 144, -336,
	-411, 157, 541, 647, 87, 243, -567, -566, 415, 84,
	157, -496, 244, 498, 89, 644, 431, 223, 224, 104,
	345, 105, 106, -454, -372, -368, -362, -362, -360, -360,
	-366, 257, -366, 114, -364, 645, -363, -534, 121, -364,
	35, 157, 35, 157, 81, 156, 84, 84, 17, 17,
	84, -364, 84, 84, 84, 84, 17, 17, -364, 84,
	156, 84, 84, 84, 84, 81, 84, 157, 84, 84,
	84, 84, 157, -372, -372, -364, -372, 84, 84, 84,
	-364, -364, -364, -372, 84, -364, -364, -364, -364, -364,
	-364, -364, -364, -364, -364, -433, 450, -433, -433, 157,
	157, 157, 84, -129, 83, 99, 157, 640, -319, -318,
	89, -336, 167, -336, 89, 89, 167, 170, 170, 169,
	89, 36, 24, 307, 24, -215, -217, -218, -219, -220,
	-221, 135, 158, 159, 83, -230, -230, -230, -556, 401,
	-568, 157, 41, -566, 491, 239, -161, 320, -388, 81,
	-168, 17, 541, -230, -230, -230, -230, -243, 35, 17,
	-178, -231, -336, 83, 84, 157, -396, 81, -336, -326,
	-295, -295, -350, -295, -295, 157, 23, -348, -350, -350,
	-354, 644, -346, -354, 156, -354, -325, -460, 35, -196,
	157, 21, 262, -229, -333, -226, -228, 247, -353, -227,
	250, -524, 248, 246, 109, 251, 305, 110, 241, -333,
	-333, 247, -263, 243, 35, -333, -279, 241, 348, 305,
	248, 21, 262, -278, 241, 110, -336, 247, 251, 248,
	246, -332, 125, -324, 152, 243, 43, 376, -332, 545,
	262, -332, -332, -332, -332, -332, -332, -332, 279, 279,
	-332, -332, -332, -332, -332, -332, -332, -332, -332, -332,
	-332, 162, -332, -332, -332, -332, -332, -332, 83, 274,
	275, 307, -557, 401, 31, 356, 356, 357, -568, 31,
	-169, 350, 31, -301, -302, -303, -304, 68, 72, 74,
	78, 69, 70, 71, 75, 31, 157, -334, -339, 35,
	-336, 89, -334, -174, -179, -184, -334, 83, -581, -583,
	483, 480, 486, -419, -419, 243, 83, 125, -419, -419,
	41, -335, -578, 487, 481, -129, 157, 80, -232, -207,
	-208, -209, -210, -236, -312, 192, 195, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 208, 209, 206, 207,
	256, 187, 188, 189, 190, 210, 173, 193, 539, 174,
	175, 176, 177, 178, 179, 182, 183, 184, 185, 181,
	-336, -216, -295, -177, -179, -336, 89, -336, 144, -295,
	122, -6, 120, -141, -140, -139, 123, 612, 618, 122,
	122, 122, 84, 84, 84, 157, 84, 84, 84, 157,
	84, 157, 99, -499, 460, 40, 157, 83, 84, 157,
	61, 157, 125, 84, 157, -364, -336, 89, -364, 84,
	61, -129, 89, 157, -186, 37, 38, 156, 433, -336,
	-510, 84, -425, 157, 243, 156, 156, -401, 379, -335,
	-403, 21, 541, -312, 39, -319, 125, 644, -336, 84,
	-366, -366, 114, -362, -359, 84, 122, -364, 120, -234,
	-236, 395, 396, -364, -234, -235, -241, 153, 191, 256,
	190, 189, 187, 395, 396, -253, -336, -364, -364, 84,
	-364, -364, 17, -336, -253, -360, -364, -191, -191, 84,
	84, -432, -433, -432, -432, 84, 84, 84, 84, -432,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	83, 99, 101, 99, 101, -492, -590, 63, 620, 62,
	423, 104, 310, 157, 99, 89, 645, 157, 125, -336,
	17, 239, 89, 170, 89, -569, 314, 350, -444, 99,
	314, 350, 491, 387, 84, 157, -312, -207, -196, 83,
	-196, -559, 462, 403, 413, -332, -356, -355, 352, 42,
	-478, 424, 409, 410, -402, 270, -336, -336, -565, 96,
	125, 80, 335, 339, 340, 336, 337, 338, -382, -383,
	-381, -385, -552, 83, 83, -171, 35, 133, -168, 83,
	83, 35, -455, 325, -236, -230, -178, -336, 17, 157,
	-551, 156, -1, -336, -395, -348, -295, -364, -364, -295,
	-348, -348, 167, -350, -336, -455, -236, 35, -277, 236,
	233, -429, 307, 308, -430, -445, 310, -447, 83, -233,
	-312, -227, -523, -524, -384, -336, 110, -523, 110, 83,
	-233, -312, -312, -280, -347, -312, -336, -336, -336, -336,
	-285, -284, -312, -287, 32, -288, -336, -336, -336, -336,
	110, -336, 110, -258, 41, 48, 49, 50, -332, -332,
	194, -261, 41, 423, 425, 426, -287, 99, 99, 99,
	99, 89, 89, 89, -332, -332, 99, 89, -339, 89,
	-525, 169, 45, 46, 99, 99, 99, 99, 41, 89,
	-266, 41, 290, 294, 291, 292, 293, 89, 99, 41,
	99, 41, 99, 41, -336, 83, -526, -527, 89, -444,
	-559, -332, 356, -416, 125, 125, -356, -564, 320, -170,
	491, 32, -200, 236, 233, -552, -407, -406, -312, -183,
	-183, -183, -183, 68, 68, 68, 68, 73, 68, 73,
	68, -303, -407, -185, -196, -339, 84, -575, -574, -573,
	-571, 76, 244, 77, -370, 480, 484, 485, -403, -351,
	89, -410, -204, 24, -230, -230, -477, 300, 301, 84,
	157, -236, -297, 19, 156, -297, 118, -6, -137, -139,
	-364, -6, -364, 614, 369, 615, 89, 99, 99, -507,
	444, 439, 441, 110, -373, -494, -493, 61, -171, -194,
	-486, -529, -492, -336, 645, 645, 645, 645, 61, -171,
	-486, -204, -499, -188, -187, 44, -336, 99, 17, -400,
	-395, 144, 144, -336, 380, -411, 89, 402, 89, 239,
	645, 89, -319, -359, -364, 84, -244, 178, 177, -244,
	35, 84, 84, -462, -462, -461, -464, -461, -244, -244,
	84, 84, 24, 84, 84, 84, -364, 84, 84, 157,
	-482, 500, -483, 574, -432, -432, -432, -432, -432, -432,
	-432, -432, -432, -432, -432, -432, -432, -432, -432, -432,
	-375, -374, 262, 445, 627, 627, 445, 627, 627, 84,
	157, -532, 157, -327, 315, -327, -318, 89, 243, 167,
	-336, 89, -336, 89, 307, -336, -336, 89, 89, -219,
	-236, 84, 35, -223, -224, -225, -233, -226, -228, 35,
	-560, 93, -555, 89, -336, 90, -561, 93, 404, 155,
	354, 41, 405, 406, 421, 349, 99, 99, 411, -553,
	-336, -169, -169, -563, 52, 125, 89, -230, -381, -324,
	152, 281, 328, -292, -291, -336, 89, -223, -171, -230,
	-223, -223, -171, -456, 327, 21, 99, 143, -197, 81,
	156, -179, -231, -336, 144, 84, -295, -354, -295, -295,
	125, -348, -456, -171, -441, 311, 83, -439, 83, -439,
	110, 336, -448, -446, 262, -283, 45, 47, -236, -521,
	-336, -519, -521, -336, -519, -519, -384, -364, -283, -233,
	243, 31, 233, -286, 333, 334, 339, -412, 306, 115,
	-412, 157, -186, 157, -336, -253, -253, 31, 89, 89,
	-232, 84, 157, 125, 89, -560, -555, 125, -417, 89,
	89, -561, -565, 125, -162, 93, -325, 157, -200, -200,
	-295, 157, 125, -202, -201, 80, 81, -203, 80, -201,
	68, 68, -295, -573, -572, 24, -524, -524, -524, 84,
	84, 15, -209, 41, -296, 20, 21, 144, -296, 122,
	120, 122, 122, -336, 84, 84, -468, 605, -503, -505,
	439, 21, 21, 15, 244, 84, -486, -486, -507, 45,
	46, -395, -411, 424, -230, 157, 645, -234, -364, 84,
	-364, 84, 89, 84, 89, -191, 21, 84, 157, 84,
	84, 84, 157, 84, 84, -364, 84, -532, -328, 188,
	89, -328, 350, -336, 17, 89, -444, 307, 307, 239,
	237, -171, 84, 157, -171, 89, -558, 415, 89, 89,
	99, 41, 99, 155, 407, -479, -162, -162, -562, 93,
	125, 644, 83, -332, -332, -332, -336, 84, 157, -332,
	-332, 84, 84, 84, -251, 541, -457, 261, 99, 143,
	99, 143, 99, -334, -179, -336, -295, -551, 156, 89,
	-295, -457, -431, 312, 99, -360, 83, -360, 83, -440,
	309, 83, 84, 157, -336, -312, -248, -247, -245, 104,
	115, 41, 393, -246, 93, 152, 295, 298, 297, 273,
	296, -275, -352, 80, 399, 333, 334, -385, 605, 529,
	246, 109, 110, 381, -353, 83, 83, 81, 315, 83,
	83, -521, 84, -283, -312, 41, -286, 41, 346, 306,
	-284, -336, 152, -253, 84, -527, 89, -558, 89, -419,
	-563, 89, 89, -552, -191, -406, -492, -364, 83, -364,
	83, 68, 11, 19, -357, -364, -372, 245, -6, 615,
	369, -268, 606, 89, 21, 89, -501, 89, -407, -468,
	-132, -265, -324, 278, 84, 84, 84, -432, -432, -435,
	-434, -438, 445, 307, 453, -372, 89, 89, 84, 84,
	89, -336, 243, 167, -323, -322, 89, 89, -444, -444,
	-336, -211, -236, -166, 541, -251, -225, -166, 21, 541,
	353, 41, 99, 41, 408, 125, 105, 106, -320, -321,
	89, -390, -392, -312, 83, -253, -255, 89, -291, -357,
	-357, -249, -171, 35, -250, -289, -385, -131, -130, -249,
	83, -458, 161, 99, 143, 99, 99, -295, -295, 645,
	-458, -447, 21, 84, -426, 84, -426, 83, 125, -360,
	-446, -449, 61, -245, 104, -360, 89, -255, -256, 41,
	294, 290, 125, 125, -257, 41, 274, 275, -267, 83,
	305, 15, 194, 83, 110, 110, -230, -390, -390, -522,
	335, 336, 337, 341, 339, 340, 338, -522, -390, -390,
	83, -413, -412, -360, -332, -332, 152, -562, -192, -195,
	-520, -336, 246, 21, 21, -336, -336, -316, 607, 99,
	89, 441, -268, -469, 608, -497, -439, -253, 125, 84,
	-437, 117, 407, 411, -358, -361, 99, 101, 186, 155,
	84, 84, 350, -336, 157, 125, 89, 89, 307, 540,
	-167, 60, 487, 89, 90, 402, 89, 90, 353, 89,
	645, 157, 125, 84, 157, -461, -364, -427, 262, -171,
	157, -289, -324, -132, -427, -252, -290, -336, 89, -476,
	169, 326, 541, 99, 143, 99, -191, -459, 169, 326,
	-430, 84, 84, 84, -426, 99, 84, -453, -450, 83,
	-289, 264, 135, 89, 89, 99, 83, -487, 31, 89,
	-391, 83, 84, 84, 84, 84, -390, 99, -253, -332,
	84, 84, 157, 83, 21, -316, -470, 609, 89, -506,
	444, -500, -498, 439, 440, 441, 442, 89, -436, -437,
	411, -358, -361, 603, 451, 451, 451, -336, 243, -322,
	89, -444, -213, -336, 305, 424, -321, 89, -393, -392,
	-186, 84, -428, 314, 21, -289, -332, -428, 84, 157,
	-332, -332, 326, 99, 143, 99, -192, 326, -442, 313,
	84, -453, -289, -452, -451, 312, 265, 83, 84, -364,
	-376, -332, 84, -270, -269, 537, -390, -393, 81, -393,
	81, -393, 81, -393, 81, 84, -253, -336, 246, -317,
	-336, -501, 89, -508, 244, -504, -505, 443, -498, 21,
	441, 21, 21, -133, 157, 114, 452, 452, 452, 350,
	89, -212, 35, 446, 380, -394, 252, 346, 347, 93,
	541, 333, 334, -186, 21, -429, -253, -290, -357, -357,
	99, 99, 84, 157, -336, 261, 83, -371, -365, -364,
	261, 84, -336, -274, -272, -273, 80, 458, 303, 304,
	84, -522, -522, -522, -522, -275, 84, 157, -515, 83,
	99, -503, -502, -504, 21, -501, 21, -501, -501, 448,
	-436, -336, 89, -332, -332, 89, 89, 332, -312, 83,
	-441, -451, -450, -371, 84, 157, -412, -273, 80, -272,
	80, 16, 15, -393, -393, -393, -393, -336, -518, 31,
	84, -514, -513, -313, -509, -336, 444, 445, 89, -501,
	125, -593, -592, 626, 99, 99, -336, -426, -431, 84,
	-365, -271, 300, 301, 31, 169, -271, -517, -516, -314,
	84, 157, 156, 89, 89, 84, -447, 104, 41, 302,
	157, 125, -513, -336, -516, 41, -364, 156, -336,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 0, 303, 304, 305, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 0, 0, 0,
	0, 0, 678, 679, 0, 642, 0, 0, 0, 0,
	0, 0, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 0, 328, 324, 249, 250,
	251, 252, 253, 335, 336, 500, 0, 0, 0, 0,
	761, -2, 93, 0, 0, 0, 0, 317, 0, 308,
	308, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, -2, 691, 0, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 388, 389, 390, 384, 385, 387,
	386, -2, 0, 691, 0, 0, 0, 769, 0, 0,
	0, 812, 834, 23, 0, 7, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 0, 0, 19, 0,
	19, 0, 0, 0, 1341, 1342, 1343, 1344, 2125, 2095,
	-2, 1866, 1843, 2019, 2020, 1920, 1931, 2161, 2162, 2163,
	2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173,
	2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183,
	2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193,
	2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203,
	2204, 2205, 2206, 2207, 2208, 2209, 2210, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
	1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
	1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, -2, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
	2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
	2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	-2, -2, -2, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
	2121, 2122, 2123, 2124, 2126, 2127, 2128, 2129, 2130, 2131,
	2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141,
	2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 0,
	301, 299, 1813, 1843, 1866, 1920, 1931, 1932, 1967, 2019,
	2020, 2052, 2095, 2111, 2112, 2113, 2125, 0, 0, 947,
	0, 739, 0, 0, 744, 1289, 739, 329, 680, 681,
	769, 795, 640, 0, 366, 0, 1857, 370, 2102, 0,
	0, 0, 637, 360, 361, 362, 363, 364, 365, 0,
	0, 920, 0, 0, 356, 0, 323, 1922, 2124, 1345,
	0, 0, 0, 0, 0, 192, 1067, 194, 1069, 198,
	206, 0, 0, 0, 211, 212, 215, 216, 217, 218,
	219, 0, 223, 0, 225, 228, 0, 230, 231, 0,
	234, 235, 236, 0, 246, 247, 248, 1070, 1071, 1072,
	-2, 121, 945, 1771, 1658, 0, 1665, 1678, 1689, 1422,
	1423, 1424, 1425, 0, 0, 0, 0, 0, 0, 1433,
	1434, 0, 1462, 2165, 2206, 2207, 0, 1442, 1443, 1444,
	1445, 1446, 1447, 132, 144, 145, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 0, 1719, 1720, 1721, 1629, 1409, 1341,
	0, 2174, 0, 2196, 2201, 2202, 2203, 2204, 2195, 0,
	0, 1614, 0, 1604, 0, 0, -2, -2, 0, 0,
	1992, -2, 2208, 2209, 2210, 2171, 2192, 2200, 2175, 2176,
	2199, 2167, 2168, 2169, 2162, 2163, 2164, 2166, 2178, 2180,
	2191, 0, 2187, 2197, 2198, 2100, 0, 0, 0, 0,
	0, 2142, 146, 147, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1625, -2, -2, 1628, -2, 1631, -2, -2, -2,
	-2, 1636, 1637, -2, 1639, -2, -2, -2, -2, -2,
	-2, -2, 1616, 1617, 1618, 1619, 1608, 1609, 1610, 1611,
	1612, 1613, -2, -2, -2, 795, 870, 0, 795, 0,
	770, 817, 820, 823, 826, 773, 0, 0, 94, 95,
	0, 0, 0, 0, 0, 0, 0, 318, 319, 307,
	309, 0, 313, 0, 306, 1103, 1103, 1103, 0, 0,
	0, 0, 1103, 1103, 1103, 1103, 1103, 0, 1103, 0,
	0, 0, 0, 0, 1103, 0, 980, 1074, 1075, 1076,
	1101, 1102, 1175, 0, 0, 0, 696, 692, 693, 694,
	695, 783, 0, 785, 788, 0, 615, 615, 843, 843,
	561, 0, 0, 0, 615, 0, 575, 567, 0, 0,
	0, 615, 0, 0, 790, 790, 0, 618, 627, 615,
	615, -2, 615, 615, 612, 615, 0, 0, 1115, 581,
	582, 583, 567, 567, 586, 587, 588, 598, 599, 628,
	1795, 0, 0, 500, 500, 0, 500, 500, 0, 500,
	500, 500, 698, 1962, 1864, 1937, 1922, 2124, 0, 274,
	1992, 279, 0, 1865, 1884, 0, 0, 1902, 0, -2,
	0, 345, 795, 0, 0, 769, 0, 0, 0, 0,
	500, 500, 500, 500, 500, 1174, 500, 500, 500, 500,
	500, 0, 0, 0, 500, 500, 500, 500, 0, 0,
	835, 836, 831, 832, 833, 837, 838, 5, 6, 19,
	0, 0, 0, 0, 0, 0, 100, 99, 0, 1772,
	1790, 1724, 1725, 1726, 1777, 1728, 1781, 1781, 1781, 1781,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1781,
	1781, 0, 0, 1770, 1748, 1779, 1779, 1779, 1777, 1774,
	1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738,
	1739, 1740, 1741, 1742, 1784, 1784, 1787, 1787, 1784, 0,
	402, 400, 401, 1654, 0, 0, 0, 0, 739, 743,
	1287, 0, 0, 0, 795, -2, 0, 0, 641, 367,
	1346, 0, 0, 371, 0, 372, 0, 0, 0, 391,
	0, 394, 379, 380, 381, 375, 0, 172, 0, 358,
	359, 0, 0, 325, 0, 0, 0, 501, 0, 0,
	0, 0, 0, 0, 203, 199, 207, 210, 220, 227,
	0, 239, 241, 244, 200, 208, 213, 214, 221, 242,
	201, 204, 205, 209, 243, 245, 202, 222, 226, 240,
	224, 229, 232, 233, 238, 0, 173, 0, 0, 0,
	0, 0, 1664, 0, 0, 1697, 1698, 1699, 1700, 1701,
	1702, 1703, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 1658, 0, 0, 1428, 1429, 1430, 1431, 0,
	1435, 0, 1463, 0, 0, 0, 0, 0, 1718, 1722,
	0, 1654, 1654, 0, 1654, 1650, 0, 0, 0, 0,
	0, 0, 1654, 1587, 0, 0, 1589, 1605, 0, 0,
	1591, 1592, 0, 1595, 1596, 1654, 0, 1654, 1600, 1654,
	1654, 1654, 1583, 1584, 0, 1650, 1650, 1650, 1650, 0,
	0, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
	1650, 1650, 1650, 1650, 1650, 0, 0, 0, 0, 790,
	0, 796, 0, -2, 0, 814, 816, 818, 819, 821,
	822, 824, 825, 827, 828, 775, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 311,
	0, 316, 0, 0, 0, 0, 0, 944, 0, 0,
	1103, 1103, 1103, 981, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 1103, 1103, 1103, 0, 1121, 0, 0,
	0, 698, 697, 0, 784, 0, 0, 0, 843, 0,
	0, 558, 559, 0, 560, 0, 567, 615, 615, 573,
	574, 569, 568, 623, 624, 618, 0, 618, 618, 843,
	0, 592, 593, 594, 615, 615, 600, 791, 0, 601,
	602, 618, 0, 625, 626, 843, 0, 0, 843, 843,
	0, 610, 611, 613, 615, 0, 0, 1103, 0, 633,
	569, 569, 1796, 1797, 0, 0, 1112, 0, 0, 0,
	0, 636, 0, 0, 0, 0, 699, 254, 257, 0,
	260, 0, 1962, 0, 1962, 0, 267, 0, 0, 0,
	0, 0, 0, 297, 298, 0, 0, 0, 0, 288,
	291, 1281, 1282, 1064, 1065, 292, 293, 337, 338, 0,
	790, 813, 815, 809, 810, 811, 0, 0, 0, 0,
	0, 0, 0, 500, 0, 0, 0, 0, 0, 674,
	0, 960, 676, 0, 0, 0, 0, 0, 851, 845,
	847, 915, 132, 851, 8, 117, 114, 0, 19, 0,
	0, 19, 19, 0, 19, 302, 0, 1793, 1791, 1792,
	1727, 1778, 0, 1753, 0, 1754, 1755, 1756, 1766, 1767,
	0, 0, 1749, 0, 1750, 1751, 1752, 1743, 0, 1744,
	1745, 0, 1746, 1747, 300, 399, 0, 0, 1655, 948,
	0, 717, 731, 712, 0, 720, 0, 0, 1289, 1290,
	0, 0, 0, 700, 731, 702, 0, 720, 790, 767,
	0, 745, 0, 0, 368, 0, 376, 373, 0, 377,
	0, 0, 393, 395, 396, 397, 382, 383, 638, 354,
	355, 346, 347, 348, 349, 350, 351, 352, 353, 0,
	0, 0, 357, 142, 0, 326, 327, 0, 0, 0,
	186, 187, 188, 189, 190, 191, 193, 177, 663, 665,
	1056, 1068, 0, 1059, 0, 196, 237, 169, 0, 0,
	0, 1659, 1660, 1661, 1662, 1663, 1668, 0, 1670, 1672,
	1674, 1676, 0, 1694, -2, -2, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1679, 1692,
	1693, 0, 0, 0, 0, 0, 0, 1690, 1690, 1685,
	0, 1448, 1283, 1284, 1426, 0, 0, 1460, 1464, 0,
	0, 0, 0, 0, 133, 1649, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 0, 0, 1658, 0, 0,
	0, 1651, 1652, 0, 0, 0, 1542, 0, 0, 1548,
	1549, 1550, 0, 726, 0, 1615, 1588, 1606, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 869, 871, 0, 735, 737,
	738, 764, 745, 771, 0, 0, 0, 92, 97, 0,
	1142, 0, 0, 0, 70, 72, 0, 1116, 0, 1118,
	320, 321, 0, 0, 315, 0, 0, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 996, 997, 498, 1050,
	0, 0, 0, 1066, 1091, 1099, 0, 0, 0, 0,
	0, 1148, 982, 987, 988, 989, 983, 984, 990, 991,
	0, 786, 0, 0, 884, 69, 557, 616, 617, 844,
	564, 1922, 569, 843, 843, 576, 570, 577, 620, 578,
	579, 580, 618, 843, 843, 792, 615, 618, 603, 619,
	618, 621, 607, 0, 614, 621, 634, 621, 0, 632,
	584, 585, 1150, 788, 415, 416, 417, 419, 0, 468,
	468, 468, 451, 468, 0, 0, 439, 1798, 0, 0,
	0, 0, 448, 1798, 0, 0, 1798, 1798, 1798, 1798,
	1798, 1798, 1798, 0, 0, 1798, 1798, 1798, 1798, 1798,
	1798, 1798, 1798, 1798, 1798, 1798, 0, 1798, 1798, 1798,
	1798, 1798, 1267, 1798, 0, 1113, 458, 459, 460, 461,
	466, 467, 0, 0, 495, 0, 0, 995, 0, 498,
	0, 1035, 856, 0, 857, 858, 854, 886, 910, 910,
	0, 910, 890, 1289, 0, 0, 265, 266, 255, 0,
	256, 0, 268, 269, 0, 271, 272, 273, 280, 1864,
	1937, 275, 277, 0, 0, 281, 294, 295, 296, 0,
	0, 286, 287, 0, 0, 340, 341, 343, 0, 745,
	1117, 71, 660, 1285, 661, 662, 666, 0, 0, 669,
	670, 671, 672, 673, 962, 0, 0, 1042, 1043, 1044,
	1045, 843, 0, 852, 0, 848, 916, 0, 918, 0,
	843, 0, 115, 19, 0, 108, 105, 0, 0, 0,
	0, 0, 1773, 1723, 1794, 0, 0, 0, 1775, 0,
	0, 0, 0, 0, 98, 747, 707, 0, 711, 728,
	0, 732, 0, 0, 724, 716, 721, 0, 0, 741,
	708, 1288, 0, 0, 0, 701, 0, 0, 706, 745,
	0, 768, 797, 798, 801, 1347, 0, 378, 374, 392,
	0, 500, 0, 0, 0, 180, 1053, 0, 181, 185,
	175, 0, 0, 0, 1058, 0, 1055, 1060, 0, 195,
	0, 0, 170, 171, 1133, 1142, 0, 0, 0, 1669,
	1671, 1673, 1675, 1677, 0, 1680, 1690, 1690, 1686, 0,
	1681, 0, 1683, 0, 1659, 1432, 0, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 1532, 1533, 0, 0,
	1537, 0, 1539, 1540, 1541, 1543, 0, 0, 0, 1547,
	0, 1586, 1607, 1590, 1593, 0, 1597, 0, 1599, 1601,
	1602, 1603, 0, 795, 795, 0, 0, 1504, 1504, 1504,
	0, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 1450, 1451, 0,
	0, 0, 872, 765, 0, 0, 0, 0, 0, 1140,
	0, 85, 0, 0, 73, 74, 322, 310, 312, 0,
	0, 1104, 0, 0, 0, 0, 0, 950, 951, 953,
	0, 956, 957, 958, 962, 788, 0, 788, 1007, 1798,
	502, 0, 0, 1052, 0, 0, 1024, 0, 0, 0,
	-2, 0, 0, 1099, 0, 0, 0, 1152, 0, 0,
	0, 685, 689, 23, 789, 0, 562, 0, 563, 615,
	571, 572, 843, 595, 596, 0, 0, 843, 615, 615,
	606, 0, 618, 629, 0, 630, 631, 1152, 0, 0,
	1112, 1218, 1186, 429, 0, 1302, 1303, 469, 0, 1309,
	1318, 1103, 1379, 0, 1318, 0, 0, 1320, 1321, 0,
	0, 0, 0, 452, 453, 0, 438, 0, 0, 0,
	0, 0, 0, 437, 0, 0, 479, 0, 0, 0,
	0, 0, 1799, 1798, 1798, 0, 446, 447, 0, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 1798, 1798,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1258, 0, 0, 0, 0, 0, 0, 0, 1273,
	1274, 0, 1007, 1798, 0, 0, 0, 0, 502, 1022,
	1040, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 788, 911, 0,
	913, 914, 888, -2, 0, 856, 893, 1654, 258, 259,
	0, 0, 264, 282, 284, 0, 0, 0, 283, 285,
	289, 290, 339, 342, 344, 807, 0, 0, 1176, 0,
	963, 964, 966, 967, 0, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1848, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	961, 677, 841, 846, 853, 917, 919, 133, 849, 841,
	0, 118, 19, 117, 109, 110, 0, 19, 0, 0,
	0, 0, 1783, 1782, 1768, 0, 1769, 1780, 1785, 0,
	1788, 0, 403, 751, 0, 0, 731, 733, 0, 0,
	731, 0, 0, 740, 0, 0, 0, 0, 0, 0,
	731, 807, 747, 0, 804, 802, 803, 0, 0, 639,
	143, 398, 0, 0, 0, 0, 0, 664, 0, 1057,
	177, 0, 0, 197, 0, 0, 0, 1142, 1137, 1653,
	1682, 1684, 0, 1691, 1687, 1427, 1436, 1461, 0, 0,
	1467, 1479, 1479, 0, 0, 0, 1470, 1781, 1781, 1473,
	1777, 1779, 1777, 1479, 1479, 0, 134, 0, 0, 1538,
	0, 0, 0, 727, 0, 0, 0, 1500, 1502, 1504,
	1504, 1511, 1505, 1512, 1513, 1504, 1504, 1504, 1504, 1518,
	1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
	1498, 0, 0, 1712, 1713, 736, 0, 0, 778, 779,
	780, 781, 782, 0, 0, 60, 60, 1142, 0, 86,
	0, 0, 75, 314, 0, 76, 77, 0, 0, 84,
	0, 0, 0, 0, 0, 955, 0, 0, 0, 1295,
	0, 1011, 1008, 1009, 1010, 0, 1047, 503, 504, 505,
	506, 0, 0, 0, 1051, 0, 1035, 1035, 1017, 0,
	0, 0, 1092, 1093, 1094, 1095, 1096, 1097, 1098, -2,
	1107, 0, 0, 0, 1295, 1126, 0, 0, 1131, 1295,
	1295, 0, 1160, 0, 1149, 739, 0, -2, 0, 0,
	687, 0, 0, 885, 565, 843, 589, 793, 794, 621,
	843, 843, 0, 615, 635, 1160, 1151, 0, 418, 468,
	0, 1206, 0, 0, 1212, 0, 1219, 422, 0, 470,
	0, 1308, 1335, 1319, 1335, 1380, 1335, 1335, 1103, 0,
	470, 0, 0, 440, 476, 0, 0, 0, 0, 0,
	436, 473, 801, 423, 425, 426, 427, 477, 478, 480,
	0, 482, 483, 442, 454, 455, 456, 457, 0, 0,
	0, 449, 462, 463, 464, 465, 424, 1235, 1236, 1237,
	1240, 1241, 1242, 1243, 0, 0, 1246, 1247, 1248, 1249,
	1250, 1332, 1333, 1334, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1275, 1276, 1277, 1278, 1279, 1280, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 0, 0, 1270, 0, 0,
	1011, 0, 0, 0, 0, 0, 1047, 1024, 0, 1031,
	0, 1036, 1037, 0, 0, 709, 843, 332, 0, 880,
	873, 0, 862, 877, 878, 879, 865, 0, 867, 0,
	863, 864, 843, 855, 887, 912, 889, 892, 894, 895,
	901, 0, 0, 0, 0, 261, 262, 263, 270, 0,
	522, 276, 763, 0, 1286, 667, 668, 1177, 1178, 675,
	0, 968, 839, 0, 0, 839, 113, 116, 0, 111,
	0, 0, 0, 0, 103, 101, 1776, 0, 0, 753,
	157, 0, 0, 0, 729, 0, 734, 731, 715, 725,
	714, 722, 723, 742, 1291, 1292, 1293, 1294, 731, 705,
	704, 766, 751, 799, 800, 0, 1348, 369, 0, 1054,
	177, 182, 183, 184, 178, 176, 1061, 0, 1063, 0,
	1135, 0, 0, 1688, 1466, 1437, 1468, 1480, 1481, 1469,
	0, 1439, 1440, 1471, 1472, 1474, 1475, 1476, 1477, 1478,
	1441, 1534, 0, 1536, 1544, 1545, 0, 1594, 1598, 0,
	0, 0, 0, 0, 1509, 1510, 1514, 1515, 1516, 1517,
	1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	795, 1499, 0, 0, 0, 0, 0, 0, 0, 776,
	0, 0, 0, 62, 0, 62, 1141, 1143, 0, 0,
	0, 0, 78, 79, 0, 0, 0, 943, 946, 952,
	954, 0, 0, 0, 1296, 1297, 1299, 1300, 1301, 0,
	979, 0, 0, 999, 1000, 1001, 1013, 0, 0, 0,
	508, 509, 0, 0, 0, 521, 517, 518, 519, 499,
	1046, 1031, 1031, 1020, 0, 0, 1030, 0, 1108, 1798,
	1798, 1798, 0, 0, 1220, 1798, 1798, 0, 1128, 1130,
	0, 0, 1224, 1163, 0, 0, 1154, 0, 910, 0,
	0, 843, 686, 689, 690, 787, 566, 604, 608, 605,
	0, 843, 1163, 414, 1184, 0, 0, 0, 0, 0,
	1216, 0, 0, 1188, 0, 441, 471, 0, -2, 0,
	1336, 0, 1322, 1336, 0, 0, 1335, 0, 430, 470,
	0, 0, 0, 484, 488, 489, 0, 486, 1375, 0,
	487, 0, 475, 0, 481, 1238, 1239, 0, 1244, 1245,
	0, 1269, 0, 0, 421, 490, 0, 0, 0, 491,
	492, 497, 1017, 0, 1034, 0, 1041, 0, 1038, 1039,
	795, 0, 0, 859, 881, 0, 0, 860, 0, 861,
	866, 868, 331, 896, 0, 0, 898, 899, 900, 891,
	278, 808, 965, 0, 829, 0, 0, 850, 830, 0,
	19, 0, 0, 106, 1786, 1789, 755, 0, 752, 158,
	0, 0, 0, 0, 719, 730, 713, 703, 753, 805,
	806, 179, 174, 1062, 1145, 0, 1136, 0, 0, 1546,
	0, 1504, 1501, 1504, 1503, 1495, 0, 1452, 0, 1454,
	1455, 1456, 0, 1458, 1459, 0, 774, 0, 58, 0,
	61, 59, 0, 87, 0, 67, 0, 0, 0, 0,
	0, 985, 1224, 0, 985, 1012, 998, 0, 1048, 1049,
	0, 510, 511, 0, 514, 520, 1014, 1015, 1016, 0,
	0, 1028, 0, 0, 0, 0, 1100, 1114, 0, 0,
	0, -2, 0, -2, 1125, 0, 1169, 0, 1161, 0,
	1153, 0, 1156, 843, 843, -2, 683, 688, 0, 0,
	609, 1169, 1186, 0, 1207, 0, 0, 0, 0, 0,
	0, 0, 1187, 0, 1200, 472, 1337, -2, 1351, 1353,
	0, 1113, 1356, 1357, 0, 0, 0, 0, 0, 0,
	1401, 1365, 0, 0, 1369, 1370, 1371, 0, 0, 1374,
	0, 1706, 1707, 0, 1378, 0, 0, 0, 0, 0,
	0, 0, 1316, 431, 432, 0, 434, 435, 1798, 1376,
	474, 428, 1798, 444, 1268, 1271, 1272, 496, 493, 494,
	1020, 1023, 1032, 710, 790, 333, 334, 882, 0, 874,
	905, 902, 0, 0, 969, 840, 842, 107, 112, 0,
	0, 757, 0, 754, 0, 748, 750, 168, 718, 755,
	128, 160, 0, 0, 1438, 1535, 1585, 1507, 1508, 0,
	1496, 0, 1490, 1491, 1492, 1497, 0, 0, 777, 772,
	63, 89, 0, 0, 64, 65, 0, 80, 0, 0,
	0, 0, 971, 978, 992, 1119, 1298, 977, 0, 0,
	507, 512, 0, 515, 516, 0, 1018, 1019, 0, 1026,
	0, 0, 1087, 1777, 0, 1109, 1110, 1111, 1221, 1222,
	1223, 1179, 1127, 0, -2, 1232, 0, 1123, 1145, 1179,
	0, 1157, 0, 1164, 0, 1162, 1155, 795, 684, 622,
	1166, 420, 1218, 1208, 0, 1210, 0, 0, 0, 0,
	1189, -2, 0, 1352, 1354, 1355, 1358, 1359, 1360, 1406,
	1407, 1408, 0, 0, 1363, 1403, 1404, 1405, 1364, 0,
	0, 0, 0, 0, 1704, 1705, 1399, 0, 0, 1323,
	1325, 1326, 1327, 1328, 1329, 1330, 1331, 1324, 0, 0,
	0, 1315, 1317, 433, 0, 0, 1798, 1033, 330, 0,
	0, 906, 908, 903, 904, 102, 104, 119, 0, 756,
	159, 0, 757, 130, 0, 151, 0, 1146, 0, 1506,
	1493, 0, 0, 0, 0, 0, 1708, 1709, 1710, 0,
	1453, 1457, 0, 88, 67, 0, 81, 82, 0, 0,
	0, 993, 994, 1002, 1003, 0, 1005, 1006, 513, 1021,
	1025, 1028, 0, 1078, 0, 801, 0, 1181, 0, 1129,
	1112, 1234, 1798, 1132, 1181, 0, 1226, 1798, 1798, 1147,
	0, 1159, 0, 1171, 0, 1165, 790, 413, 0, 1168,
	1204, 1209, 1211, 1213, 0, 1217, 1215, 1190, -2, 0,
	1198, 0, 0, 1361, 1362, 0, 0, 1604, 1798, 0,
	1394, 0, 1078, 1078, 1078, 1078, 0, 485, 443, 0,
	883, 897, 0, 0, 0, 746, 120, 0, 129, 148,
	0, 161, 162, 0, 0, 0, 0, 1138, 0, 1482,
	0, 0, 0, 1486, 1487, 1488, 1489, 90, 0, 66,
	68, 0, 0, 970, 0, 1004, 1027, 1029, 1077, 1088,
	1089, 801, 1122, 0, 1218, 1233, 0, 1124, 1225, 0,
	0, 0, 1158, 1170, 0, 1173, 682, 1167, 1185, 0,
	1214, 1191, 1199, 0, 1194, 0, 0, 0, 1402, 0,
	1368, 0, 1373, 1382, 1395, 0, 0, 1304, 0, 1306,
	0, 1310, 0, 1312, 0, 0, 445, 907, 909, 0,
	759, 749, 131, 135, 0, 157, 154, 0, 163, 0,
	0, 0, 0, 1134, 0, 0, 1483, 1484, 1485, 0,
	83, 0, 972, 973, 986, 1079, 1798, 1798, 0, 0,
	0, 1085, 1086, 1090, 0, 1206, 1238, 1227, 1228, 1229,
	1172, 1205, 1193, 0, -2, 1201, 0, 0, 1656, 1666,
	1667, 1366, 1372, 1381, 1383, 1384, 0, 1396, 1397, 1398,
	1400, 1078, 1078, 1078, 1078, 1314, 758, 0, 122, 0,
	0, 152, 153, 155, 0, 164, 0, 166, 167, 0,
	1494, 91, 974, 0, 0, 1082, 1083, 0, 1182, 0,
	1184, 1195, -2, 0, 1203, 0, 1367, 1385, 0, 1386,
	0, 0, 0, 1305, 1307, 1311, 1313, 760, 1144, 0,
	136, 0, 138, 140, 141, 1338, 149, 150, 156, 165,
	0, 959, 975, 0, 1080, 1081, 1084, 0, 1186, 1202,
	1657, 1387, 1389, 1390, 0, 0, 1388, 123, 124, 0,
	137, 0, 0, 1139, 976, 1183, 1180, 1391, 1393, 1392,
	0, 0, 139, 1339, 125, 126, 127, 0, 1340,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 646, 643,
	126, 125, 127, 3, 647, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 644, 138, 645, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:824
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:831
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:837
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:845
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:851
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:855
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:870
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:880
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:885
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:889
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:922
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:935
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:946
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:958
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:962
		{
			yyVAL.str = yyDollar[2].str
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:967
		{
			yyVAL.str = ""
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:971
		{
			yyVAL.str = yyDollar[2].str
		}
	case 64:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:977
		{
			yyLOCAL = tree.NewCreateCDC(yyDollar[3].ifNotExistsUnion(), yyDollar[4].str, yyDollar[5].str, yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[9].strsUnion())
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:982
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:986
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:990
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:994
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1001
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1010
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1019
		{
			yyLOCAL = &tree.DropCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1028
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1035
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1053
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1062
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1072
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1082
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1094
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1104
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1114
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1125
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1136
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1150
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1158
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1166
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1174
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1183
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1193
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1202
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1225
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1245
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1251
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1258
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1266
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1272
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1281
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1291
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1299
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1307
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1315
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1325
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1333
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1343
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1350
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1359
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1369
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1373
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1379
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1383
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1389
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1398
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1408
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1412
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1418
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1427
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1431
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1437
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1458
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1472
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1479
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1483
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1489
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1493
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1499
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1506
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1514
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1518
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1530
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1534
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1548
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1552
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1557
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1564
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1568
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1572
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1578
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1587
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1598
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1602
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1608
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1612
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1618
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1622
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1628
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1652
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1671
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1675
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1679
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1684
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1688
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1697
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1707
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1714
		{
			yyVAL.str = yyDollar[3].str
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1719
		{
			yyVAL.str = "\n"
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1726
		{
			yyVAL.str = yyDollar[3].str
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1731
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1735
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1763
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1767
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1773
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1781
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1801
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1820
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1845
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1849
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1853
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1858
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1862
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1868
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1881
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1892
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1905
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1909
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1919
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1932
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1945
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1951
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1957
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1965
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1975
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1985
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1989
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1993
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1997
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2001
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2005
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2012
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2016
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2022
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2029
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2038
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2042
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2048
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2052
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2056
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2060
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2064
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2068
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2072
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2076
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2080
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2084
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2088
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2092
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2096
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2100
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2104
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2108
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2112
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2116
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2120
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2124
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2128
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2132
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2136
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2140
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2144
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2152
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2160
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2164
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2172
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2176
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2180
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2184
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2188
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2192
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2196
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2200
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2204
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2208
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2212
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2216
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2220
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2224
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2228
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2232
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2236
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2240
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2244
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2248
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2261
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2268
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2275
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2285
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2289
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2295
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2302
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2310
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2314
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2318
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2322
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2328
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2332
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2338
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2345
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2352
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2361
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2391
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2395
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2399
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2405
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2411
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2415
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2422
		{
			yyVAL.str = yyDollar[3].str
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2428
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2432
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2438
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2446
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2455
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2464
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2472
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2480
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2503
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2526
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2533
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2540
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2548
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2555
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2562
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2571
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2575
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2579
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2585
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2589
		{
			yyVAL.str = yyDollar[1].str
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2595
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2599
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2605
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2609
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2620
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2626
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2631
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2635
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2639
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2643
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2647
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2651
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2655
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2659
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2663
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2669
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2673
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2677
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2681
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2686
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2691
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2697
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2710
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2723
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2736
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2749
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2765
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2772
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2783
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2794
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2798
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2804
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2814
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2820
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2824
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2830
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2836
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2840
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2844
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2848
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2854
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2867
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2873
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2877
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2883
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2887
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2893
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2899
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2910
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2916
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2920
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2924
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2928
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2932
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2936
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2944
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2952
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2962
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2974
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2978
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2986
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2994
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3033
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3037
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3043
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3049
		{
			yyVAL.str = yyDollar[1].str
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3054
		{
			yyVAL.str = "true"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3055
		{
			yyVAL.str = "false"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3056
		{
			yyVAL.str = yyDollar[1].str
		}
	case 398:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3061
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3067
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3076
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3083
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3091
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3095
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3119
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3142
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3152
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3159
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3168
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3172
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3178
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3182
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3206
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3216
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3226
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3242
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3260
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3264
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3270
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3274
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3280
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3286
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3294
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3304
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3312
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3322
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3332
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3342
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3349
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3353
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3357
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3361
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3365
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3372
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3378
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3382
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3386
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3390
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3394
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3398
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3402
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3406
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3411
		{
			yyVAL.str = ""
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3442
		{
			yyVAL.str = ""
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3446
		{
			yyVAL.str = string("COLUMN")
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3451
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3457
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3463
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3471
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3475
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3481
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3489
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3496
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3502
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3508
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3514
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3520
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3527
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3534
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3542
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3548
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3560
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3566
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3574
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3578
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3585
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3603
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3618
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3633
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3648
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3661
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3667
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3678
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3691
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3695
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3703
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3707
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3712
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3716
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3732
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3736
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3740
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3744
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3751
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3755
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3759
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3763
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3770
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3774
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3781
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3785
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3789
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3793
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3800
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3807
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3813
		{
			yyVAL.item = nil
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3818
		{
			yyVAL.item = nil
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3863
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3872
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3880
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3888
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3896
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3900
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3904
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3915
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3919
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3925
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3930
		{
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3934
		{
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3939
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3949
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3959
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3967
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3973
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3979
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3985
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3991
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3997
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4003
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4012
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4016
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4020
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4024
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4028
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4032
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4036
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4040
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4046
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4055
		{
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4057
		{
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4066
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4076
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4085
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4089
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4093
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4099
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4105
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4111
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4117
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4126
		{
			yyLOCAL = &tree.ShowTables{
				Open:         false,
				Full:         yyDollar[2].fullOptUnion(),
				DBName:       yyDollar[4].str,
				Like:         yyDollar[5].comparisionExprUnion(),
				Where:        yyDollar[6].whereUnion(),
				SnapshotName: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4137
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4149
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:         yyDollar[3].comparisionExprUnion(),
				Where:        yyDollar[4].whereUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4157
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4163
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4175
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4189
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4201
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4208
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4212
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4217
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4221
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4225
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4230
		{
			yyVAL.str = ""
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4234
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4240
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4245
		{
			yyVAL.str = ""
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line mysql_sql.y:4249
		{
			yyVAL.str = yyDollar[4].str
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4264
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4268
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4274
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4282
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4289
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4293
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4299
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4305
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4310
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4318
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4324
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4329
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4335
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4341
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4345
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4373
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4381
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4389
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4397
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4401
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4407
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4420
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4428
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4437
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4443
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4451
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4459
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4467
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4473
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4481
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4487
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4495
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4501
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4511
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4516
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4523
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4539
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4552
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4563
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4567
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4573
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4579
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4588
		{
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4590
		{
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4593
		{
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4602
		{
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4606
		{
		}
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4611
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4620
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4627
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4633
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4641
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4648
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4655
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4675
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4683
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4693
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4697
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4703
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4710
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4716
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4724
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4731
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4738
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4757
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4761
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4765
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4774
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4778
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4784
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4793
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4797
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4803
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4807
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4813
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4817
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4823
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4828
		{
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4832
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4839
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4843
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4850
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4855
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4859
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4865
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4869
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4875
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4879
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4884
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4888
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4901
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4912
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4923
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4945
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4968
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4976
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4985
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4989
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5002
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5006
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5011
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5015
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5022
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5027
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5034
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5040
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5044
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5048
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5052
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5056
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5060
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5065
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5069
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5075
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5085
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5100
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5104
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5118
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5122
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5128
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5137
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5141
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5145
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5149
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5153
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5159
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5166
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5175
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5179
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5185
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5193
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5197
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5202
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5206
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5212
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5216
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5220
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5225
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5229
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5235
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5241
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5245
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5251
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5256
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5260
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5264
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5269
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5273
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5277
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5282
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5286
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5294
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5298
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5302
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5316
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5320
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5330
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5340
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5350
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5362
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5370
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5378
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5387
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5395
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5403
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5411
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5419
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5427
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5435
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5443
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5451
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5461
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5472
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5486
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5490
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5494
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5499
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5503
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5507
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5516
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5520
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5525
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5529
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5534
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5538
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5544
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5548
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5554
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5558
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5562
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5566
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5571
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5579
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5585
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5593
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5601
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5611
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5617
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5626
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5635
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5644
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5654
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5658
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5668
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5672
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5676
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5680
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 869:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5686
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5696
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5700
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5706
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5712
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5716
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5722
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5728
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5732
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5736
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5740
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5746
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5750
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5756
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5760
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5766
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5770
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5776
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5780
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5790
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5803
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5809
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5815
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5829
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5840
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5847
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5851
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5857
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5867
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5871
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5875
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5880
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5884
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5888
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5892
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5897
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5901
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5905
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5909
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5913
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5918
		{
			yyVAL.str = ""
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5922
		{
			yyVAL.str = yyDollar[1].str
		}
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5926
		{
			yyVAL.str = yyDollar[2].str
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5932
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5936
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5941
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5945
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5949
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5953
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5957
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5963
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 943:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6005
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6018
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6024
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 946:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6030
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6043
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6048
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6055
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6062
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6066
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6072
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6078
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6083
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6087
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6091
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6095
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6102
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6135
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6140
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6147
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6154
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6158
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6164
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6170
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6174
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6178
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6184
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6190
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6196
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6200
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6206
		{
			yyVAL.str = ""
		}
	case 976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6213
		{
			yyVAL.str = yyDollar[2].str
		}
	case 977:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6219
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6234
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6251
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6268
		{
			yyVAL.str = yyDollar[1].str
		}
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6272
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 982:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6278
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6282
		{
			yyVAL.str = "DEFINER = "
		}
	case 984:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6286
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 985:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6291
		{
			yyVAL.str = ""
		}
	case 986:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6295
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6309
		{
			yyVAL.str = ""
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6317
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6323
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6328
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6334
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6347
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6352
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6357
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6363
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6370
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6377
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6384
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6391
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6399
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6405
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6412
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6419
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6427
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6433
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6442
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6459
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var Table = tree.Identifier("")
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6476
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier("")
			var Table = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6495
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6513
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6519
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6526
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6534
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6540
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6548
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6554
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6562
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6568
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6577
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6581
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6586
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6590
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6597
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6602
		{
			yyVAL.str = ""
		}
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6606
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1033:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6612
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6625
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6635
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6639
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6645
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6651
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6657
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6664
		{
			yyVAL.str = ""
		}
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6668
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6674
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6682
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6690
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6698
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6706
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1047:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6711
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6723
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6734
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6843
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6847
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6853
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6866
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6870
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6876
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6889
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6893
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6897
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6902
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6906
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6912
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6919
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6925
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6934
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1066:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6941
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6952
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6956
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6962
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6971
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6975
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6979
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6984
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6988
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6992
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6996
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7002
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7033
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7037
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7063
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7069
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7081
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7087
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7093
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7099
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7105
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7113
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7117
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7123
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7137
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7151
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7155
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7159
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7163
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7167
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7171
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7175
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7181
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7196
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7200
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7211
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7215
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7220
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7224
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7230
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7234
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7240
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7249
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7258
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7264
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7268
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7274
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7285
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7291
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7309
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7327
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7345
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7361
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7365
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7374
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7386
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7395
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7407
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7417
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7427
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7438
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7448
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7459
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7467
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7478
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7485
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7495
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7508
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7516
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7525
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7534
		{
			yyVAL.str = ""
		}
	case 1139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7538
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7544
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7548
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7553
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7557
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7564
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7576
		{
			yyVAL.str = ""
		}
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7580
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1147:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7586
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7607
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7621
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7625
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7629
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7635
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7639
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7646
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7653
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7660
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7667
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7671
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7675
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7679
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7683
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7690
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7697
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7701
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7708
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7715
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7719
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7725
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7731
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7735
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7742
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7749
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7756
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7763
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7767
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7772
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7776
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7780
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7785
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7789
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7802
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7806
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7814
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7822
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7826
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7838
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7842
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7848
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7852
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7858
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7871
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7885
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7889
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7895
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7899
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7905
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7914
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7925
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7929
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7934
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7938
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7944
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7949
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7957
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7961
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7971
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7975
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7986
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7994
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8002
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8010
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8021
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8030
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8040
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8050
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8054
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8059
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8063
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8069
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8073
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8079
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8088
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8098
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8102
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8108
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8112
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8118
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8127
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8137
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8141
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8147
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8151
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8155
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8161
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8165
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8169
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8173
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8177
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8181
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8185
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8190
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8194
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8198
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8202
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8206
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8210
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8214
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8218
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8222
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8226
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8230
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8234
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8238
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8244
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8250
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8254
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8258
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8262
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8266
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8272
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8278
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8284
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8290
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8296
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8302
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8306
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8310
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8314
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8321
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8325
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8331
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8342
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8346
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8352
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8356
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8360
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8364
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8368
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8372
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8386
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8390
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8399
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8405
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8413
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8417
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8421
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8428
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8436
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8443
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8451
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8458
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8462
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8468
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8472
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8476
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8482
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8486
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8492
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8505
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8518
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8557
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8597
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8611
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8617
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8630
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8643
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8656
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8669
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8684
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8694
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8700
		{
			yyVAL.str = ""
		}
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8704
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8714
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8720
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8726
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8747
		{
			yyVAL.str = ""
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8751
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8757
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8763
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8767
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8772
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8780
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8784
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8788
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8792
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8798
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8804
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8808
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8813
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8820
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8824
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8830
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8834
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8840
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8844
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8848
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8852
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8856
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8860
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8865
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8869
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8873
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8877
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8881
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8885
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8889
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8893
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8897
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8901
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8915
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8919
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8923
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8927
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8931
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8935
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8941
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8945
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8950
		{
			yyVAL.str = ""
		}
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8954
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8960
		{
			yyVAL.str = ""
		}
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8964
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1381:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8970
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8987
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8994
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9001
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9008
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9015
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9024
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9030
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9036
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9040
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9044
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9048
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9052
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9057
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9064
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9068
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9072
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9077
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9081
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9086
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9090
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9106
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9112
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9116
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9120
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9124
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9128
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9132
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9136
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9140
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9144
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9148
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9152
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9156
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9160
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9166
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9170
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9174
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9178
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9182
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9186
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9190
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9194
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9198
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9202
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9244
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9248
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9252
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9257
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9265
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9269
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9273
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9277
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9281
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9291
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9295
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9299
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9303
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9307
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9311
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9315
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9321
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9330
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9339
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9350
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9360
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9370
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9379
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9389
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9399
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9409
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9418
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9428
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9432
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9437
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9441
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9447
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9451
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9457
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9466
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9478
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9495
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9512
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9525
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9538
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9550
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9564
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9579
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9594
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9611
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9626
		{
		}
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9633
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9637
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9641
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9647
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9651
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9655
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9659
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9665
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9669
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9673
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9679
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9687
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9697
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9701
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9708
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9713
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9717
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9722
		{
			yyVAL.str = ","
		}
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9726
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9731
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9735
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1504:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9740
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9747
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9773
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9785
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9797
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9808
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9819
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9830
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9840
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9850
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9861
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9872
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9883
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9894
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9905
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9916
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9927
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9938
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9949
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9960
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9971
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9982
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9993
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10004
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10022
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10031
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10040
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10049
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10058
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10069
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10078
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10088
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10097
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10106
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10115
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10124
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10136
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10147
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10160
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10172
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10195
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10231
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10244
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10257
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10269
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10278
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10286
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10294
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10307
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10316
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10327
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10338
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10347
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10359
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10369
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10379
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10388
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10399
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10408
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10418
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10427
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10436
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10446
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10450
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10456
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10460
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10479
		{
		}
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10481
		{
		}
	case 1649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10522
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10534
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10538
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10542
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10548
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10553
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10557
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10563
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10567
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10573
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10577
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10584
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10588
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10592
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10601
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10605
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10609
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10614
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10618
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10624
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10628
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10632
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10636
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10640
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10644
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10648
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10652
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10656
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10660
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10668
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10672
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10676
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10680
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10684
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10688
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10692
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10696
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10700
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10704
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10710
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10714
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10720
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10724
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10731
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10735
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10739
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10745
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10749
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10753
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10757
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10761
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10765
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10769
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10775
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10779
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10783
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10787
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10793
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10806
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10811
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10817
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10821
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10834
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10839
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10843
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10847
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10851
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10855
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10862
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10866
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10870
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10874
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10881
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10892
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10897
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10903
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10915
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10927
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10939
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10952
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10965
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10978
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10991
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11004
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11017
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11030
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11043
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11056
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11069
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11084
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11111
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11153
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11189
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11225
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11242
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11254
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11274
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11294
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11314
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11330
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11343
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11356
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11369
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11382
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11394
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11406
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11418
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11430
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11442
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11454
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11466
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11478
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11490
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11503
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11516
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11529
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11542
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11557
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11565
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11574
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11584
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11607
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11612
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11618
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11625
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11629
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11634
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11638
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11644
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11650
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11657
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11664
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11673
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11680
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11687
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11696
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11700
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11704
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11710
		{
		}
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11712
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11722
		{
			yyVAL.str = ""
		}
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11726
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
